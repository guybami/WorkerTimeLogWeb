
<?php


/**
 * This module was auto generated by GWatcho-Code generator
 * @author
 *    Guy Bami
 */


include_once 'BaseController.php';
include_once '../Includes/CustomFileUploader.php';


class UploadFileController extends BaseController {
    private $customFileUploader = null;


    /**
     *Constructor of the UploadFile controller
     * @param $userAction string the user action
     * @param $userRoles array the user roles
     */
    function __construct($userAction, $userRoles = array()){
        parent::__construct($userAction, $userRoles);
        //$this->customFileUploader = new CustomFileUploader();
    }


     

    /**
     * uploads multiple images files  
     * @param mixed $filesListToUpload array object  with files to upload
     * @return mixed  true if upload was successful
     *    or string with the Exception details if error occured
     */
    public function uploadAllImageFiles($filesListToUpload){

        $postbackData = "";
        $resultObject = null;
        $this->customFileUploader = new CustomFileUploader($filesListToUpload);
        // insert entity using model object
        $resultObject = $this->customFileUploader->uploadAllImageFiles();
        $postbackData = json_encode($resultObject, true);
        
        return $postbackData;

    }
    
    
    public function uploadAllEventPhotoFiles($filesListToUpload){

        $postbackData = "";
        $resultObject = null;
        $targetDirectory = "../UploadedFiles/Images/Events";
        $generateCopiedFileName = false;
        $this->customFileUploader = new CustomFileUploader($filesListToUpload, $targetDirectory, $generateCopiedFileName);
        // insert entity using model object
        $resultObject = $this->customFileUploader->uploadAllImageFiles();
        $postbackData = json_encode($resultObject, true);
        
        return $postbackData;

    }



    
    
    
    public function uploadAllBillFiles($filesListToUpload){

        $postbackData = "";
        $resultObject = null;
        $targetDirectory = "../UploadedFiles/Bills";
        $generateCopiedFileName = false;
        $this->customFileUploader = new CustomFileUploader($filesListToUpload, $targetDirectory, $generateCopiedFileName);
        // insert entity using model object
        $resultObject = $this->customFileUploader->uploadAllBillFiles();
        $postbackData = json_encode($resultObject, true);
        
        return $postbackData;

    }
    
    
    public function uploadExpenseBill($fileToUpload){

        $postbackData = "";
        $resultObject = null;
        $targetDirectory = "../UploadedFiles/Images/Bills/Expenses";
        $generateCopiedFileName = false;
        $this->customFileUploader = new CustomFileUploader($fileToUpload, $targetDirectory, $generateCopiedFileName);
        // insert entity using model object
        $resultObject = $this->customFileUploader->uploadCustomFile($fileToUpload);
        $postbackData = json_encode($resultObject, true);
        
        return $postbackData;

    }
    
    public function uploadIncomeBill($fileToUpload){

        $postbackData = "";
        $resultObject = null;
        $targetDirectory = "../UploadedFiles/Images/Bills/Incomes";
        $generateCopiedFileName = false;
        $this->customFileUploader = new CustomFileUploader($fileToUpload, $targetDirectory, $generateCopiedFileName);
        // insert entity using model object
        $resultObject = $this->customFileUploader->uploadCustomFile($fileToUpload);
        $postbackData = json_encode($resultObject, true);
        
        return $postbackData;

    }
    
    
    public function uploadOldExamFile($fileToUpload){

        $postbackData = "";
        $resultObject = null;
        $targetDirectory = "../UploadedFiles/Images/OldExams";
        $generateCopiedFileName = false;
        $this->customFileUploader = new CustomFileUploader($fileToUpload, $targetDirectory, $generateCopiedFileName);
        // insert entity using model object
        $resultObject = $this->customFileUploader->uploadCustomFile($fileToUpload);
        $postbackData = json_encode($resultObject, true);
        
        return $postbackData;

    }

    public function uploadVideoFile($videoToUpload){

        $postbackData = "";
        $resultObject = null;
        $this->customFileUploader = new CustomFileUploader();
        $resultObject = $this->customFileUploader->uploadVideoFile($videoToUpload);
        $postbackData = json_encode($resultObject, true);
        return $postbackData;

    }

    public static function rearrangeArrayFiles($filesToRearrange)
    {
        if(!is_array($filesToRearrange)){
            return $filesToRearrange;
        }
        $fileArrayRearranged = array();
        $filesCount = count($filesToRearrange['name']);
        $fileKeys = array_keys($filesToRearrange);
        //echo "count: " . $filesCount;
        for($i = 0; $i < $filesCount; $i++)
        {
            foreach($fileKeys as $key)
            {
                $fileArrayRearranged[$i][$key] = $filesToRearrange[$key][$i];
            }
        }
        return $fileArrayRearranged;
    }

    public function uploadAllOrderSchemas($filesListToUpload){

        $postbackData = "";
        $resultObject = null;
        $targetDirectory = "../UploadedFiles/Zeichnungen";
        $generateCopiedFileName = false;
        $this->customFileUploader = new CustomFileUploader($filesListToUpload, $targetDirectory, $generateCopiedFileName);
        // insert entity using model object
        $resultObject = $this->customFileUploader->uploadAllImageFiles();
        $postbackData = json_encode($resultObject, true);

        return $postbackData;

    }

    /**
     * Get dynamic page content
     * @return mixed
     */
    public function getDynamicPageContent() {

        $postbackData = Utils::formatJsonErrorMessage("Undefined Content");
        $resultObject = null;
        switch ($this->getUserAction()) {
            case "uploadImage":
                $filesToUpload = $_FILES['filesToUpload'];
                $filesToUpload = UploadFileController::rearrangeArrayFiles($_FILES["filesToUpload"]);
                //print_r($filesToUpload);
                $postbackData = $this->uploadAllImageFiles($filesToUpload);
                break;
            case "uploadEventPhotos":
                sleep(5);
                $filesToUpload = $_FILES['filesToUpload'];
                //$title = $_POST['title'];
                //$eventId = $_POST['eventId'];
                $filesToUpload = UploadFileController::rearrangeArrayFiles($_FILES["filesToUpload"]);
                //print_r($filesToUpload);
                $postbackData = $this->uploadAllEventPhotoFiles($filesToUpload);
                break;
            case "uploadSchemas":
                sleep(5);
                $filesToUpload = $_FILES['filesToUpload'];
                //$title = $_POST['title'];
                //$eventId = $_POST['eventId'];
                $filesToUpload = UploadFileController::rearrangeArrayFiles($_FILES["filesToUpload"]);
                //print_r($filesToUpload);
                Utils::logDataToFile($filesToUpload);
                $postbackData = $this->uploadAllOrderSchemas($filesToUpload);
                break;
            case "uploadBillFiles":
                $filesToUpload = $_FILES['filesToUpload'];
                $filesToUpload = UploadFileController::rearrangeArrayFiles($_FILES["filesToUpload"]);
                //print_r($filesToUpload);
                $postbackData = $this->uploadAllBillFiles($filesToUpload);
                break;
            case "uploadExpenseBill":
                $fileToUpload = $_FILES['billFileNameToUpload'];
                $postbackData = $this->uploadExpenseBill($fileToUpload);
                break;
            case "uploadIncomeBill":
                $fileToUpload = $_FILES['billFileNameToUpload'];
                $postbackData = $this->uploadIncomeBill($fileToUpload);
                break;
            case "uploadOldExam":
                $fileToUpload = $_FILES['fileFullNameToUpload'];
                $postbackData = $this->uploadOldExamFile($fileToUpload);
                break;
            case "uploadVideo":
                $videoToUpload = $_FILES['videoToUpload'];
                //print_r($videoToUpload);
                $postbackData = $this->uploadVideoFile($videoToUpload);
                break;
            case "testDelay":
                sleep(3);
                //print_r($videoToUpload);
                $postbackData = Utils::formatJsonResultMessage("simultator");
                break;
        }
        return $postbackData;
    }

}
            

  

$userAction = null;
if (isset($_POST) && isset($_POST['userAction'])) {
    $userAction = $_POST['userAction'];
}
if (!isset($userAction)) {
    echo "No action has been set";
}
else{
            
    $uploadFileController = new UploadFileController($userAction);
    $uploadFileController->setUserAction($userAction);
    $postbackContent =   $uploadFileController->getDynamicPageContent();
    // clear previous content
    // send back content to client
    echo $postbackContent;
}


