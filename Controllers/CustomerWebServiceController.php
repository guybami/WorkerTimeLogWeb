
<?php

/**
 * This module was auto generated by GWatcho-Code generator
 * The Customer controller entity class.
 * @author
 *    Guy Bami Watcho
 */
include_once 'BaseController.php';
            


class CustomerController extends BaseController {

    private $customer = null;

    /**
     * Constructor of the Customer controller 

     * @param $userAction string the user action
     * @param $userRoles array the user roles 
     */
    function __construct($userAction, $userRoles = array()) {
        parent::__construct($userAction, $userRoles);
        $this->customer = new Customer();
    }

    /**
     * Gets all Customer entities
     * @return mixed object having all Customer entities
     *    or string with the Exception details if error occured
     */
    public function getAllCustomers() {

        $itemSperator = ",";
        $entitiesList = "";
        $resultObject = $this->customer->selectAllCustomers();
        if (is_string($resultObject)) {
            return Utils::formatJsonErrorMessage($resultObject);
        } else if (is_array($resultObject)) {
            for ($i = 0; $i < count($resultObject); $i++) {
                $entitiesList .=
                        '{"customerId":"' . $resultObject[$i]["customerId"] . '"'
                        . ',"name":"' . $resultObject[$i]["name"] . '"'
                        . ',"lastName":"' . $resultObject[$i]["lastName"] . '"'
                        . ',"email":"' . $resultObject[$i]["email"] . '"'
                        . ',"phoneNumber":"' . $resultObject[$i]["phoneNumber"] . '"'
                        . ',"zipCode":"' . $resultObject[$i]["zipCode"] . '"'
                        . ',"city":"' . $resultObject[$i]["city"] . '"'
                        . ',"street":"' . $resultObject[$i]["street"] . '"'
                        . '}';

                if ($i != count($resultObject) - 1) {
                    $entitiesList .= $itemSperator;
                }
            }
            // close json list
            $entitiesList = "[" . $entitiesList . "]";
        }
        return $entitiesList;
    }

    /**
     * Inserts new Customer entity
     * @param mixed $jsonData json object entity to insert
     * @return mixed  true if insertion was successful
     *    or string with the Exception details if error occured
     */
    public function insertNewCustomer($jsonData) {

        // get json posted values from request
        //$formJsonValues = json_decode($jsonData, true);
        $formJsonValues = $jsonData;
        print_r($formJsonValues);
        $postbackData = "";
        $resultObject = null;
        // insert entity using model object
        $resultObject = $this->customer->insertNewCustomer(
                $formJsonValues['name']
                , $formJsonValues['lastName']
                , $formJsonValues['email']
                , $formJsonValues['phoneNumber']
                , $formJsonValues['zipCode']
                , $formJsonValues['city']
                , $formJsonValues['street']
        );

        if (is_bool($resultObject) || is_int($resultObject)) {
            $postbackData = Utils::formatJsonMessage("insertedItemKey", $resultObject);
        } else if (is_string($resultObject)) {
            //error occured
            $postbackData = Utils::formatJsonErrorMessage($resultObject);
        } else {
            //error occured
            $postbackData = Utils::formatJsonErrorMessage($resultObject);
        }
        return $postbackData;
    }

    /**
     * Updates Customer entity via POST request
     * @param int $customerId
     * @param string $updateMode
     * @param mixed $jsonData
     * @return mixed  true if update was successful
     *    or string with the Exception details if error occured
     */
    public function updateCustomer($customerId, $updateMode, $jsonData) {

        // get json posted values from request
        $formJsonValues = json_decode($jsonData, true);
        $postbackData = "";
        $resultObject = null;
        if ($updateMode == "allFields") {
            // update all entity fields
            $resultObject = $this->customer->updateCustomerDetails(
                    $customerId
                    , $formJsonValues['name']
                    , $formJsonValues['lastName']
                    , $formJsonValues['email']
                    , $formJsonValues['phoneNumber']
                    , $formJsonValues['zipCode']
                    , $formJsonValues['city']
                    , $formJsonValues['street']
            );
            if (is_bool($resultObject)) {
                if ($resultObject == true) {
                    $postbackData = Utils::formatJsonResultMessage(Common::$UPDATE_SUCCESSFUL);
                } else {
                    $postbackData = Utils::formatJsonResultMessage(Common::$UPDATE_FAILED);
                }
            } else if (is_string($resultObject)) {
                //error occured
                $postbackData = Utils::formatJsonErrorMessage($resultObject);
            }
        } else if ($updateMode == "inlineUpdate") {
            // Update entity from the datagrid
            $fieldName = $formJsonValues['fieldName'];
            $keyFieldValue = $formJsonValues['entityKeyId'];
            $newFieldValue = $formJsonValues['newFieldValue'];
            $resultObject = $this->customer->updateCustomerEntityField($fieldName, $keyFieldValue, $newFieldValue);
            if (is_string($resultObject)) {
                //error occured
                $postbackData = Utils::formatJsonErrorMessage($resultObject);
            } else if (is_bool($resultObject)) {
                $postbackData = Utils::formatJsonResultMessage(Common::$UPDATE_INLINE_SUCCESSFUL);
            }
        }
        return $postbackData;
    }

    /**
     * Deletes all selected entities via POST request
     * @param mixed $jsonData all entities Id to delete
     * @return mixed
     */
    public function deleteCustomers($jsonData) {

        // delete entity using model
        $resultObject = $this->customer->deleteSelectedCustomers($jsonData);
        if (is_bool($resultObject)) {
            if ($resultObject == true) {
                $postbackData = Utils::formatJsonResultMessage(Common::$DELETE_SUCCESSFUL);
            } else {
                $postbackData = Utils::formatJsonResultMessage(Common::$DELETE_FAILED);
            }
        } else if (is_string($resultObject)) {
            //error occured
            $postbackData = Utils::formatJsonErrorMessage($resultObject);
        } else {
            $postbackData = Utils::formatJsonErrorMessage($resultObject);
        }
        return $postbackData;
    }

    /**
     * Deletes all entities
     * @param mixed $jsonData all entities Id to delete
     * @return mixed
     */
    public function deleteAllCustomers() {

        // delete entities using corresponding model
        $resultObject = $this->customer->deleteAllCustomers();
        if (is_bool($resultObject)) {
            if ($resultObject == true) {
                $postbackData = Utils::formatJsonResultMessage(Common::$DELETE_SUCCESSFUL);
            } else {
                $postbackData = Utils::formatJsonResultMessage(Common::$DELETE_FAILED);
            }
        } else if (is_string($resultObject)) {
            //error occured
            $postbackData = Utils::formatJsonErrorMessage($resultObject);
        } else {
            $postbackData = Utils::formatJsonErrorMessage($resultObject);
        }
        return $postbackData;
    }

    /**
     * Get dynamic page content
     * @return mixed
     */
    public function getDynamicPageContent() {

        $postbackData = "Undefined Content";
        $resultObject = null;
        switch ($this->getUserAction()) {
            case "getAllItems":
            case "getAllCustomers":
                $postbackData = $this->getAllCustomers();
                break;
            case "addNewItem":
            case "insertNewItem":
                $jsonData = array();
                if (isset($_POST['formValues'])) {
                    $jsonData = $_POST['formValues'][0];
                }
                //print_r($jsonData);
                $postbackData = $this->insertNewCustomer($jsonData);
                break;
            case "updateItem":
                $updateMode = "allFields";
                if (isset($_POST['updateMode'])) {
                    $updateMode = $_POST['updateMode'];
                }
                $customerId = $_POST['customerId'];
                $jsonData = $_POST['formValues'][0];
                $postbackData = $this->updateCustomer($customerId, $updateMode, $jsonData);
                break;
            case "deleteItem":
                $jsonData = array();
                if (isset($_POST['selectedIds'])) {
                    $jsonData = $_POST['selectedIds'];
                }
                $postbackData = $this->deleteCustomers($jsonData);
                break;
            case "deleteAllItems":
                $postbackData = $this->deleteAllCustomers();
                break;
            case "editDetails":
                $postbackData = "Undefined Content";
                if (isset($_POST['customerId'])) {
                    $customerId = $_POST['customerId'];
                    $resultObject = $this->customer->getCustomerDetails($customerId);
                }
                if (is_string($resultObject)) {
                    $postbackData = Utils::formatJsonErrorMessage($resultObject);
                } else if (is_array($resultObject)) {
                    $postbackData = Utils::convertArrayToJson($resultObject[0]);
                }
                break;
            case "viewDetails":
            case "cancelChanges":
                if (isset($_POST['customerId'])) {
                    $customerId = $_POST['customerId'];
                    $resultObject = $this->customer->getCustomerDetails($customerId);
                }
                if (is_string($resultObject)) {
                    $postbackData = Utils::formatJsonErrorMessage($resultObject);
                } else if (is_array($resultObject)) {
                    $postbackData = Utils::convertArrayToJson($resultObject[0]);
                }
                break;
        }
        return $postbackData;
    }

}
            

        //    $name, $lastName, $email, $phoneNumber, $zipCode, $city, $street

function testAddNewItem() {

    $jsonRaw = '{"userAction":"addNewItem", "formValues":'
            . '[{"name":"Oliver Kan"'
            . ',"lastName":"userA@xevit.de"'
            . ',"email":"userB@xevit.de"'
            . ',"phoneNumber":"123232323"'
            . ',"zipCode":"200"'
            . ',"city":"Berlin"'
            . ',"street":"SENT"'
            . ' }]
              }';
   
    if (is_string($jsonRaw)) {
        $_POST = Utils::jsonDecode($jsonRaw, true);
    } else {
        $_POST = $jsonRaw;
    }
}

function testGetAllItems() {

    $jsonRaw = '{"userAction":"getAllItems"}';
    $jsonRaw = '{"userAction":"getAllCustomers"}';
    
    if (is_string($jsonRaw)) {
        $_POST = json_decode($jsonRaw, true);
    } else {
        $_POST = $jsonRaw;
    }
}

function testGetAllUserTransactions() {

    $jsonRaw = '{"userAction":"getAllUserTransactions" ,"email":"userA@xevit.de"}';
    if (is_string($jsonRaw)) {
        $_POST = json_decode($jsonRaw, true);
    } else {
        $_POST = $jsonRaw;
    }
}


//testAddNewItem();
//testGetAllItems();
//testSendMoney();




if ($_SERVER['CONTENT_TYPE'] === "application/json; charset=UTF-8" || $_SERVER['CONTENT_TYPE'] === "application/json") {
    $jsonRaw = file_get_contents('php://input');

    if (is_string($jsonRaw)) {
        $_POST = Utils::jsonDecode($jsonRaw, true);
    } else {
        $_POST = $jsonRaw;
    }
}


//print_r($_POST);

$userAction = null;
if (isset($_POST) && isset($_POST['userAction'])) {
    $userAction = $_POST['userAction'];
}
else if (isset($_GET) && isset($_GET['userAction'])) {
    $userAction = $_GET['userAction'];
}
if (!isset($userAction)) {
    echo "No action has been set";
} else {
    Utils::logRequestToFile($userAction);
    $customerController = new CustomerController($userAction);
    $customerController->setUserAction($userAction);
    $postbackContent = $customerController->getDynamicPageContent();

    // send back content to client
    echo $postbackContent;
}
            
