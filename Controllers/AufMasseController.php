
<?php

/**
 * This module was auto generated by GWatcho-Code generator
 * The AufMasse controller entity class.
 * @author
 *    Guy Bami Watcho
 */
include_once 'BaseController.php';

class AufMasseController extends BaseController {

    private $aufMasse = null;

    /**
     * Constructor of the AufMasse controller 

     * @param $userAction string the user action
     * @param $userRoles array the user roles 
     */
    function __construct($userAction, $userRoles = array()) {
        parent::__construct($userAction, $userRoles);
        $this->aufMasse = new AufMasse();
    }

    /**
     * Gets all AufMasse entities
     * @return mixed object having all AufMasse entities
     *    or string with the Exception details if error occured
     */
    public function getAllAufMasses() {

        $itemSperator = ",";
        $entitiesList = "";
        $resultObject = $this->aufMasse->selectAllAufMasses();
        if (is_string($resultObject)) {
            return Utils::formatJsonErrorMessage($resultObject);
        } else if (is_array($resultObject)) {
            for ($i = 0; $i < count($resultObject); $i++) {
                $entitiesList .=
                        '{"aufmasseId":"' . $resultObject[$i]["aufmasseId"] . '"'
                        . ',"rapportId":"' . $resultObject[$i]["rapportId"] . '"'
                        . ',"masse":"' . $resultObject[$i]["masse"] . '"'
                        . ',"aufsprache":"' . $resultObject[$i]["aufsprache"] . '"'
                        . ',"freierText":"' . $resultObject[$i]["freierText"] . '"'
                        . ',"bemerkung":"' . $resultObject[$i]["bemerkung"] . '"'
                        . ',"datum":"' . $resultObject[$i]["datum"] . '"'
                        . '}';

                if ($i != count($resultObject) - 1) {
                    $entitiesList .= $itemSperator;
                }
            }
            // close json list
            $entitiesList = "[" . $entitiesList . "]";
        }
        return $entitiesList;
    }

    /**
     * Inserts new AufMasse entity
     * @param mixed $jsonData json object entity to insert
     * @return mixed  true if insertion was successful
     *    or string with the Exception details if error occured
     */
    public function insertNewAufMasse($jsonData) {

        // get json posted values from request
        //$formJsonValues = json_decode($jsonData, true);
        $formJsonValues = $jsonData;
        $postbackData = "";
        $resultObject = null;
        // insert entity using model object
        $resultObject = $this->aufMasse->insertNewAufMasse(
                $formJsonValues['rapportId']
                , $formJsonValues['masse']
                , $formJsonValues['aufsprache']
                , $formJsonValues['freierText']
                , $formJsonValues['bemerkung']
                , $formJsonValues['datum']
        );

        if (is_bool($resultObject) || is_int($resultObject)) {
            $postbackData = Utils::formatJsonMessage("insertedItemKey", $resultObject);
        } else if (is_string($resultObject)) {
            //error occured
            $postbackData = Utils::formatJsonErrorMessage($resultObject);
        } else {
            //error occured
            $postbackData = Utils::formatJsonErrorMessage($resultObject);
        }
        return $postbackData;
    }

    /**
     * Updates AufMasse entity via POST request
     * @param int $customerId
     * @param string $updateMode
     * @param mixed $jsonData
     * @return mixed  true if update was successful
     *    or string with the Exception details if error occured
     */
    public function updateAufMasse($aufmasseId, $updateMode, $jsonData) {

        // get json posted values from request
        //$formJsonValues = json_decode($jsonData, true);
        $formJsonValues = $jsonData;
        $postbackData = "";
        $resultObject = null;
        if ($updateMode == "allFields") {
            // update all entity fields
            $resultObject = $this->aufMasse->updateAufMasseDetails(
                    $aufmasseId
                    , $formJsonValues['rapportId']
                    , $formJsonValues['masse']
                    , $formJsonValues['aufsprache']
                    , $formJsonValues['freierText']
                    , $formJsonValues['bemerkung']
                    , $formJsonValues['datum']
            );
            if (is_bool($resultObject)) {
                if ($resultObject == true) {
                    $postbackData = Utils::formatJsonResultMessage(Common::$UPDATE_SUCCESSFUL);
                } else {
                    $postbackData = Utils::formatJsonResultMessage(Common::$UPDATE_FAILED);
                }
            } else if (is_string($resultObject)) {
                //error occured
                $postbackData = Utils::formatJsonErrorMessage($resultObject);
            }
        } else if ($updateMode == "inlineUpdate") {
            // Update entity from the datagrid
            $fieldName = $formJsonValues['fieldName'];
            $keyFieldValue = $formJsonValues['entityKeyId'];
            $newFieldValue = $formJsonValues['newFieldValue'];
            $resultObject = $this->aufMasse->updateAufMasseEntityField($fieldName, $keyFieldValue, $newFieldValue);
            if (is_string($resultObject)) {
                //error occured
                $postbackData = Utils::formatJsonErrorMessage($resultObject);
            } else if (is_bool($resultObject)) {
                $postbackData = Utils::formatJsonResultMessage(Common::$UPDATE_INLINE_SUCCESSFUL);
            }
        }
        return $postbackData;
    }

    /**
     * Deletes all selected entities via POST request
     * @param mixed $jsonData all entities Id to delete
     * @return mixed
     */
    public function deleteAufMasses($jsonData) {

        // delete entity using model
        $resultObject = $this->aufMasse->deleteSelectedAufMasses($jsonData);
        if (is_bool($resultObject)) {
            if ($resultObject == true) {
                $postbackData = Utils::formatJsonResultMessage(Common::$DELETE_SUCCESSFUL);
            } else {
                $postbackData = Utils::formatJsonResultMessage(Common::$DELETE_FAILED);
            }
        } else if (is_string($resultObject)) {
            //error occured
            $postbackData = Utils::formatJsonErrorMessage($resultObject);
        } else {
            $postbackData = Utils::formatJsonErrorMessage($resultObject);
        }
        return $postbackData;
    }

    /**
     * Deletes all entities
     * @param mixed $jsonData all entities Id to delete
     * @return mixed
     */
    public function deleteAllAufMasses() {

        // delete entities using corresponding model
        $resultObject = $this->aufMasse->deleteAllAufMasses();
        if (is_bool($resultObject)) {
            if ($resultObject == true) {
                $postbackData = Utils::formatJsonResultMessage(Common::$DELETE_SUCCESSFUL);
            } else {
                $postbackData = Utils::formatJsonResultMessage(Common::$DELETE_FAILED);
            }
        } else if (is_string($resultObject)) {
            //error occured
            $postbackData = Utils::formatJsonErrorMessage($resultObject);
        } else {
            $postbackData = Utils::formatJsonErrorMessage($resultObject);
        }
        return $postbackData;
    }

    
    
    function checkData($formJsonValues) {
        // check data
        echo 'formJsonValues: ';
        print_r($formJsonValues);
        echo '<br /><br />';

        echo 'skizzeFilesList: ';
        print_r($_POST['skizzeFilesList']);
        echo '<br /><br />';

        echo 'bilderFilesList: ';
        print_r($_POST['bilderFilesList']);
        echo '<br /><br />';

        echo 'arbeitszeitList: ';
        print_r($_POST['arbeitszeitList']);
        echo '<br /><br />';
    }



    function addNewItemWithRelatedEntities($jsonData) {

        $formJsonValues = $jsonData;

        // step1: insert Aufmasse
        $resultObject = null;
        $aufmasseId = "";
        $aufMasseSkizze = new AufMasseSkizze();
        $aufMasseBild = new AufMasseBild();
        $arbeitszeit = new Arbeitszeit();
        $postbackData = "-";
        $daoSelect = new DaoSelect();


        // insert entity using model object
        $resultObject = $this->aufMasse->insertNewAufMasse($formJsonValues['rapportId'], $formJsonValues['masse'],
                $formJsonValues['aufsprache'], $formJsonValues['freierText'], 
                $formJsonValues['bemerkung'], $formJsonValues['datum']);

        if (is_int($resultObject)) {
            $aufmasseId = $resultObject;
            $postbackData = Utils::formatJsonMessage("insertedItemKey", $resultObject);
            // step 2: insert skizze

            $arraySkizze = array();
            //step 2.1: get all Streches for this Aufmasse
            
            $arraySkizze = $daoSelect->selectAllSkizzeByAufMasse($aufmasseId);
            //step 2.2: delete
            $aufMasseSkizze->deleteSelectedAufMasseSkizzes($arraySkizze);
            // step 2.3 insert new array
            $countSkizze = 0;
            $newArraySkizzeToInsert = $_POST['skizzeFilesList'];
            foreach (array_values($newArraySkizzeToInsert) as $fileName) {
                // insert entity using model object
                $resultObject = $aufMasseSkizze->insertNewAufMasseSkizze(
                        $aufmasseId
                        , $fileName
                );
                if (is_bool($resultObject) || is_int($resultObject)) {
                    $countSkizze++;
                }
            }


            // step 3: insert Bilder
            $arrayBilder = array();
            //step 3.1: get all image for this Aufmasse
            $arrayBilder = $daoSelect->selectAllBilderByAufMasse($aufmasseId);
            //step 3.2: delete
            $aufMasseBild->deleteSelectedAufMasseBilds($arrayBilder);
            // step 3.3 insert new array
            $countBilder = 0;
            $newArrayBilderToInsert = $_POST['bilderFilesList'];
            foreach (array_values($newArrayBilderToInsert) as $fileName) {
                // insert entity using model object
                $resultObject = $aufMasseBild->insertNewAufMasseBild(
                        $aufmasseId
                        , $fileName
                );
                if (is_bool($resultObject) || is_int($resultObject)) {
                    $countBilder++;
                }
            }


            // step 4: insert Arbeitszeit
            $arrayZeiten = array();
            //step 4.1: get all entries for this Aufmasse
            $arrayZeiten = $daoSelect->selectAllArbeitszeitByAufMasse($formJsonValues['rapportId']);
            $arrayArbeitszeitId = array();
            foreach (array_values($arrayZeiten) as $arrayItem) {
                array_push($arrayArbeitszeitId, $arrayItem['arbeitszeitId']);
            }
            //step 4.2: delete
            $arbeitszeit->deleteSelectedArbeitszeits($arrayArbeitszeitId);
            // step 4.3 insert new array

            $newArrayArbeitszeit = $_POST['arbeitszeitList'];
            foreach (array_values($newArrayArbeitszeit) as $arrayItem) {
                // insert entity using model object
                $resultObject = $arbeitszeit->insertNewArbeitszeit(
                        $arrayItem['rapportId']
                        , "Aufmasse"
                        , $arrayItem['mitarbeiterName']
                        , $arrayItem['gruppe']
                        , $arrayItem['zeit']
                        , $arrayItem['datum']
                );
            }
        }

        return $postbackData;
    }


    function updateItemWithRelatedEntities($jsonData) {

        $formJsonValues = $jsonData;
        
        $resultObject = null;
        $aufMasseSkizze = new AufMasseSkizze();
        $aufMasseBild = new AufMasseBild();
        $arbeitszeit = new Arbeitszeit();
        $postbackData = "-";
        $aufmasseId = '0';
        $daoSelect = new DaoSelect();
        
        if(isset($formJsonValues['rapportId']))
            $rapportId = $formJsonValues['rapportId'];
        
        // step 1: get AufmasseId from rapport
        $resultObject = $daoSelect->selectRapportAufmasseDatails($rapportId);
        if(is_array($resultObject)){
             
            $aufmasseId = $resultObject[0]['aufmasseId'];
        }

        // update  entity using model object
        $resultObject = $this->aufMasse->updateAufMasse($aufmasseId, $formJsonValues['rapportId'], $formJsonValues['masse'],  $formJsonValues['aufsprache'], 
                $formJsonValues['freierText'], $formJsonValues['bemerkung'], $formJsonValues['datum']);

        if (is_bool($resultObject)) {
            if ($resultObject == true) {
                $postbackData = Utils::formatJsonResultMessage(Common::$UPDATE_SUCCESSFUL);
            }
            
            // step 2: update skizze
            $arraySkizze = array();
            //step 2.1: get all Streches for this Aufmasse

            $arraySkizze = $daoSelect->selectAllSkizzeByAufMasse($aufmasseId);
            //step 2.2: delete old skizze
            $arraySkizzeId = array();
            foreach (array_values($arraySkizze) as $arrayItem) {
                array_push($arraySkizzeId, $arrayItem['skizzeId']);
            }
            $aufMasseSkizze->deleteSelectedAufMasseSkizzes($arraySkizzeId);
            
            // step 2.3 insert new array
            $countSkizze = 0;
            $newArraySkizzeToInsert = $_POST['skizzeFilesList'];
            foreach (array_values($newArraySkizzeToInsert) as $fileName) {
                // insert entity using model object
                $resultObject = $aufMasseSkizze->insertNewAufMasseSkizze(
                        $aufmasseId
                        , $fileName
                );
                if (is_bool($resultObject) || is_int($resultObject)) {
                    $countSkizze++;
                }
            }


            // step 3: insert Bilder
            $arrayBilder = array();
            //step 3.1: get all image for this Aufmasse
            $arrayBilder = $daoSelect->selectAllBilderByAufMasse($aufmasseId);
            //step 3.2: delete Bilder
            $arrayBilderId = array();
            foreach (array_values($arrayBilder) as $arrayItem) {
                array_push($arrayBilderId, $arrayItem['bildId']);
            }
            $aufMasseBild->deleteSelectedAufMasseBilds($arrayBilderId);
            // step 3.3 insert new array
            $countBilder = 0;
            $newArrayBilderToInsert = $_POST['bilderFilesList'];
            foreach (array_values($newArrayBilderToInsert) as $fileName) {
                // insert entity using model object
                $resultObject = $aufMasseBild->insertNewAufMasseBild(
                        $aufmasseId
                        , $fileName
                );
                if (is_bool($resultObject) || is_int($resultObject)) {
                    $countBilder++;
                }
            }


            // step 4: insert Arbeitszeit
            $arrayZeiten = array();
            //step 4.1: get all entries for this Aufmasse
            $arrayZeiten = $daoSelect->selectAllArbeitszeitByAufMasse($formJsonValues['rapportId']);
            $arrayArbeitszeitId = array();
            foreach (array_values($arrayZeiten) as $arrayItem) {
                array_push($arrayArbeitszeitId, $arrayItem['arbeitszeitId']);
            }
            //step 4.2: delete
            $arbeitszeit->deleteSelectedArbeitszeits($arrayArbeitszeitId);
            // step 4.3 insert new array

            $newArrayArbeitszeit = $_POST['arbeitszeitList'];
            foreach (array_values($newArrayArbeitszeit) as $arrayItem) {
                // insert entity using model object
                $resultObject = $arbeitszeit->insertNewArbeitszeit(
                        $arrayItem['rapportId']
                        , "Aufmasse"
                        , $arrayItem['mitarbeiterName']
                        , $arrayItem['gruppe']
                        , $arrayItem['zeit']
                        , $arrayItem['datum']
                );
            }
        }

        return $postbackData;
    }

    
    function getDatailsItemWithRelatedEntities($rapportId) {

        $resultObject = null;
        $aufMasseSkizze = new AufMasseSkizze();
        $aufMasseBild = new AufMasseBild();
        $arbeitszeit = new Arbeitszeit();
        $postbackData = "-";
        $aufmasseId = '0';
        $daoSelect = new DaoSelect();
        $resultJson = "";

        
        // step 0: get AufmasseId from rapport
        $resultObject = $daoSelect->selectRapportAufmasseDatails($rapportId);
        if(is_array($resultObject)){
            $aufmasseId = $resultObject[0]['aufmasseId'];
        }
            
            
        // step1: get Aufmasse details
        if (isset($aufmasseId)) {
            $resultObject = $this->aufMasse->getAufMasseDetails($aufmasseId);
        }
        
        if (is_array($resultObject)) {
            // formvalues
            $postbackData = Utils::removeNumericalKeys($resultObject[0]);
            // add key
            $resultJson->formValues =  $postbackData;
            // step 2:
            $arraySkizze = $daoSelect->selectAllSkizzeByAufMasse($aufmasseId);
            $arraySkizzeFileNames = array();
            foreach (array_values($arraySkizze) as $arrayItem) {
                array_push($arraySkizzeFileNames, $arrayItem['dateiName']);
            }
            if (is_array($arraySkizzeFileNames)) 
                $resultJson->skizzeFilesList = $arraySkizzeFileNames;
            // step 3: images
            $arrayBilder = $daoSelect->selectAllBilderByAufMasse($aufmasseId);
            $arrayBilderFileNames = array();
            foreach (array_values($arrayBilder) as $arrayItem) {
                array_push($arrayBilderFileNames, $arrayItem['dateiName']);
            }
            if (is_array($arrayBilderFileNames)) 
                $resultJson->bilderFilesList = $arrayBilderFileNames;
            
            // step 4: arbeitszeiten
            $arrayZeiten = array();
            
            //step 4.1: get all entries for this Aufmasse
            $arrayZeiten = $daoSelect->selectAllArbeitszeitByAufMasse($rapportId);
            $arrayZeitenCleaned = array();
            foreach (array_values($arrayZeiten) as $arrayItem) {
                 $arrayBuf = Utils::removeNumericalKeys($arrayItem);
                 array_push($arrayZeitenCleaned, $arrayBuf);
                 
            }
             
            $resultJson->arbeitszeitList = $arrayZeitenCleaned;
        }
        else if (is_string($resultObject)) {
            $postbackData = Utils::formatJsonErrorMessage($resultObject);
        }
        
        
        $postbackData = "[" . json_encode($resultJson) . "]";
        //echo $postbackData;
        return $postbackData;
    }
    
    
    function getRapportAufmasseDatails($rapportId) {

        $resultObject = null;
        // echo '$rapportId: ' . $rapportId; 
        $daoSelect = new DaoSelect();
        $resultObject = $daoSelect->selectRapportAufmasseDatails($rapportId);
        //print_r($postbackData);
        return $resultObject;    
    }

    
    /**
     * Get dynamic page content
     * @return mixed
     */
    public function getDynamicPageContent() {

        $postbackData = "Undefined Content";
        $resultObject = null;
        switch ($this->getUserAction()) {
            case "getAllItems":
                $postbackData = $this->getAllAufMasses();
                break;
            case "addNewItem":
            case "insertNewItem":
                $jsonData = array();
                if (isset($_POST['formValues'])) {
                    $jsonData = $_POST['formValues'][0];
                }
                $postbackData = $this->insertNewAufMasse($jsonData);
                break;
            case "updateItem":
                $updateMode = "allFields";
                if (isset($_POST['updateMode'])) {
                    $updateMode = $_POST['updateMode'];
                }
                $aufmasseId = $_POST['aufmasseId'];
                $jsonData = $_POST['formValues'][0];
                $postbackData = $this->updateAufMasse($aufmasseId, $updateMode, $jsonData);
                break;
            case "deleteItem":
                $jsonData = array();
                if (isset($_POST['selectedIds'])) {
                    $jsonData = $_POST['selectedIds'];
                }
                $postbackData = $this->deleteAufMasses($jsonData);
                break;
            case "deleteAllItems":
                $postbackData = $this->deleteAllAufMasses();
                break;
            case "editDetails":
                $postbackData = "Undefined Content";
                if (isset($_POST['aufmasseId'])) {
                    $aufmasseId = $_POST['aufmasseId'];
                    $resultObject = $this->aufMasse->getAufMasseDetails($aufmasseId);
                }
                if (is_string($resultObject)) {
                    $postbackData = Utils::formatJsonErrorMessage($resultObject);
                } else if (is_array($resultObject)) {
                    $postbackData = Utils::convertArrayToJson($resultObject[0]);
                }
                break;
            case "viewDetails":
            case "cancelChanges":
                if (isset($_POST['aufmasseId'])) {
                    $aufmasseId = $_POST['aufmasseId'];
                    $resultObject = $this->aufMasse->getAufMasseDetails($aufmasseId);
                }
                if (is_string($resultObject)) {
                    $postbackData = Utils::formatJsonErrorMessage($resultObject);
                } else if (is_array($resultObject)) {
                    $postbackData = Utils::convertArrayToJson($resultObject[0]);
                }
                break;
            case "getRapportAufmasseDatails":
                if (isset($_POST['rapportId'])) {
                    $rapportId = $_POST['rapportId'];
                    $resultObject = $this->getRapportAufmasseDatails($rapportId);
                }
                if (is_string($resultObject)) {
                    $postbackData = Utils::formatJsonErrorMessage($resultObject);
                } else if (is_array($resultObject)) {
                    $postbackData = Utils::convertArrayToJson($resultObject[0]);
                }
                break;
            case "addNewItemWithRelatedEntities":
                $postbackData = "Undefined Content";
                $jsonData = array();
                if (isset($_POST['formValues'])) {
                    $jsonData = $_POST['formValues'][0];
                }
                $postbackData = $this->addNewItemWithRelatedEntities($jsonData);
                break;
            case "updateItemWithRelatedEntities":
                $postbackData = "Undefined Content";
                $jsonData = array();

                if (isset($_POST['formValues'])) {
                    $jsonData = $_POST['formValues'][0];
                }
                $postbackData = $this->updateItemWithRelatedEntities($jsonData);
                break;
            case "getDatailsItemWithRelatedEntities":
                $postbackData = "Undefined Content";
                $jsonData = array();

                if (isset($_POST['rapportId'])) {
                    $rapportId = $_POST['rapportId'];
                }
                $postbackData = $this->getDatailsItemWithRelatedEntities($rapportId);
                break; 
                
                
        }
        return $postbackData;
    }

}

function testAddNewItem($rapportId) {

    $jsonRaw = '{"userAction":"addNewItem", "formValues":'
            . '[{"rapportId":"'.$rapportId.'"'
            . ',"aufsprache":"aufsprache - content"'
            . ',"freierText":"freier t"'
            . ',"bemerkung":"ff -bemerkung"'
            . ',"datum":"2020-02-16 12:13:00"'
            . ' }]
              }';

    if (is_string($jsonRaw)) {
        $_POST = Utils::jsonDecode($jsonRaw, true);
    } else {
        $_POST = $jsonRaw;
    }
}

function testGetAllItems() {

    $jsonRaw = '{"userAction":"getAllItems"}';

    if (is_string($jsonRaw)) {
        $_POST = json_decode($jsonRaw, true);
    } else {
        $_POST = $jsonRaw;
    }
}

function testUpdateItem() {

    $jsonRaw = '{"userAction":"updateItem", "aufmasseId":"1", "formValues":'
            . '[{"rapportId":"1"'
            . ',"aufsprache":"new-aufsprache - content"'
            . ',"freierText":"new-freier t"'
            . ',"bemerkung":"new-ff -bemerkung"'
            . ',"datum":"2020-02-16 05:13:00"'
            . ' }]
              }';

    if (is_string($jsonRaw)) {
        $_POST = Utils::jsonDecode($jsonRaw, true);
    } else {
        $_POST = $jsonRaw;
    }
}


function testGetDatailsItem() {

    $jsonRaw = '{"userAction":"viewDetails", "aufmasseId":"20"}';

    if (is_string($jsonRaw)) {
        $_POST = Utils::jsonDecode($jsonRaw, true);
    } else {
        $_POST = $jsonRaw;
    }
}


function testAddNewItemWithRelatedEntities($rapportId) {

    $jsonRaw = '{"userAction":"addNewItemWithRelatedEntities"'
            . ',"formValues":[{"rapportId":"'.$rapportId.'", "masse":"12x455", "aufsprache":"aufsprache - test", "freierText":"freier-user", "bemerkung":"test-bemerkung", "datum":"2020-02-16 12:13:00"}]'
            . ',"skizzeFilesList":["skizz1.jpg", "skizz2.jpg"]'
            . ',"bilderFilesList":["bild1.jpg", "bild2.jpg", "bild3.jpg"]'
            . ',"arbeitszeitList":'
            . '[{"rapportId":"'.$rapportId.'" ,"bereich":"Aufmasse", "mitarbeiterName":"Bami 1", "gruppe":"AB-Gruppe-123", "zeit":"2", "datum":"2020-03-16 12:13:00"},'
            . ' {"rapportId":"'.$rapportId.'" ,"bereich":"Aufmasse", "mitarbeiterName":"Sokoi 2", "gruppe":"AB-Gruppe-433", "zeit":"3", "datum":"2020-03-16 12:23:00"}]'
            . '}';

    if (is_string($jsonRaw)) {
        $_POST = Utils::jsonDecode($jsonRaw, true);
    } else {
        $_POST = $jsonRaw;
    }
}


function testUpdateItemWithRelatedEntities($rapportId) {

    $jsonRaw = '{"userAction":"updateItemWithRelatedEntities" '
            . ',"formValues":[{"rapportId":"'.$rapportId.'", "masse":"12x455-new", "aufsprache":"aufsprache -test-new", "freierText":"freier-user-new", "bemerkung":"test-bemerkung-new", "datum":"2020-02-16 12:13:00"}]'
            . ',"skizzeFilesList":["skizz1-new.jpg", "skizz2-new.jpg"]'
            . ',"bilderFilesList":["bild1-new.jpg", "bild2.jpg", "bild3-new.jpg", "bild4-new.jpg"]'
            . ',"arbeitszeitList":'
            . '[{"rapportId":"'.$rapportId.'" ,"bereich":"Aufmasse", "mitarbeiterName":"Bami 1-new", "gruppe":"AB-Gruppe-123", "zeit":"2", "datum":"2020-03-20 12:13:00"},'
            . ' {"rapportId":"'.$rapportId.'" ,"bereich":"Aufmasse", "mitarbeiterName":"Sokoi 2-new", "gruppe":"AB-Gruppe-433", "zeit":"1", "datum":"2020-03-20 12:23:00"}]'
            . '}';

    if (is_string($jsonRaw)) {
        $_POST = Utils::jsonDecode($jsonRaw, true);
    } else {
        $_POST = $jsonRaw;
    }
}


function testGetDatailsItemWithRelatedEntities($rapportId) {

    $jsonRaw = '{"userAction":"getDatailsItemWithRelatedEntities", "rapportId":"'.$rapportId.'"}';

    if (is_string($jsonRaw)) {
        $_POST = Utils::jsonDecode($jsonRaw, true);
    } else {
        $_POST = $jsonRaw;
    }
}

function testGetRapportAufmasseDatails($rapportId) {

    $jsonRaw = '{"userAction":"getRapportAufmasseDatails", "rapportId":"'.$rapportId.'"}';
     
    if (is_string($jsonRaw)) {
        $_POST = Utils::jsonDecode($jsonRaw, true);
    } else {
        $_POST = $jsonRaw;
    }
}


$rapportId = "1";
//testAddNewItem($rapportId);
//testUpdateItem();
//testGetAllItems();
//testGetDatailsItem();
//testAddNewItemWithRelatedEntities($rapportId);
//testUpdateItemWithRelatedEntities($rapportId);
//testGetDatailsItemWithRelatedEntities($rapportId);
//testGetRapportAufmasseDatails($rapportId);

            

if ($_SERVER['CONTENT_TYPE'] === "application/json; charset=UTF-8" || $_SERVER['CONTENT_TYPE'] === "application/json") {
    $jsonRaw = file_get_contents("php://input");

    if (is_string($jsonRaw)) {
        $_POST = Utils::jsonDecode($jsonRaw, true);
    } else {
        $_POST = $jsonRaw;
    }
}

$userAction = null;
if (isset($_POST) && isset($_POST['userAction'])) {
    $userAction = $_POST['userAction'];
} else if (isset($_GET) && isset($_GET['userAction'])) {
    $userAction = $_GET['userAction'];
}
if (!isset($userAction)) {
    echo "No action has been set";
} else {
    Utils::logRequestToFile($userAction);
    $aufMasseController = new AufMasseController($userAction);
    $aufMasseController->setUserAction($userAction);
    $postbackContent = $aufMasseController->getDynamicPageContent();

    // send back content to client
    echo $postbackContent;
}
            

