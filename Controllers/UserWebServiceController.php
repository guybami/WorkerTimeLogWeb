
<?php

/**
 * This module was auto generated by GWatcho-Code generator
 * The User controller entity class.
 * @author
 *    Guy Bami Watcho
 */
include_once 'BaseController.php';

class UserController extends BaseController {

    private $user = null;

    /**
     * Constructor of the User controller 

     * @param $userAction string the user action
     * @param $userRoles array the user roles 
     */
    function __construct($userAction, $userRoles = array()) {
        parent::__construct($userAction, $userRoles);
        $this->user = new User();
    }

    /**
     * Gets all User entities
     * @return mixed object having all User entities
     *    or string with the Exception details if error occured
     */
    public function getAllUsers() {

        $itemSperator = ",";
        $entitiesList = "";
        $resultObject = $this->user->selectAllUsers();
        if (is_string($resultObject)) {
            return Utils::formatJsonErrorMessage($resultObject);
        } else if (is_array($resultObject)) {
            for ($i = 0; $i < count($resultObject); $i++) {
                $entitiesList .=
                        '{"userId":"' . $resultObject[$i]["userId"] . '"'
                        . ',"loginName":"' . $resultObject[$i]["loginName"] . '"'
                        . ',"hashPassword":"' . $resultObject[$i]["hashPassword"] . '"'
                        . ',"name":"' . $resultObject[$i]["name"] . '"'
                        . ',"lastName":"' . $resultObject[$i]["lastName"] . '"'
                        . ',"phoneNumber":"' . $resultObject[$i]["phoneNumber"] . '"'
                        . ',"email":"' . $resultObject[$i]["email"] . '"'
                        . ',"role":"' . $resultObject[$i]["role"] . '"'
                        . '}';

                if ($i != count($resultObject) - 1) {
                    $entitiesList .= $itemSperator;
                }
            }
            // close json list
            $entitiesList = "[" . $entitiesList . "]";
        }
        return $entitiesList;
    }

    /**
     * Inserts new User entity
     * @param mixed $jsonData json object entity to insert
     * @return mixed  true if insertion was successful
     *    or string with the Exception details if error occured
     */
    public function insertNewUser($jsonData) {
        
       

        // get json posted values from request
        $formJsonValues = $jsonData;
        $postbackData = "";
        $resultObject = null;
        // insert entity using model object
        $resultObject = $this->user->insertNewUser(
                $formJsonValues['loginName']
                , $formJsonValues['hashPassword']
                , $formJsonValues['name']
                , $formJsonValues['lastName']
                , $formJsonValues['phoneNumber']
                , $formJsonValues['email']
                , $formJsonValues['role']
        );

        if (is_bool($resultObject) || is_int($resultObject)) {
            $postbackData = Utils::formatJsonMessage("insertedItemKey", $resultObject);
        } else if (is_string($resultObject)) {
            //error occured
            $postbackData = Utils::formatJsonErrorMessage($resultObject);
        } else {
            //error occured
            $postbackData = Utils::formatJsonErrorMessage($resultObject);
        }
        return $postbackData;
    }

    /**
     * Updates User entity via POST request
     * @param int $customerId
     * @param string $updateMode
     * @param mixed $jsonData
     * @return mixed  true if update was successful
     *    or string with the Exception details if error occured
     */
    public function updateUser($userId, $updateMode, $jsonData) {

        // get json posted values from request
        $formJsonValues = json_decode($jsonData, true);
        $postbackData = "";
        $resultObject = null;
        if ($updateMode == "allFields") {
            // update all entity fields
            $resultObject = $this->user->updateUserDetails(
                    $userId
                    , $formJsonValues['loginName']
                    , $formJsonValues['hashPassword']
                    , $formJsonValues['name']
                    , $formJsonValues['lastName']
                    , $formJsonValues['phoneNumber']
                    , $formJsonValues['email']
                    , $formJsonValues['role']
            );
            if (is_bool($resultObject)) {
                if ($resultObject == true) {
                    $postbackData = Utils::formatJsonResultMessage(Common::$UPDATE_SUCCESSFUL);
                } else {
                    $postbackData = Utils::formatJsonResultMessage(Common::$UPDATE_FAILED);
                }
            } else if (is_string($resultObject)) {
                //error occured
                $postbackData = Utils::formatJsonErrorMessage($resultObject);
            }
        } else if ($updateMode == "inlineUpdate") {
            // Update entity from the datagrid
            $fieldName = $formJsonValues['fieldName'];
            $keyFieldValue = $formJsonValues['entityKeyId'];
            $newFieldValue = $formJsonValues['newFieldValue'];
            $resultObject = $this->user->updateUserEntityField($fieldName, $keyFieldValue, $newFieldValue);
            if (is_string($resultObject)) {
                //error occured
                $postbackData = Utils::formatJsonErrorMessage($resultObject);
            } else if (is_bool($resultObject)) {
                $postbackData = Utils::formatJsonResultMessage(Common::$UPDATE_INLINE_SUCCESSFUL);
            }
        }
        return $postbackData;
    }

    /**
     * Deletes all selected entities via POST request
     * @param mixed $jsonData all entities Id to delete
     * @return mixed
     */
    public function deleteUsers($jsonData) {
        
        // delete entity using model
        $resultObject = $this->user->deleteSelectedUsers($jsonData);
        if (is_bool($resultObject) || is_int($resultObject)) {
            if ($resultObject == true) {
                $postbackData = Utils::formatJsonResultMessage("DELETE_SUCCESSFUL");
            } else {
                $postbackData = Utils::formatJsonResultMessage("DELETE_FAILED");
            }
        } else if (is_string($resultObject)) {
            //error occured
            $postbackData = Utils::formatJsonErrorMessage($resultObject);
        } else {
            $postbackData = Utils::formatJsonErrorMessage($resultObject);
        }
        
        return $postbackData; 
    }
    
    

    /**
     * Deletes all entities
     * @param mixed $jsonData all entities Id to delete
     * @return mixed
     */
    public function deleteAllUsers() {

        // delete entities using corresponding model
        $resultObject = $this->user->deleteAllUsers();
        if (is_bool($resultObject)) {
            if ($resultObject == true) {
                $postbackData = Utils::formatJsonResultMessage(Common::$DELETE_SUCCESSFUL);
            } else {
                $postbackData = Utils::formatJsonResultMessage(Common::$DELETE_FAILED);
            }
        } else if (is_string($resultObject)) {
            //error occured
            $postbackData = Utils::formatJsonErrorMessage($resultObject);
        } else {
            $postbackData = Utils::formatJsonErrorMessage($resultObject);
        }
        return $postbackData;
    }
    
    
    public function checkUserCredentials($userLoginName, $userPassword){
         
        $postbackData = Utils::formatJsonResultMessage("false");
        if (!isset($userLoginName) || !isset($userPassword)) {
            $postbackData = Utils::formatJsonResultMessage("false");
            return $postbackData;
        }

        if (strlen($userLoginName) == 0 || strlen($userPassword) == 0) {
            $postbackData = Utils::formatJsonResultMessage("false");
            return $postbackData;
        }

 
        $resultObject = $this->user->selectAllUsers();
        if (is_string($resultObject)) {
            return Utils::formatJsonErrorMessage($resultObject);
        } else if (is_array($resultObject)) {
            for ($i = 0; $i < count($resultObject); $i++) {
                if ($resultObject[$i]['loginName'] == $userLoginName && $resultObject[$i]['hashPassword'] == $userPassword) {
                    return Utils::formatJsonResultMessage("true");
                }
                 
            }
             
        }
        return $postbackData;
    }


    public function getUserCredentials($userLoginName, $userPassword){
         
          
        $itemSperator = ",";
        $entitiesList = "";
        $resultObject = $this->user->selectAllUsers();
        if (is_string($resultObject)) {
            return Utils::formatJsonErrorMessage($resultObject);
        } else if (is_array($resultObject)) {
            for ($i = 0; $i < count($resultObject); $i++) {
                if ($resultObject[$i]['loginName'] == $userLoginName && $resultObject[$i]['hashPassword'] == $userPassword) {
                    $entitiesList .=
                        '{"userId":"' . $resultObject[$i]["userId"] . '"'
                        . ',"loginName":"' . $resultObject[$i]["loginName"] . '"'
                        . ',"hashPassword":"' . $resultObject[$i]["hashPassword"] . '"'
                        . ',"name":"' . $resultObject[$i]["name"] . '"'
                        . ',"lastName":"' . $resultObject[$i]["lastName"] . '"'
                        . ',"phoneNumber":"' . $resultObject[$i]["phoneNumber"] . '"'
                        . ',"email":"' . $resultObject[$i]["email"] . '"'
                        . ',"role":"' . $resultObject[$i]["role"] . '"'
                        . '}';
                        break;
                }

                if ($i != count($resultObject) - 1) {
                    //$entitiesList .= $itemSperator;
                }
            }
            // close json list
            $entitiesList = "[" . $entitiesList . "]";
        }
        return $entitiesList;
    }




    /**
     * Get dynamic page content
     * @return mixed
     */
    public function getDynamicPageContent() {

        $postbackData = "Undefined Content";
        $resultObject = null;
        switch ($this->getUserAction()) {
            case "getAllItems":
                $postbackData = $this->getAllUsers();
                break;
             
            case "addNewItem":
            case "insertNewItem":
                $jsonData = array();
                if (isset($_POST['formValues'])) {
                    $jsonData = $_POST['formValues'][0];
                }
                $postbackData = $this->insertNewUser($jsonData);
                break;
            case "updateItem":
                $updateMode = "allFields";
                if (isset($_POST['updateMode'])) {
                    $updateMode = $_POST['updateMode'];
                }
                $userId = $_POST['userId'];
                $jsonData = $_POST['formValues'][0];
                $postbackData = $this->updateUser($userId, $updateMode, $jsonData);
                break;
            case "deleteItem":
                $jsonData = array();
                if (isset($_POST['selectedIds'])) {
                    $jsonData = $_POST['selectedIds'];
                }
                 
                $postbackData = $this->deleteUsers($jsonData[0]);
                break;
            case "deleteAllItems":
                $postbackData = $this->deleteAllUsers();
                break;
            case "editDetails":
                $postbackData = "Undefined Content";
                if (isset($_POST['userId'])) {
                    $userId = $_POST['userId'];
                    $resultObject = $this->user->getUserDetails($userId);
                }
                if (is_string($resultObject)) {
                    $postbackData = Utils::formatJsonErrorMessage($resultObject);
                } else if (is_array($resultObject)) {
                    $postbackData = Utils::convertArrayToJson($resultObject[0]);
                }
                break;
            case "viewDetails":
            case "cancelChanges":
                if (isset($_POST['userId'])) {
                    $userId = $_POST['userId'];
                    $resultObject = $this->user->getUserDetails($userId);
                }
                if (is_string($resultObject)) {
                    $postbackData = Utils::formatJsonErrorMessage($resultObject);
                } else if (is_array($resultObject)) {
                    $postbackData = Utils::convertArrayToJson($resultObject[0]);
                }
                break;
            case "checkUserCredentials":
                $postbackData = "false";
                if (isset($_POST['formValues'])) {
                    $jsonData = $_POST['formValues'][0];
                    $userLoginName = $jsonData['userName'];
                    $userHashPassword = $jsonData['userHashPassword'];
                    $postbackData = $this->checkUserCredentials($userLoginName, $userHashPassword);
                }
                break;
            case "getUserCredentials":
                $postbackData = "false";
                if (isset($_POST['formValues'])) {
                    $jsonData = $_POST['formValues'][0];
                    $userLoginName = $jsonData['userName'];
                    $userHashPassword = $jsonData['userHashPassword'];
                    $postbackData = $this->getUserCredentials($userLoginName, $userHashPassword);
                }
                break;
        }
        return $postbackData;
    }

}



function testAddNewItem() {
    
    // $customerId, $title, $creationDate, $status, $hasOrder
    $userLogin = "Demo-" . uniqid();
    $jsonRaw = '{"userAction":"addNewItem", "formValues":'
            . '[{"loginName":"'.$userLogin.'"'
            . ',"hashPassword":"1122"'
            . ',"name":"'.$userLogin.'"'
            . ',"lastName":"Guy"'
            . ',"phoneNumber":"12233"'
            . ',"email":"guybami@yahoo.fr"'
            . ',"role":"WORKER"'
            . ' }]
              }';
            

    if (is_string($jsonRaw)) {
        $_POST = Utils::jsonDecode($jsonRaw, true);
    } else {
        $_POST = $jsonRaw;
    }
}

function testGetAllItems() {

    $jsonRaw = '{"userAction":"getAllItems"}';
    if (is_string($jsonRaw)) {
        $_POST = json_decode($jsonRaw, true);
    } else {
        $_POST = $jsonRaw;
    }
}


function testDeleteItem() {
    
    $jsonRaw = '{"userAction":"deleteItem", "selectedIds":'
            . '[{"projectId":"4"'
             //. ',"projectId":"5"'
            . ' }]
              }';
            

    if (is_string($jsonRaw)) {
        $_POST = Utils::jsonDecode($jsonRaw, true);
    } else {
        $_POST = $jsonRaw;
    }
            
}

function checkUserCredentials(){
    $jsonRaw = '{"userAction":"checkUserCredentials", "formValues":'
            . '[{"userName":"administrator"'
            . ',"userHashPassword":"1234aa"'
             
            . ' }]
              }';
    if (is_string($jsonRaw)) {
        $_POST = Utils::jsonDecode($jsonRaw, true);
    } else {
        $_POST = $jsonRaw;
    }
            
}

//testAddNewItem();
//testGetAllItems();      
//checkUserCredentials();

testDeleteItem();



if ($_SERVER['CONTENT_TYPE'] === "application/json; charset=UTF-8" || $_SERVER['CONTENT_TYPE'] === "application/json") {
    $jsonRaw = file_get_contents('php://input');

    if (is_string($jsonRaw)) {
        $_POST = Utils::jsonDecode($jsonRaw, true);
    } else {
        $_POST = $jsonRaw;
    }
}


$userAction = null;
if (isset($_POST) && isset($_POST['userAction'])) {
    $userAction = $_POST['userAction'];
}
if (!isset($userAction)) {
    echo "No action has been set";
} else {
    $userController = new UserController($userAction);
    $userController->setUserAction($userAction);
    $postbackContent = $userController->getDynamicPageContent();

    // send back content to client
    echo $postbackContent;
}
            

