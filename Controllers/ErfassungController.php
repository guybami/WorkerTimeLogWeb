
<?php

/**
 * This module was auto generated by GWatcho-Code generator
 * The Erfassung controller entity class.
 * @author
 *    Guy Bami Watcho
 */
include_once 'BaseController.php';

class ErfassungController extends BaseController {

    private $erfassung = null;

    /**
     * Constructor of the Erfassung controller 

     * @param $userAction string the user action
     * @param $userRoles array the user roles 
     */
    function __construct($userAction, $userRoles = array()) {
        parent::__construct($userAction, $userRoles);
        $this->erfassung = new Erfassung();
    }

    /**
     * Gets all Erfassung entities
     * @return mixed object having all Erfassung entities
     *    or string with the Exception details if error occured
     */
    public function getAllErfassungs() {

        $itemSperator = ",";
        $entitiesList = "";
        $resultObject = $this->erfassung->selectAllErfassungs();
        if (is_string($resultObject)) {
            return Utils::formatJsonErrorMessage($resultObject);
        } else if (is_array($resultObject)) {
            for ($i = 0; $i < count($resultObject); $i++) {
                $entitiesList .=
                        '{"erfassungId":"' . $resultObject[$i]["erfassungId"] . '"'
                        . ',"rapportId":"' . $resultObject[$i]["rapportId"] . '"'
                        . ',"bericht":"' . $resultObject[$i]["bericht"] . '"'
                        . ',"material":"' . $resultObject[$i]["material"] . '"'
                        . ',"maschineAufwand":"' . $resultObject[$i]["maschineAufwand"] . '"'
                        . ',"kilometer":"' . $resultObject[$i]["kilometer"] . '"'
                        . ',"unterschriftKundeDatei":"' . $resultObject[$i]["unterschriftKundeDatei"] . '"'
                        . ',"auftragAbgeschlossen":"' . $resultObject[$i]["auftragAbgeschlossen"] . '"'
                        . ',"datum":"' . $resultObject[$i]["datum"] . '"'
                        . '}';

                if ($i != count($resultObject) - 1) {
                    $entitiesList .= $itemSperator;
                }
            }
            // close json list
            $entitiesList = "[" . $entitiesList . "]";
        }
        return $entitiesList;
    }

    /**
     * Inserts new Erfassung entity
     * @param mixed $jsonData json object entity to insert
     * @return mixed  true if insertion was successful
     *    or string with the Exception details if error occured
     */
    public function insertNewErfassung($jsonData) {

        // get json posted values from request
        //$formJsonValues = json_decode($jsonData, true);
        $formJsonValues = $jsonData;
        $postbackData = "";
        $resultObject = null;
        // insert entity using model object
        $resultObject = $this->erfassung->insertNewErfassung(
                $formJsonValues['rapportId']
                , $formJsonValues['bericht']
                , $formJsonValues['material']
                , $formJsonValues['maschineAufwand']
                , $formJsonValues['kilometer']
                , $formJsonValues['unterschriftKundeDatei']
                , $formJsonValues['auftragAbgeschlossen']
                , $formJsonValues['datum']
        );

        if (is_bool($resultObject) || is_int($resultObject)) {
            $postbackData = Utils::formatJsonMessage("insertedItemKey", $resultObject);
        } else if (is_string($resultObject)) {
            //error occured
            $postbackData = Utils::formatJsonErrorMessage($resultObject);
        } else {
            //error occured
            $postbackData = Utils::formatJsonErrorMessage($resultObject);
        }
        return $postbackData;
    }

    /**
     * Updates Erfassung entity via POST request
     * @param int $customerId
     * @param string $updateMode
     * @param mixed $jsonData
     * @return mixed  true if update was successful
     *    or string with the Exception details if error occured
     */
    public function updateErfassung($erfassungId, $updateMode, $jsonData) {

        // get json posted values from request
        //$formJsonValues = json_decode($jsonData, true);
        $formJsonValues = $jsonData;
        $postbackData = "";
        $resultObject = null;
        if ($updateMode == "allFields") {
            // update all entity fields
            $resultObject = $this->erfassung->updateErfassungDetails(
                    $erfassungId
                    , $formJsonValues['rapportId']
                    , $formJsonValues['bericht']
                    , $formJsonValues['material']
                    , $formJsonValues['maschineAufwand']
                    , $formJsonValues['kilometer']
                    , $formJsonValues['unterschriftKundeDatei']
                    , $formJsonValues['auftragAbgeschlossen']
                    , $formJsonValues['datum']
            );
            if (is_bool($resultObject)) {
                if ($resultObject == true) {
                    $postbackData = Utils::formatJsonResultMessage(Common::$UPDATE_SUCCESSFUL);
                } else {
                    $postbackData = Utils::formatJsonResultMessage(Common::$UPDATE_FAILED);
                }
            } else if (is_string($resultObject)) {
                //error occured
                $postbackData = Utils::formatJsonErrorMessage($resultObject);
            }
        } else if ($updateMode == "inlineUpdate") {
            // Update entity from the datagrid
            $fieldName = $formJsonValues['fieldName'];
            $keyFieldValue = $formJsonValues['entityKeyId'];
            $newFieldValue = $formJsonValues['newFieldValue'];
            $resultObject = $this->erfassung->updateErfassungEntityField($fieldName, $keyFieldValue, $newFieldValue);
            if (is_string($resultObject)) {
                //error occured
                $postbackData = Utils::formatJsonErrorMessage($resultObject);
            } else if (is_bool($resultObject)) {
                $postbackData = Utils::formatJsonResultMessage(Common::$UPDATE_INLINE_SUCCESSFUL);
            }
        }
        return $postbackData;
    }

    /**
     * Deletes all selected entities via POST request
     * @param mixed $jsonData all entities Id to delete
     * @return mixed
     */
    public function deleteErfassungs($jsonData) {

        // delete entity using model
        $resultObject = $this->erfassung->deleteSelectedErfassungs($jsonData);
        if (is_bool($resultObject)) {
            if ($resultObject == true) {
                $postbackData = Utils::formatJsonResultMessage(Common::$DELETE_SUCCESSFUL);
            } else {
                $postbackData = Utils::formatJsonResultMessage(Common::$DELETE_FAILED);
            }
        } else if (is_string($resultObject)) {
            //error occured
            $postbackData = Utils::formatJsonErrorMessage($resultObject);
        } else {
            $postbackData = Utils::formatJsonErrorMessage($resultObject);
        }
        return $postbackData;
    }

    /**
     * Deletes all entities
     * @param mixed $jsonData all entities Id to delete
     * @return mixed
     */
    public function deleteAllErfassungs() {

        // delete entities using corresponding model
        $resultObject = $this->erfassung->deleteAllErfassungs();
        if (is_bool($resultObject)) {
            if ($resultObject == true) {
                $postbackData = Utils::formatJsonResultMessage(Common::$DELETE_SUCCESSFUL);
            } else {
                $postbackData = Utils::formatJsonResultMessage(Common::$DELETE_FAILED);
            }
        } else if (is_string($resultObject)) {
            //error occured
            $postbackData = Utils::formatJsonErrorMessage($resultObject);
        } else {
            $postbackData = Utils::formatJsonErrorMessage($resultObject);
        }
        return $postbackData;
    }
    
    
    
    
    
    function addNewItemWithRelatedEntities($jsonData) {

        $formJsonValues = $jsonData;

        // step1: insert Erfassung
        $resultObject = null;
        $erfassungId = "";
        $erfassungBild = new ErfassungBild();
        $arbeitszeit = new Arbeitszeit();
        $postbackData = "-";
        $daoSelect = new DaoSelect();


        // insert entity using model object
        $resultObject = $this->erfassung->insertNewErfassung(
                $formJsonValues['rapportId']
                , $formJsonValues['bericht']
                , $formJsonValues['material']
                , $formJsonValues['maschineAufwand']
                , $formJsonValues['kilometer']
                , $formJsonValues['unterschriftKundeDatei']
                , $formJsonValues['auftragAbgeschlossen']
                , $formJsonValues['datum']
        );

            
        if (is_int($resultObject)) {
            $erfassungId = $resultObject;
            $postbackData = Utils::formatJsonMessage("insertedItemKey", $resultObject);
            
            // step 2: insert Bilder vor der Arbeit
            $arrayBilderVorArbeit = array();
            //step 2.1: get all images before work for this Erfassung
            $daoSelect = new DaoSelect();
            $arrayBilderVorArbeit = $daoSelect->selectAllBilderVorArbeitByErfassung($erfassungId);
            //step 2.2: delete
            $arrayBilderVorArbeitId = array();
            foreach (array_values($arrayBilderVorArbeit) as $arrayItem) {
                array_push($arrayBilderVorArbeitId, $arrayItem['bildId']);
            }
            $erfassungBild->deleteSelectedErfassungBilds($arrayBilderVorArbeitId);
            // step 2.3 insert new array
            $countSkizze = 0;
            $newArraySkizzeToInsert = $_POST['bilderVorArbeitFilesList'];
            foreach (array_values($newArraySkizzeToInsert) as $fileName) {
                // insert entity using model object
                $resultObject = $erfassungBild->insertNewErfassungBild(
                        $erfassungId
                        , 'vorArbeit'
                        , $fileName
                );
                if (is_bool($resultObject) || is_int($resultObject)) {
                    $countSkizze++;
                }
            }

 
            // step 3: insert Bilder nach der Arbeit
            $arrayBilderNachArbeit = array();
            //step 3.1: get all images before work for this Erfassung
            $daoSelect = new DaoSelect();
            $arrayBilderNachArbeit = $daoSelect->selectAllBilderNachArbeitByErfassung($erfassungId);
            //step 3.2: delete
            $arrayBilderNachArbeitId = array();
            foreach (array_values($arrayBilderNachArbeit) as $arrayItem) {
                array_push($arrayBilderNachArbeitId, $arrayItem['bildId']);
            }
            $erfassungBild->deleteSelectedErfassungBilds($arrayBilderNachArbeitId);
            // step 3.3 insert new array
            $countSkizze = 0;
            $newArraySkizzeToInsert = $_POST['bilderNachArbeitFilesList'];
            foreach (array_values($newArraySkizzeToInsert) as $fileName) {
                // insert entity using model object
                $resultObject = $erfassungBild->insertNewErfassungBild(
                        $erfassungId
                        , 'nachArbeit'
                        , $fileName
                );
                if (is_bool($resultObject) || is_int($resultObject)) {
                    $countSkizze++;
                }
            }


            // step 4: insert Arbeitszeit
            $arrayZeiten = array();
            //step 4.1: get all entries for this Erfassung
            $arrayZeiten = $daoSelect->selectAllArbeitszeitByErfassung($formJsonValues['rapportId']);
            $arrayArbeitszeitId = array();
            foreach (array_values($arrayZeiten) as $arrayItem) {
                array_push($arrayArbeitszeitId, $arrayItem['arbeitszeitId']);
            }
            //step 4.2: delete
            $arbeitszeit->deleteSelectedArbeitszeits($arrayArbeitszeitId);
            // step 4.3 insert new array

            $newArrayArbeitszeit = $_POST['arbeitszeitList'];
            foreach (array_values($newArrayArbeitszeit) as $arrayItem) {
                // insert entity using model object
                $resultObject = $arbeitszeit->insertNewArbeitszeit(
                        $arrayItem['rapportId']
                        , "Erfassung"
                        , $arrayItem['mitarbeiterName']
                        , $arrayItem['gruppe']
                        , $arrayItem['zeit']
                        , $arrayItem['datum']
                );
            }
        }

        return $postbackData;
    }

    function updateItemWithRelatedEntities($jsonData) {

        $formJsonValues = $jsonData;

        $resultObject = null;
        $erfassungBild = new ErfassungBild();
        $arbeitszeit = new Arbeitszeit();
        $postbackData = "-";
        $erfassungId = '0';
        $daoSelect = new DaoSelect();

        if (isset($formJsonValues['rapportId']))
            $rapportId = $formJsonValues['rapportId'];

        // step 1: get ErfassungId from rapport
        $resultObject = $daoSelect->selectRapportErfassungDatails($rapportId);
        if (is_array($resultObject)) {
            $erfassungId = $resultObject[0]['erfassungId'];
        }

        // update  entity using model object
        $resultObject = $this->erfassung->updateErfassungDetails(
                    $erfassungId
                    , $formJsonValues['rapportId']
                    , $formJsonValues['bericht']
                    , $formJsonValues['material']
                    , $formJsonValues['maschineAufwand']
                    , $formJsonValues['kilometer']
                    , $formJsonValues['unterschriftKundeDatei']
                    , $formJsonValues['auftragAbgeschlossen']
                    , $formJsonValues['datum']
            );

        if (is_bool($resultObject)) {
            if ($resultObject == true) {
                $postbackData = Utils::formatJsonResultMessage(Common::$UPDATE_SUCCESSFUL);
            }

            // step 2: insert Bilder vor der Arbeit
            $arrayBilderVorArbeit = array();
            //step 2.1: get all images before work for this Erfassung
            $daoSelect = new DaoSelect();
            $arrayBilderVorArbeit = $daoSelect->selectAllBilderVorArbeitByErfassung($erfassungId);
            //step 2.2: delete
            $arrayBilderVorArbeitId = array();
            foreach (array_values($arrayBilderVorArbeit) as $arrayItem) {
                array_push($arrayBilderVorArbeitId, $arrayItem['bildId']);
            }
            $erfassungBild->deleteSelectedErfassungBilds($arrayBilderVorArbeitId);
            // step 2.3 insert new array
            $countSkizze = 0;
            $newArraySkizzeToInsert = $_POST['bilderVorArbeitFilesList'];
            foreach (array_values($newArraySkizzeToInsert) as $fileName) {
                // insert entity using model object
                $resultObject = $erfassungBild->insertNewErfassungBild(
                        $erfassungId
                        , 'vorArbeit'
                        , $fileName
                );
                if (is_bool($resultObject) || is_int($resultObject)) {
                    $countSkizze++;
                }
            }

 
            // step 3: insert Bilder nach der Arbeit
            $arrayBilderNachArbeit = array();
            //step 3.1: get all images before work for this Erfassung
            $daoSelect = new DaoSelect();
            $arrayBilderNachArbeit = $daoSelect->selectAllBilderNachArbeitByErfassung($erfassungId);
            //step 3.2: delete
            $arrayBilderNachArbeitId = array();
            foreach (array_values($arrayBilderNachArbeit) as $arrayItem) {
                array_push($arrayBilderNachArbeitId, $arrayItem['bildId']);
            }
            $erfassungBild->deleteSelectedErfassungBilds($arrayBilderNachArbeitId);
            // step 3.3 insert new array
            $countSkizze = 0;
            $newArraySkizzeToInsert = $_POST['bilderNachArbeitFilesList'];
            foreach (array_values($newArraySkizzeToInsert) as $fileName) {
                // insert entity using model object
                $resultObject = $erfassungBild->insertNewErfassungBild(
                        $erfassungId
                        , 'nachArbeit'
                        , $fileName
                );
                if (is_bool($resultObject) || is_int($resultObject)) {
                    $countSkizze++;
                }
            }

            // step 4: insert Arbeitszeit
            $arrayZeiten = array();
            //step 4.1: get all entries for this Erfassung
            $arrayZeiten = $daoSelect->selectAllArbeitszeitByErfassung($formJsonValues['rapportId']);
            $arrayArbeitszeitId = array();
            foreach (array_values($arrayZeiten) as $arrayItem) {
                array_push($arrayArbeitszeitId, $arrayItem['arbeitszeitId']);
            }
            //step 4.2: delete
            $arbeitszeit->deleteSelectedArbeitszeits($arrayArbeitszeitId);
            // step 4.3 insert new array

            $newArrayArbeitszeit = $_POST['arbeitszeitList'];
            foreach (array_values($newArrayArbeitszeit) as $arrayItem) {
                // insert entity using model object
                $resultObject = $arbeitszeit->insertNewArbeitszeit(
                        $arrayItem['rapportId']
                        , "Erfassung"
                        , $arrayItem['mitarbeiterName']
                        , $arrayItem['gruppe']
                        , $arrayItem['zeit']
                        , $arrayItem['datum']
                );
            }
        }

        return $postbackData;
    }
    
    

    function getDatailsItemWithRelatedEntities($rapportId) {

        $resultObject = null;
        $erfassungBild = new ErfassungBild();
        $arbeitszeit = new Arbeitszeit();
        $postbackData = "-";
        $erfassungId = '0';
        $daoSelect = new DaoSelect();
        $resultJson;

        // step 0: get ErfassungId from rapport
        $resultObject = $daoSelect->selectRapportErfassungDatails($rapportId);
        if (is_array($resultObject)) {
            $erfassungId = $resultObject[0]['erfassungId'];
        }


        // step1: get Erfassung details
        if (isset($erfassungId)) {
            //$erfassungId = $_POST['erfassungId'];
            $resultObject = $this->erfassung->getErfassungDetails($erfassungId);
        }

        if (is_array($resultObject)) {
            // formvalues

            $postbackData = Utils::removeNumericalKeys($resultObject[0]);

            // add key
            $resultJson->formValues = $postbackData;
            
            // step 2:
            //step 2.1: get all images before work for this Erfassung
            $daoSelect = new DaoSelect();
            $arrayBilderVorArbeit = $daoSelect->selectAllBilderVorArbeitByErfassung($erfassungId);
            $arrayBilderVorArbeitFileNames = array();
            foreach (array_values($arrayBilderVorArbeit) as $arrayItem) {
                array_push($arrayBilderVorArbeitFileNames, $arrayItem['dateiName']);
            }
            if (is_array($arrayBilderVorArbeitFileNames))
                $resultJson->bilderVorArbeitFilesList = $arrayBilderVorArbeitFileNames;
            
            // step 3: get all images after work for this Erfassung
            $arrayBilderNachArbeit = $daoSelect->selectAllBilderNachArbeitByErfassung($erfassungId);
            $arrayBilderNachArbeitFileNames = array();
            foreach (array_values($arrayBilderNachArbeit) as $arrayItem) {
                array_push($arrayBilderNachArbeitFileNames, $arrayItem['dateiName']);
            }
            if (is_array($arrayBilderNachArbeitFileNames))
                $resultJson->bilderNachArbeitFilesList = $arrayBilderNachArbeitFileNames;

            // step 4: arbeitszeiten
            $arrayZeiten = array();
            //step 4.1: get all entries for this Erfassung
            $arrayZeiten = $daoSelect->selectAllArbeitszeitByErfassung($rapportId);
            $arrayZeitenCleaned = array();
            foreach (array_values($arrayZeiten) as $arrayItem) {
                $arrayBuf = Utils::removeNumericalKeys($arrayItem);
                array_push($arrayZeitenCleaned, $arrayBuf);
            }

            $resultJson->arbeitszeitList = $arrayZeitenCleaned;
        } else if (is_string($resultObject)) {
            $postbackData = Utils::formatJsonErrorMessage($resultObject);
        }


        $postbackData = "[" . json_encode($resultJson) . "]";
        //echo $postbackData;
        return $postbackData;
    }

    
    function getRapportErfassungDatails($rapportId) {

        $resultObject = null;
        // echo '$rapportId: ' . $rapportId; 
        $daoSelect = new DaoSelect();
        $resultObject = $daoSelect->selectRapportErfassungDatails($rapportId);
        //print_r($postbackData);
        return $resultObject;
    }


    
    

    /**
     * Get dynamic page content
     * @return mixed
     */
    public function getDynamicPageContent() {

        $postbackData = "Undefined Content";
        $resultObject = null;
        switch ($this->getUserAction()) {
            case "getAllItems":
                $postbackData = $this->getAllErfassungs();
                break;
            case "addNewItem":
            case "insertNewItem":
                $jsonData = array();
                if (isset($_POST['formValues'])) {
                    $jsonData = $_POST['formValues'][0];
                }
                $postbackData = $this->insertNewErfassung($jsonData);
                break;
            case "updateItem":
                $updateMode = "allFields";
                if (isset($_POST['updateMode'])) {
                    $updateMode = $_POST['updateMode'];
                }
                $erfassungId = $_POST['erfassungId'];
                $jsonData = $_POST['formValues'][0];
                $postbackData = $this->updateErfassung($erfassungId, $updateMode, $jsonData);
                break;
            case "deleteItem":
                $jsonData = array();
                if (isset($_POST['selectedIds'])) {
                    $jsonData = $_POST['selectedIds'];
                }
                $postbackData = $this->deleteErfassungs($jsonData);
                break;
            case "deleteAllItems":
                $postbackData = $this->deleteAllErfassungs();
                break;
            case "editDetails":
                $postbackData = "Undefined Content";
                if (isset($_POST['erfassungId'])) {
                    $erfassungId = $_POST['erfassungId'];
                    $resultObject = $this->erfassung->getErfassungDetails($erfassungId);
                }
                if (is_string($resultObject)) {
                    $postbackData = Utils::formatJsonErrorMessage($resultObject);
                } else if (is_array($resultObject)) {
                    $postbackData = Utils::convertArrayToJson($resultObject[0]);
                }
                break;
            case "viewDetails":
            case "cancelChanges":
                if (isset($_POST['erfassungId'])) {
                    $erfassungId = $_POST['erfassungId'];
                    $resultObject = $this->erfassung->getErfassungDetails($erfassungId);
                }
                if (is_string($resultObject)) {
                    $postbackData = Utils::formatJsonErrorMessage($resultObject);
                } else if (is_array($resultObject)) {
                    $postbackData = Utils::convertArrayToJson($resultObject[0]);
                }
                break;
            case "getRapportErfassungDatails":
                if (isset($_POST['rapportId'])) {
                    $rapportId = $_POST['rapportId'];
                    $resultObject = $this->getRapportErfassungDatails($rapportId);
                }

                if (is_string($resultObject)) {
                    $postbackData = Utils::formatJsonErrorMessage($resultObject);
                } else if (is_array($resultObject)) {
                    $postbackData = Utils::convertArrayToJson($resultObject[0]);
                }

                break;
            case "addNewItemWithRelatedEntities":
                $postbackData = "Undefined Content";
                $jsonData = array();
                if (isset($_POST['formValues'])) {
                    $jsonData = $_POST['formValues'][0];
                }
                $postbackData = $this->addNewItemWithRelatedEntities($jsonData);
                break;
            case "updateItemWithRelatedEntities":
                $postbackData = "Undefined Content";
                $jsonData = array();

                if (isset($_POST['formValues'])) {
                    $jsonData = $_POST['formValues'][0];
                }
                $postbackData = $this->updateItemWithRelatedEntities($jsonData);
                break;
            case "getDatailsItemWithRelatedEntities":
                $postbackData = "Undefined Content";
                $jsonData = array();

                if (isset($_POST['rapportId'])) {
                    $rapportId = $_POST['rapportId'];
                }
                $postbackData = $this->getDatailsItemWithRelatedEntities($rapportId);
                break;
        }
        return $postbackData;
    }


    
    
}





         
function testAddNewItem($rapportId) {

    $jsonRaw = '{"userAction":"addNewItem", "formValues":'
            . '[{"rapportId":"' . $rapportId . '"'
            . ',"bericht":" sdsd sd "'
            . ',"aufnahmeUnterschriftDatei":"signatur.jpg"'
            . ',"auftragAbgeschlossen":"nein"'
            . ',"datum":"2020-03-23 12:13:00"'
            . ' }]
              }';

    if (is_string($jsonRaw)) {
        $_POST = Utils::jsonDecode($jsonRaw, true);
    } else {
        $_POST = $jsonRaw;
    }
}

function testGetAllItems() {

    $jsonRaw = '{"userAction":"getAllItems"}';
    if (is_string($jsonRaw)) {
        $_POST = json_decode($jsonRaw, true);
    } else {
        $_POST = $jsonRaw;
    }
}

function testUpdateItem() {

    $jsonRaw = '{"userAction":"updateItem", "erfassungId":"1", "formValues":'
            . '[{"rapportId":"1"'
            . ',"bericht":" sdsd sd "'
            . ',"aufnahmeUnterschriftDatei":"signatur.jpg"'
            . ',"auftragAbgeschlossen":"nein"'
            . ',"datum":"2020-03-23 15:11:00"'
            . ' }]
              }';

    if (is_string($jsonRaw)) {
        $_POST = Utils::jsonDecode($jsonRaw, true);
    } else {
        $_POST = $jsonRaw;
    }
}

function testGetDatailsItem() {

    $jsonRaw = '{"userAction":"viewDetails", "erfassungId":"1"}';

    if (is_string($jsonRaw)) {
        $_POST = Utils::jsonDecode($jsonRaw, true);
    } else {
        $_POST = $jsonRaw;
    }
}

            
function testAddNewItemWithRelatedEntities($rapportId) {
    //   	  	 	  	 	auftragAbgeschlossen 	datum 	

    $jsonRaw = '{"userAction":"addNewItemWithRelatedEntities"'
            . ',"formValues":[{"rapportId":"' . $rapportId . '", "bericht":"this is bereicht", "material":"material-test", "maschineAufwand":"maschineAufwand-test"'
            . ',"kilometer":"23", "unterschriftKundeDatei":"signatur.jpg",  "auftragAbgeschlossen":"nein", "datum":"2020-03-23 20:13:00"}]'
            . ',"bilderVorArbeitFilesList":["v-bild1.jpg", "v-bild2.jpg", "v-bild3.jpg"]'
            . ',"bilderNachArbeitFilesList":["n-bild1.jpg", "n-bild2.jpg", "n-bild3.jpg"]'
            . ',"arbeitszeitList":'
            . '[{"rapportId":"' . $rapportId . '" ,"bereich":"Erfassung", "mitarbeiterName":"Bami 1-erfassung", "gruppe":"AB-Gruppe-123", "zeit":"2", "datum":"2020-03-16 12:13:00"},'
            . ' {"rapportId":"' . $rapportId . '" ,"bereich":"Erfassung", "mitarbeiterName":"Sokoi 2erfassung", "gruppe":"AB-Gruppe-433", "zeit":"3", "datum":"2020-03-16 12:23:00"}]'
            . '}';

    if (is_string($jsonRaw)) {
        $_POST = Utils::jsonDecode($jsonRaw, true);
    } else {
        $_POST = $jsonRaw;
    }
}




function testUpdateItemWithRelatedEntities($rapportId) {

    $jsonRaw = '{"userAction":"updateItemWithRelatedEntities" '
            . ',"formValues":[{"rapportId":"' . $rapportId . '", "bericht":"this is bereicht", "material":"material-test", "maschineAufwand":"maschineAufwand-test"'
            . ',"kilometer":"23", "unterschriftKundeDatei":"signatur-new.jpg",  "auftragAbgeschlossen":"nein", "datum":"2020-03-23 20:13:00"}]'
            . ',"bilderVorArbeitFilesList":["v-bild1-new.jpg", "v-bild2-new.jpg", "v-bild3-new.jpg"]'
            . ',"bilderNachArbeitFilesList":["n-bild1-new.jpg", "n-bild2-new.jpg", "n-bild3-new.jpg"]'
            . ',"arbeitszeitList":'
            . '[{"rapportId":"' . $rapportId . '" ,"bereich":"Erfassung", "mitarbeiterName":"Bami 1-erfassung-new", "gruppe":"AB-Gruppe-123", "zeit":"2", "datum":"2020-03-20 12:13:00"},'
            . ' {"rapportId":"' . $rapportId . '" ,"bereich":"Erfassung", "mitarbeiterName":"Sokoi 2-new-erfassung", "gruppe":"AB-Gruppe-433", "zeit":"1", "datum":"2020-03-20 12:23:00"}]'
            . '}';

    if (is_string($jsonRaw)) {
        $_POST = Utils::jsonDecode($jsonRaw, true);
    } else {
        $_POST = $jsonRaw;
    }
}


function testGetDatailsItemWithRelatedEntities($rapportId) {

    $jsonRaw = '{"userAction":"getDatailsItemWithRelatedEntities", "rapportId":"' . $rapportId . '"}';

    if (is_string($jsonRaw)) {
        $_POST = Utils::jsonDecode($jsonRaw, true);
    } else {
        $_POST = $jsonRaw;
    }
}

function testGetRapportErfassungDatails($rapportId) {

    $jsonRaw = '{"userAction":"getRapportErfassungDatails", "rapportId":"' . $rapportId . '"}';

    if (is_string($jsonRaw)) {
        $_POST = Utils::jsonDecode($jsonRaw, true);
    } else {
        $_POST = $jsonRaw;
    }
}


$rapportId = "1";
//testAddNewItem($rapportId);
//testUpdateItem();
//testGetAllItems();
//testGetDatailsItem();
//testAddNewItemWithRelatedEntities($rapportId);
//testUpdateItemWithRelatedEntities($rapportId);
//testGetDatailsItemWithRelatedEntities($rapportId);
 //testGetRapportErfassungDatails($rapportId);








if ($_SERVER['CONTENT_TYPE'] === "application/json; charset=UTF-8" || $_SERVER['CONTENT_TYPE'] === "application/json") {
    $jsonRaw = file_get_contents("php://input");

    if (is_string($jsonRaw)) {
        $_POST = Utils::jsonDecode($jsonRaw, true);
    } else {
        $_POST = $jsonRaw;
    }
}

$userAction = null;
if (isset($_POST) && isset($_POST['userAction'])) {
    $userAction = $_POST['userAction'];
} else if (isset($_GET) && isset($_GET['userAction'])) {
    $userAction = $_GET['userAction'];
}
if (!isset($userAction)) {
    echo "No action has been set";
} else {
    Utils::logRequestToFile($userAction);
    $erfassungController = new ErfassungController($userAction);
    $erfassungController->setUserAction($userAction);
    $postbackContent = $erfassungController->getDynamicPageContent();

    // send back content to client
    echo $postbackContent;
}
            

