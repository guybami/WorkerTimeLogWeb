
            <?php 


               /**
                * This module was auto generated by GWatcho-Code generator
                * The Nachtraege controller entity class.
                * @author
                *    Guy Bami Watcho
                */

  
include_once 'BaseController.php';


 class NachtraegeController extends BaseController { 
private $nachtraege = null; 


                 /**
                  *Constructor of the Nachtraege controller 

                   * @param $userAction string the user action
* @param $userRoles array the user roles 
                  */
                
function __construct($userAction, $userRoles = array()){ 
     parent::__construct($userAction, $userRoles);
                        $this->nachtraege = new Nachtraege(); }


           /**
            * Gets all Nachtraege entities
            * @return mixed object having all Nachtraege entities
            *    or string with the Exception details if error occured
            */
            public function getAllNachtraeges(){

                $itemSperator = ",";
                $entitiesList = "";
                $resultObject = $this->nachtraege->selectAllNachtraeges();
                if(is_string($resultObject)){
                    return Utils::formatJsonErrorMessage($resultObject);
                }
                else if(is_array($resultObject)){
                    for ($i = 0; $i < count($resultObject); $i++)
                    {
                        $entitiesList .= 
'{"nachtragId":"'.$resultObject[$i]["nachtragId"].'"'
.',"rapportId":"'.$resultObject[$i]["rapportId"].'"'
.',"aufsprache":"'.$resultObject[$i]["aufsprache"].'"'
.',"freierText":"'.$resultObject[$i]["freierText"].'"'
.',"arbeitszeiten":"'.$resultObject[$i]["arbeitszeiten"].'"'
.',"datum":"'.$resultObject[$i]["datum"].'"'
.'}';

                        if ($i != count($resultObject) - 1) {
                            $entitiesList .= $itemSperator;
                        }
                    }
                    // close json list
                    $entitiesList = "[" . $entitiesList . "]";

                }
                return $entitiesList;

            }


           /**
             * Inserts new Nachtraege entity
             * @param mixed $jsonData json object entity to insert
             * @return mixed  true if insertion was successful
             *    or string with the Exception details if error occured
             */
            public function insertNewNachtraege($jsonData){

                // get json posted values from request
                $formJsonValues = json_decode($jsonData, true);
                $postbackData = "";
                $resultObject = null;
                // insert entity using model object
                $resultObject = $this->nachtraege->insertNewNachtraege(
                                $formJsonValues['rapportId']
,$formJsonValues['aufsprache']
,$formJsonValues['freierText']
,$formJsonValues['arbeitszeiten']
,$formJsonValues['datum']


                );

                if(is_bool($resultObject) || is_int($resultObject)){
                    $postbackData = Utils::formatJsonMessage("insertedItemKey", $resultObject);
                }
                else if(is_string($resultObject)){
                    //error occured
                    $postbackData = Utils::formatJsonErrorMessage($resultObject);
                }
                else {
                    //error occured
                    $postbackData = Utils::formatJsonErrorMessage($resultObject);
                }
                return $postbackData;

            }


           /**
             * Updates Nachtraege entity via POST request
             * @param int $customerId
             * @param string $updateMode
             * @param mixed $jsonData
             * @return mixed  true if update was successful
             *    or string with the Exception details if error occured
             */
            public function updateNachtraege($nachtragId, $updateMode, $jsonData){

                // get json posted values from request
                $formJsonValues = json_decode($jsonData, true);
                $postbackData = "";
                $resultObject = null;
                if ($updateMode == "allFields") {
                    // update all entity fields
                    $resultObject = $this->nachtraege->updateNachtraegeDetails(
                                  $nachtragId
,$formJsonValues['rapportId']
,$formJsonValues['aufsprache']
,$formJsonValues['freierText']
,$formJsonValues['arbeitszeiten']
,$formJsonValues['datum']


                    );
                    if(is_bool($resultObject)){
                        if($resultObject == true){
                            $postbackData = Utils::formatJsonResultMessage(Common::UPDATE_SUCCESSFUL);
                        }
                        else{
                            $postbackData = Utils::formatJsonResultMessage(Common::UPDATE_FAILED);
                        }
                    }
                    else if(is_string($resultObject)){
                        //error occured
                        $postbackData = Utils::formatJsonErrorMessage($resultObject);
                    }

                }
                else if ($updateMode == "inlineUpdate") {
                    // Update entity from the datagrid
                    $fieldName = $formJsonValues['fieldName'];
                    $keyFieldValue = $formJsonValues['entityKeyId'];
                    $newFieldValue = $formJsonValues['newFieldValue'];
                    $resultObject = $this->nachtraege->updateNachtraegeEntityField($fieldName, $keyFieldValue, $newFieldValue);
                    if(is_string($resultObject)){
                        //error occured
                        $postbackData = Utils::formatJsonErrorMessage($resultObject);
                    }
                    else if(is_bool($resultObject)){
                        $postbackData = Utils::formatJsonResultMessage(Common::UPDATE_INLINE_SUCCESSFUL);
                    }
                }
                return $postbackData;

            }


           /**
             * Deletes all selected entities via POST request
             * @param mixed $jsonData all entities Id to delete
             * @return mixed
             */
            public function deleteNachtraeges($jsonData){

                // delete entity using model
                $resultObject = $this->nachtraege->deleteSelectedNachtraeges($jsonData);
                if(is_bool($resultObject)){
                    if($resultObject == true){
                        $postbackData = Utils::formatJsonResultMessage(Common::DELETE_SUCCESSFUL);
                    }
                    else{
                        $postbackData = Utils::formatJsonResultMessage(Common::DELETE_FAILED);
                    }
                }
                else if(is_string($resultObject)){
                    //error occured
                    $postbackData = Utils::formatJsonErrorMessage($resultObject);
                }
                else {
                    $postbackData = Utils::formatJsonErrorMessage($resultObject);
                }
                return $postbackData;

            }


           /**
             * Deletes all entities
             * @param mixed $jsonData all entities Id to delete
             * @return mixed
             */
            public function deleteAllNachtraeges(){

                // delete entities using corresponding model
                $resultObject = $this->nachtraege->deleteAllNachtraeges();
                if(is_bool($resultObject)){
                    if($resultObject == true){
                        $postbackData = Utils::formatJsonResultMessage(Common::DELETE_SUCCESSFUL);
                    }
                    else{
                        $postbackData = Utils::formatJsonResultMessage(Common::DELETE_FAILED);
                    }
                }
                else if(is_string($resultObject)){
                    //error occured
                    $postbackData = Utils::formatJsonErrorMessage($resultObject);
                }
                else {
                    $postbackData = Utils::formatJsonErrorMessage($resultObject);
                }
                return $postbackData;

            }


           /**
             * Get dynamic page content
             * @return mixed
             */
            public function getDynamicPageContent() {

                $postbackData = "Undefined Content";
                $resultObject = null;
                switch ($this->getUserAction()) {
                    case "getAllItems":
                        $postbackData = $this->getAllNachtraeges();
                        break;
                    case "addNewItem":
                    case "insertNewItem":
                        $jsonData = array();
                        if (isset($_POST['formValues'])) {
                            $jsonData = $_POST['formValues'][0];
                        }
                        $postbackData = $this->insertNewNachtraege($jsonData);
                        break;
                    case "updateItem":
                        $updateMode = "allFields";
                        if (isset($_POST['updateMode'])) {
                            $updateMode = $_POST['updateMode'];
                        }
                        $nachtragId = $_POST['nachtragId'];
                        $jsonData = $_POST['formValues'][0];
                        $postbackData = $this->updateNachtraege($nachtragId, $updateMode, $jsonData);
                        break;
                    case "deleteItem":
                        $jsonData = array();
                        if (isset($_POST['selectedIds'])) {
                            $jsonData = $_POST['selectedIds'];
                        }
                        $postbackData = $this->deleteNachtraeges($jsonData);
                        break;
                    case "deleteAllItems":
                        $postbackData = $this->deleteAllNachtraeges();
                        break;
                    case "editDetails":
                        $postbackData = "Undefined Content";
                        if ( isset($_POST['nachtragId']) ) {
                            $nachtragId = $_POST['nachtragId'];
                            $resultObject = $this->nachtraege->getNachtraegeDetails($nachtragId);
                        }
                        if(is_string($resultObject)){
                            $postbackData = Utils::formatJsonErrorMessage($resultObject);
                        }
                        else if(is_array($resultObject)){
                            $postbackData = Utils::convertArrayToJson($resultObject[0]);
                        }
                        break;
                    case "viewDetails":
                    case "cancelChanges":
                        if ( isset($_POST['nachtragId']) ) {
                            $nachtragId = $_POST['nachtragId'];
                            $resultObject = $this->nachtraege->getNachtraegeDetails($nachtragId);
                        }
                        if(is_string($resultObject)){
                            $postbackData = Utils::formatJsonErrorMessage($resultObject);
                        }
                        else if(is_array($resultObject)){
                            $postbackData = Utils::convertArrayToJson($resultObject[0]);
                        }
                        break;
                }
                return $postbackData;

            }

} 


            $userAction = null;
            if (isset($_POST) && isset($_POST['userAction'])) {
                $userAction = $_POST['userAction'];
            }
            if (!isset($userAction)) {
                echo "No action has been set";
            }
            else{
                $nachtraegeController = new NachtraegeController($userAction);
                $nachtraegeController->setUserAction($userAction);
                $postbackContent = $nachtraegeController->getDynamicPageContent();

                // send back content to client
                echo $postbackContent;
            }
            

