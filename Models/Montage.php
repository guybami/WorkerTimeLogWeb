
<?php

/**
 * This module was auto generated by the G-Watcho module generator
 * The Montage model entity class.
 * @author
 *    Guy Bami
 */
include_once '../Utils/ExceptionLogger.php';

class Montage {

    private $montageId;
    private $rapportId;
    private $bericht;
    private $aufnahmeUnterschriftDatei;
    private $auftragAbgeschlossen;
    private $datum;

    /** Constructor of an Montage object
     *  @param $montageId int The entity  primary key field 
     * @param  $rapportId int The entity  rapportId field 
     * @param  $bericht string The entity  bericht field 
     * @param  $aufnahmeUnterschriftDatei string The entity  aufnahmeUnterschriftDatei field 
     * @param  $auftragAbgeschlossen string The entity  auftragAbgeschlossen field 
     * @param  $datum string The entity  datum field 
     */
    function __construct($montageId = "", $rapportId = "", $bericht = "", $aufnahmeUnterschriftDatei = "", $auftragAbgeschlossen = "", $datum = "") {
        $this->montageId = $montageId;
        $this->rapportId = $rapportId;
        $this->bericht = $bericht;
        $this->aufnahmeUnterschriftDatei = $aufnahmeUnterschriftDatei;
        $this->auftragAbgeschlossen = $auftragAbgeschlossen;
        $this->datum = $datum;
    }

    /**
     * Gets  $rapportId value
     * @param $rapportId
     * @return mixed
     */
    public function getRapportId() {
        return $this->rapportId;
    }

    /**
     * Gets  $bericht value
     * @param $bericht
     * @return mixed
     */
    public function getBericht() {
        return $this->bericht;
    }

    /**
     * Gets  $aufnahmeUnterschriftDatei value
     * @param $aufnahmeUnterschriftDatei
     * @return mixed
     */
    public function getAufnahmeUnterschriftDatei() {
        return $this->aufnahmeUnterschriftDatei;
    }

    /**
     * Gets  $auftragAbgeschlossen value
     * @param $auftragAbgeschlossen
     * @return mixed
     */
    public function getAuftragAbgeschlossen() {
        return $this->auftragAbgeschlossen;
    }

    /**
     * Gets  $datum value
     * @param $datum
     * @return mixed
     */
    public function getDatum() {
        return $this->datum;
    }

    /**
     * Sets  $rapportId value
     * @param $rapportId
     * @return void
     */
    public function setRapportId($rapportId) {
        $this->rapportId = $rapportId;
    }

    /**
     * Sets  $bericht value
     * @param $bericht
     * @return void
     */
    public function setBericht($bericht) {
        $this->bericht = $bericht;
    }

    /**
     * Sets  $aufnahmeUnterschriftDatei value
     * @param $aufnahmeUnterschriftDatei
     * @return void
     */
    public function setAufnahmeUnterschriftDatei($aufnahmeUnterschriftDatei) {
        $this->aufnahmeUnterschriftDatei = $aufnahmeUnterschriftDatei;
    }

    /**
     * Sets  $auftragAbgeschlossen value
     * @param $auftragAbgeschlossen
     * @return void
     */
    public function setAuftragAbgeschlossen($auftragAbgeschlossen) {
        $this->auftragAbgeschlossen = $auftragAbgeschlossen;
    }

    /**
     * Sets  $datum value
     * @param $datum
     * @return void
     */
    public function setDatum($datum) {
        $this->datum = $datum;
    }

    /**
     * Selects all Montage items
     * @return
     *   array The object having all Montage items
     *    or string with the Exception details if error occured
     */
    public function selectAllMontages() {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectAllMontages();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Gets Montage item
     * @param $montageId int  The table primary key
     * @return
     *   array The object with the given $montageId value
     */
    public function getMontageDetails($montageId) {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectMontageDetails($montageId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Inserts new Montage entity
     * @param  $rapportId int The entity  rapportId field 
     * @param   $bericht string The entity  bericht field
     * @param   $aufnahmeUnterschriftDatei string The entity  aufnahmeUnterschriftDatei field
     * @param   $auftragAbgeschlossen string The entity  auftragAbgeschlossen field
     * @param   $datum string The entity  datum field
     * @return
     *   boolean TRUE if insert successful, otherwise FALSE
     */
    public function insertNewMontage($rapportId, $bericht, $aufnahmeUnterschriftDatei, $auftragAbgeschlossen, $datum) {
        try {
            $daoInsert = new DaoInsert();
            return $daoInsert->insertNewMontage($rapportId, $bericht, $aufnahmeUnterschriftDatei, $auftragAbgeschlossen, $datum);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates Montage item
     * @param  $montageId int The entity  montageId field 
     * @param  $rapportId int The entity  rapportId field 
     * @param  $bericht string The entity  bericht field 
     * @param  $aufnahmeUnterschriftDatei string The entity  aufnahmeUnterschriftDatei field 
     * @param  $auftragAbgeschlossen string The entity  auftragAbgeschlossen field 
     * @param  $datum string The entity  datum field 
     * @return
     *   boolean  TRUE if update successful, otherwise FALSE
     */
    public function updateMontage($montageId, $rapportId, $bericht, $aufnahmeUnterschriftDatei, $auftragAbgeschlossen, $datum) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateMontage($montageId, $rapportId, $bericht, $aufnahmeUnterschriftDatei, $auftragAbgeschlossen, $datum);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates Montage item  details

     * @param  $montageId int The entity  montageId field 
     * @param  $rapportId int The entity  rapportId field 
     * @param  $bericht string The entity  bericht field 
     * @param  $aufnahmeUnterschriftDatei string The entity  aufnahmeUnterschriftDatei field 
     * @param  $auftragAbgeschlossen string The entity  auftragAbgeschlossen field 
     * @param  $datum string The entity  datum field 
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateMontageDetails($montageId, $rapportId, $bericht, $aufnahmeUnterschriftDatei, $auftragAbgeschlossen, $datum) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateMontageDetails($montageId, $rapportId, $bericht, $aufnahmeUnterschriftDatei, $auftragAbgeschlossen, $datum);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates rapportId of the Montage entity
     * @param   $montageId int The entity  montageId field 
     * @param   $rapportId int The entity  rapportId field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateMontageRapportId($montageId, $rapportId) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateMontageRapportId($montageId, $rapportId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates bericht of the Montage entity
     * @param   $montageId int The entity  montageId field 
     * @param   $bericht string The entity  bericht field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateMontageBericht($montageId, $bericht) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateMontageBericht($montageId, $bericht);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates aufnahmeUnterschriftDatei of the Montage entity
     * @param   $montageId int The entity  montageId field 
     * @param   $aufnahmeUnterschriftDatei string The entity  aufnahmeUnterschriftDatei field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateMontageAufnahmeUnterschriftDatei($montageId, $aufnahmeUnterschriftDatei) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateMontageAufnahmeUnterschriftDatei($montageId, $aufnahmeUnterschriftDatei);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates auftragAbgeschlossen of the Montage entity
     * @param   $montageId int The entity  montageId field 
     * @param   $auftragAbgeschlossen string The entity  auftragAbgeschlossen field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateMontageAuftragAbgeschlossen($montageId, $auftragAbgeschlossen) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateMontageAuftragAbgeschlossen($montageId, $auftragAbgeschlossen);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates datum of the Montage entity
     * @param   $montageId int The entity  montageId field 
     * @param   $datum string The entity  datum field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateMontageDatum($montageId, $datum) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateMontageDatum($montageId, $datum);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates specific field of the Montage item
     * @param    $fieldName string The field name
     * @param    $keyFieldValue int The primary key field value
     * @param    $newFieldValue string The new field value
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateMontageEntityField($fieldName, $keyFieldValue, $newFieldValue) {
        try {
            switch ($fieldName) {

                case "rapportId":
                    return $this->updateMontageRapportId($keyFieldValue, $newFieldValue);

                case "bericht":
                    return $this->updateMontageBericht($keyFieldValue, $newFieldValue);

                case "aufnahmeUnterschriftDatei":
                    return $this->updateMontageAufnahmeUnterschriftDatei($keyFieldValue, $newFieldValue);

                case "auftragAbgeschlossen":
                    return $this->updateMontageAuftragAbgeschlossen($keyFieldValue, $newFieldValue);

                case "datum":
                    return $this->updateMontageDatum($keyFieldValue, $newFieldValue);
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes Montage item
     * @param  $montageId int  The table primary key
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteMontage($montageId) {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteMontage($montageId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Deletes selected Montage items
     * @param  $selectedItemsId array The List of primary keys item to be deleted
     * @return boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteSelectedMontages($selectedItemsId) {

        try {
            $daoDelete = new DaoDelete();
            if (!isset($selectedItemsId) || !is_array($selectedItemsId)) {
                return "Error: Invalid Parameters type for this method.";
            }
            foreach (array_values($selectedItemsId) as $itemId) {
                if ($daoDelete->deleteMontage($itemId)) {
                    continue;
                } else {
                    return "error: Can not delete Montage !";
                }
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes all Montage items
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteAllMontages() {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteAllMontages();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

}
