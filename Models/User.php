
<?php

/**
 * This module was auto generated by the G-Watcho module generator
 * The User model entity class.
 * @author
 *    Guy Bami
 */
include_once '../Utils/ExceptionLogger.php';

class User {

    private $userId;
    private $loginName;
    private $hashPassword;
    private $name;
    private $lastName;
    private $phoneNumber;
    private $email;
    private $role;

    /** Constructor of an User object
     *  @param $userId int The entity  primary key field 
     * @param  $loginName string The entity  loginName field 
     * @param  $hashPassword string The entity  hashPassword field 
     * @param  $name string The entity  name field 
     * @param  $lastName string The entity  lastName field 
     * @param  $phoneNumber string The entity  phoneNumber field 
     * @param  $email string The entity  email field 
     * @param  $role string The entity  role field 
     */
    function __construct($userId = "", $loginName = "", $hashPassword = "", $name = "", $lastName = "", $phoneNumber = "", $email = "", $role = "") {
        $this->userId = $userId;
        $this->loginName = $loginName;
        $this->hashPassword = $hashPassword;
        $this->name = $name;
        $this->lastName = $lastName;
        $this->phoneNumber = $phoneNumber;
        $this->email = $email;
        $this->role = $role;
    }

    /**
     * Gets  $loginName value
     * @param $loginName
     * @return mixed
     */
    public function getLoginName() {
        return $this->loginName;
    }

    /**
     * Gets  $hashPassword value
     * @param $hashPassword
     * @return mixed
     */
    public function getHashPassword() {
        return $this->hashPassword;
    }

    /**
     * Gets  $name value
     * @param $name
     * @return mixed
     */
    public function getName() {
        return $this->name;
    }

    /**
     * Gets  $lastName value
     * @param $lastName
     * @return mixed
     */
    public function getLastName() {
        return $this->lastName;
    }

    /**
     * Gets  $phoneNumber value
     * @param $phoneNumber
     * @return mixed
     */
    public function getPhoneNumber() {
        return $this->phoneNumber;
    }

    /**
     * Gets  $email value
     * @param $email
     * @return mixed
     */
    public function getEmail() {
        return $this->email;
    }

    /**
     * Gets  $role value
     * @param $role
     * @return mixed
     */
    public function getRole() {
        return $this->role;
    }

    /**
     * Sets  $loginName value
     * @param $loginName
     * @return void
     */
    public function setLoginName($loginName) {
        $this->loginName = $loginName;
    }

    /**
     * Sets  $hashPassword value
     * @param $hashPassword
     * @return void
     */
    public function setHashPassword($hashPassword) {
        $this->hashPassword = $hashPassword;
    }

    /**
     * Sets  $name value
     * @param $name
     * @return void
     */
    public function setName($name) {
        $this->name = $name;
    }

    /**
     * Sets  $lastName value
     * @param $lastName
     * @return void
     */
    public function setLastName($lastName) {
        $this->lastName = $lastName;
    }

    /**
     * Sets  $phoneNumber value
     * @param $phoneNumber
     * @return void
     */
    public function setPhoneNumber($phoneNumber) {
        $this->phoneNumber = $phoneNumber;
    }

    /**
     * Sets  $email value
     * @param $email
     * @return void
     */
    public function setEmail($email) {
        $this->email = $email;
    }

    /**
     * Sets  $role value
     * @param $role
     * @return void
     */
    public function setRole($role) {
        $this->role = $role;
    }

    /**
     * Selects all User items
     * @return
     *   array The object having all User items
     *    or string with the Exception details if error occured
     */
    public function selectAllUsers() {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectAllUsers();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Gets User item
     * @param $userId int  The table primary key
     * @return
     *   array The object with the given $userId value
     */
    public function getUserDetails($userId) {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectUserDetails($userId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Inserts new User entity
     * @param  $loginName string The entity  loginName field 
     * @param   $hashPassword string The entity  hashPassword field
     * @param   $name string The entity  name field
     * @param   $lastName string The entity  lastName field
     * @param   $phoneNumber string The entity  phoneNumber field
     * @param   $email string The entity  email field
     * @param   $role string The entity  role field
     * @return
     *   boolean TRUE if insert successful, otherwise FALSE
     */
    public function insertNewUser($loginName, $hashPassword, $name, $lastName, $phoneNumber, $email, $role) {
        try {
            $daoInsert = new DaoInsert();
            return $daoInsert->insertNewUser($loginName, $hashPassword, $name, $lastName, $phoneNumber, $email, $role);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates User item
     * @param  $userId int The entity  userId field 
     * @param  $loginName string The entity  loginName field 
     * @param  $hashPassword string The entity  hashPassword field 
     * @param  $name string The entity  name field 
     * @param  $lastName string The entity  lastName field 
     * @param  $phoneNumber string The entity  phoneNumber field 
     * @param  $email string The entity  email field 
     * @param  $role string The entity  role field 
     * @return
     *   boolean  TRUE if update successful, otherwise FALSE
     */
    public function updateUser($userId, $loginName, $hashPassword, $name, $lastName, $phoneNumber, $email, $role) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateUser($userId, $loginName, $hashPassword, $name, $lastName, $phoneNumber, $email, $role);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates User item  details

     * @param  $userId int The entity  userId field 
     * @param  $loginName string The entity  loginName field 
     * @param  $hashPassword string The entity  hashPassword field 
     * @param  $name string The entity  name field 
     * @param  $lastName string The entity  lastName field 
     * @param  $phoneNumber string The entity  phoneNumber field 
     * @param  $email string The entity  email field 
     * @param  $role string The entity  role field 
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateUserDetails($userId, $loginName, $hashPassword, $name, $lastName, $phoneNumber, $email, $role) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateUserDetails($userId, $loginName, $hashPassword, $name, $lastName, $phoneNumber, $email, $role);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates loginName of the User entity
     * @param   $userId int The entity  userId field 
     * @param   $loginName string The entity  loginName field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateUserLoginName($userId, $loginName) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateUserLoginName($userId, $loginName);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates hashPassword of the User entity
     * @param   $userId int The entity  userId field 
     * @param   $hashPassword string The entity  hashPassword field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateUserHashPassword($userId, $hashPassword) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateUserHashPassword($userId, $hashPassword);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates name of the User entity
     * @param   $userId int The entity  userId field 
     * @param   $name string The entity  name field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateUserName($userId, $name) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateUserName($userId, $name);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates lastName of the User entity
     * @param   $userId int The entity  userId field 
     * @param   $lastName string The entity  lastName field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateUserLastName($userId, $lastName) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateUserLastName($userId, $lastName);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates phoneNumber of the User entity
     * @param   $userId int The entity  userId field 
     * @param   $phoneNumber string The entity  phoneNumber field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateUserPhoneNumber($userId, $phoneNumber) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateUserPhoneNumber($userId, $phoneNumber);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates email of the User entity
     * @param   $userId int The entity  userId field 
     * @param   $email string The entity  email field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateUserEmail($userId, $email) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateUserEmail($userId, $email);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates role of the User entity
     * @param   $userId int The entity  userId field 
     * @param   $role string The entity  role field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateUserRole($userId, $role) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateUserRole($userId, $role);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates specific field of the User item
     * @param    $fieldName string The field name
     * @param    $keyFieldValue int The primary key field value
     * @param    $newFieldValue string The new field value
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateUserEntityField($fieldName, $keyFieldValue, $newFieldValue) {
        try {
            switch ($fieldName) {

                case "loginName":
                    return $this->updateUserLoginName($keyFieldValue, $newFieldValue);

                case "hashPassword":
                    return $this->updateUserHashPassword($keyFieldValue, $newFieldValue);

                case "name":
                    return $this->updateUserName($keyFieldValue, $newFieldValue);

                case "lastName":
                    return $this->updateUserLastName($keyFieldValue, $newFieldValue);

                case "phoneNumber":
                    return $this->updateUserPhoneNumber($keyFieldValue, $newFieldValue);

                case "email":
                    return $this->updateUserEmail($keyFieldValue, $newFieldValue);

                case "role":
                    return $this->updateUserRole($keyFieldValue, $newFieldValue);
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes User item
     * @param  $userId int  The table primary key
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteUser($userId) {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteUser($userId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Deletes selected User items
     * @param  $selectedItemsId array The List of primary keys item to be deleted
     * @return boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteSelectedUsers($selectedItemsId) {

        try {
            $daoDelete = new DaoDelete();
            if (!isset($selectedItemsId) || !is_array($selectedItemsId)) {
                return "Error: Invalid Parameters type for this method.";
            }
            foreach (array_values($selectedItemsId) as $itemId) {
                if ($daoDelete->deleteUser($itemId)) {
                    continue;
                } else {
                    return "error: Can not delete User !";
                }
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes all User items
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteAllUsers() {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteAllUsers();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Custom added User methods
     */

    /**
     * Checks user login data for Authentication
     * @param
     *   $userLoginName string  The user login name
     *   $userPassword string  The user password
     * @return boolean
     */
    public function checkUserLoginData($userLoginName, $userPassword) {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->checkUserLoginData($userLoginName, $userPassword);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return FALSE;
    }

    /**
     * Gets logged User role
     * @param
     * $userLoginName string The user login name
     * @return string
     */
    public function getLoggedUserRole($userLoginName) {
        $allUsers = $this->selectAllUsers();
        $fieldName = "userLoginName";
        $fieldCode = "code";
        for ($i = 0; $i < count($allUsers); $i++) {
            if ($allUsers[$i][$fieldName] == $userLoginName) {
                return $allUsers[$i][$fieldCode];
            }
        }
        return "USER";
    }

}
