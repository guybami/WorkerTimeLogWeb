
<?php

/**
 * This module was auto generated by the G-Watcho module generator
 * The Rapport model entity class.
 * @author
 *    Guy Bami
 */
include_once '../Utils/ExceptionLogger.php';

class Rapport {

    private $rapportId;
    private $userId;
    private $auftragNummer;
    private $bezeichnung;
    private $datum;

    /** Constructor of an Rapport object
     *  @param $rapportId int The entity  primary key field 
     * @param  $userId int The entity  userId field 
     * @param  $auftragNummer string The entity  auftragNummer field 
     * @param  $bezeichnung string The entity  bezeichnung field 
     * @param  $datum string The entity  datum field 
     */
    function __construct($rapportId = "", $userId = "", $auftragNummer = "", $bezeichnung = "", $datum = "") {
        $this->rapportId = $rapportId;
        $this->userId = $userId;
        $this->auftragNummer = $auftragNummer;
        $this->bezeichnung = $bezeichnung;
        $this->datum = $datum;
    }

    /**
     * Gets  $userId value
     * @param $userId
     * @return mixed
     */
    public function getUserId() {
        return $this->userId;
    }

    /**
     * Gets  $auftragNummer value
     * @param $auftragNummer
     * @return mixed
     */
    public function getAuftragNummer() {
        return $this->auftragNummer;
    }

    /**
     * Gets  $bezeichnung value
     * @param $bezeichnung
     * @return mixed
     */
    public function getBezeichnung() {
        return $this->bezeichnung;
    }

    /**
     * Gets  $datum value
     * @param $datum
     * @return mixed
     */
    public function getDatum() {
        return $this->datum;
    }

    /**
     * Sets  $userId value
     * @param $userId
     * @return void
     */
    public function setUserId($userId) {
        $this->userId = $userId;
    }

    /**
     * Sets  $auftragNummer value
     * @param $auftragNummer
     * @return void
     */
    public function setAuftragNummer($auftragNummer) {
        $this->auftragNummer = $auftragNummer;
    }

    /**
     * Sets  $bezeichnung value
     * @param $bezeichnung
     * @return void
     */
    public function setBezeichnung($bezeichnung) {
        $this->bezeichnung = $bezeichnung;
    }

    /**
     * Sets  $datum value
     * @param $datum
     * @return void
     */
    public function setDatum($datum) {
        $this->datum = $datum;
    }

    /**
     * Selects all Rapport items
     * @return
     *   array The object having all Rapport items
     *    or string with the Exception details if error occured
     */
    public function selectAllRapports() {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectAllRapports();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Gets Rapport item
     * @param $rapportId int  The table primary key
     * @return
     *   array The object with the given $rapportId value
     */
    public function getRapportDetails($rapportId) {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectRapportDetails($rapportId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Inserts new Rapport entity
     * @param  $userId int The entity  userId field 
     * @param   $auftragNummer string The entity  auftragNummer field
     * @param   $bezeichnung string The entity  bezeichnung field
     * @param   $datum string The entity  datum field
     * @return
     *   boolean TRUE if insert successful, otherwise FALSE
     */
    public function insertNewRapport($userId, $auftragNummer, $bezeichnung, $datum) {
        try {
            $daoInsert = new DaoInsert();
            return $daoInsert->insertNewRapport($userId, $auftragNummer, $bezeichnung, $datum);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates Rapport item
     * @param  $rapportId int The entity  rapportId field 
     * @param  $userId int The entity  userId field 
     * @param  $auftragNummer string The entity  auftragNummer field 
     * @param  $bezeichnung string The entity  bezeichnung field 
     * @param  $datum string The entity  datum field 
     * @return
     *   boolean  TRUE if update successful, otherwise FALSE
     */
    public function updateRapport($rapportId, $userId, $auftragNummer, $bezeichnung, $datum) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateRapport($rapportId, $userId, $auftragNummer, $bezeichnung, $datum);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates Rapport item  details

     * @param  $rapportId int The entity  rapportId field 
     * @param  $userId int The entity  userId field 
     * @param  $auftragNummer string The entity  auftragNummer field 
     * @param  $bezeichnung string The entity  bezeichnung field 
     * @param  $datum string The entity  datum field 
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateRapportDetails($rapportId, $userId, $auftragNummer, $bezeichnung, $datum) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateRapportDetails($rapportId, $userId, $auftragNummer, $bezeichnung, $datum);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates userId of the Rapport entity
     * @param   $rapportId int The entity  rapportId field 
     * @param   $userId int The entity  userId field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateRapportUserId($rapportId, $userId) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateRapportUserId($rapportId, $userId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates auftragNummer of the Rapport entity
     * @param   $rapportId int The entity  rapportId field 
     * @param   $auftragNummer string The entity  auftragNummer field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateRapportAuftragNummer($rapportId, $auftragNummer) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateRapportAuftragNummer($rapportId, $auftragNummer);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates bezeichnung of the Rapport entity
     * @param   $rapportId int The entity  rapportId field 
     * @param   $bezeichnung string The entity  bezeichnung field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateRapportBezeichnung($rapportId, $bezeichnung) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateRapportBezeichnung($rapportId, $bezeichnung);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates datum of the Rapport entity
     * @param   $rapportId int The entity  rapportId field 
     * @param   $datum string The entity  datum field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateRapportDatum($rapportId, $datum) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateRapportDatum($rapportId, $datum);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates specific field of the Rapport item
     * @param    $fieldName string The field name
     * @param    $keyFieldValue int The primary key field value
     * @param    $newFieldValue string The new field value
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateRapportEntityField($fieldName, $keyFieldValue, $newFieldValue) {
        try {
            switch ($fieldName) {

                case "userId":
                    return $this->updateRapportUserId($keyFieldValue, $newFieldValue);

                case "auftragNummer":
                    return $this->updateRapportAuftragNummer($keyFieldValue, $newFieldValue);

                case "bezeichnung":
                    return $this->updateRapportBezeichnung($keyFieldValue, $newFieldValue);

                case "datum":
                    return $this->updateRapportDatum($keyFieldValue, $newFieldValue);
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes Rapport item
     * @param  $rapportId int  The table primary key
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteRapport($rapportId) {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteRapport($rapportId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Deletes selected Rapport items
     * @param  $selectedItemsId array The List of primary keys item to be deleted
     * @return boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteSelectedRapports($selectedItemsId) {

        try {
            $daoDelete = new DaoDelete();
            if (!isset($selectedItemsId) || !is_array($selectedItemsId)) {
                return "Error: Invalid Parameters type for this method.";
            }
            foreach (array_values($selectedItemsId) as $itemId) {
                if ($daoDelete->deleteRapport($itemId)) {
                    continue;
                } else {
                    return "error: Can not delete Rapport !";
                }
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes all Rapport items
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteAllRapports() {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteAllRapports();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

}
