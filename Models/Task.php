
<?php

/**
 * This module was auto generated by the G-Watcho module generator
 * The Task model entity class.
 * @author
 *    Guy Bami
 */
include_once '../Utils/ExceptionLogger.php';

class Task {

    private $taskId;
    private $projectId;
    private $title;
    private $date;
    private $descriptionFileName;
    private $summary;

    /** Constructor of an Task object
     *  @param $taskId int The entity  primary key field 
     * @param  $projectId int The entity  projectId field 
     * @param  $title string The entity  title field 
     * @param  $date string The entity  date field 
     * @param  $descriptionFileName string The entity  descriptionFileName field 
     * @param  $summary string The entity  summary field 
     */
    function __construct($taskId = "", $projectId = "", $title = "", $date = "", $descriptionFileName = "", $summary = "") {
        $this->taskId = $taskId;
        $this->projectId = $projectId;
        $this->title = $title;
        $this->date = $date;
        $this->descriptionFileName = $descriptionFileName;
        $this->summary = $summary;
    }

    /**
     * Gets  $projectId value
     * @param $projectId
     * @return mixed
     */
    public function getProjectId() {
        return $this->projectId;
    }

    /**
     * Gets  $title value
     * @param $title
     * @return mixed
     */
    public function getTitle() {
        return $this->title;
    }

    /**
     * Gets  $date value
     * @param $date
     * @return mixed
     */
    public function getDate() {
        return $this->date;
    }

    /**
     * Gets  $descriptionFileName value
     * @param $descriptionFileName
     * @return mixed
     */
    public function getDescriptionFileName() {
        return $this->descriptionFileName;
    }

    /**
     * Gets  $summary value
     * @param $summary
     * @return mixed
     */
    public function getSummary() {
        return $this->summary;
    }

    /**
     * Sets  $projectId value
     * @param $projectId
     * @return void
     */
    public function setProjectId($projectId) {
        $this->projectId = $projectId;
    }

    /**
     * Sets  $title value
     * @param $title
     * @return void
     */
    public function setTitle($title) {
        $this->title = $title;
    }

    /**
     * Sets  $date value
     * @param $date
     * @return void
     */
    public function setDate($date) {
        $this->date = $date;
    }

    /**
     * Sets  $descriptionFileName value
     * @param $descriptionFileName
     * @return void
     */
    public function setDescriptionFileName($descriptionFileName) {
        $this->descriptionFileName = $descriptionFileName;
    }

    /**
     * Sets  $summary value
     * @param $summary
     * @return void
     */
    public function setSummary($summary) {
        $this->summary = $summary;
    }

    /**
     * Selects all Task items
     * @return
     *   array The object having all Task items
     *    or string with the Exception details if error occured
     */
    public function selectAllTasks() {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectAllTasks();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Gets Task item
     * @param $taskId int  The table primary key
     * @return
     *   array The object with the given $taskId value
     */
    public function getTaskDetails($taskId) {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectTaskDetails($taskId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Inserts new Task entity
     * @param  $projectId int The entity  projectId field 
     * @param   $title string The entity  title field
     * @param   $date string The entity  date field
     * @param   $descriptionFileName string The entity  descriptionFileName field
     * @param   $summary string The entity  summary field
     * @return
     *   boolean TRUE if insert successful, otherwise FALSE
     */
    public function insertNewTask($projectId, $title, $date, $descriptionFileName, $summary) {
        try {
            $daoInsert = new DaoInsert();
            return $daoInsert->insertNewTask($projectId, $title, $date, $descriptionFileName, $summary);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates Task item
     * @param  $taskId int The entity  taskId field 
     * @param  $projectId int The entity  projectId field 
     * @param  $title string The entity  title field 
     * @param  $date string The entity  date field 
     * @param  $descriptionFileName string The entity  descriptionFileName field 
     * @param  $summary string The entity  summary field 
     * @return
     *   boolean  TRUE if update successful, otherwise FALSE
     */
    public function updateTask($taskId, $projectId, $title, $date, $descriptionFileName, $summary) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateTask($taskId, $projectId, $title, $date, $descriptionFileName, $summary);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates Task item  details

     * @param  $taskId int The entity  taskId field 
     * @param  $projectId int The entity  projectId field 
     * @param  $title string The entity  title field 
     * @param  $date string The entity  date field 
     * @param  $descriptionFileName string The entity  descriptionFileName field 
     * @param  $summary string The entity  summary field 
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateTaskDetails($taskId, $projectId, $title, $date, $descriptionFileName, $summary) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateTaskDetails($taskId, $projectId, $title, $date, $descriptionFileName, $summary);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates projectId of the Task entity
     * @param   $taskId int The entity  taskId field 
     * @param   $projectId int The entity  projectId field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateTaskProjectId($taskId, $projectId) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateTaskProjectId($taskId, $projectId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates title of the Task entity
     * @param   $taskId int The entity  taskId field 
     * @param   $title string The entity  title field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateTaskTitle($taskId, $title) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateTaskTitle($taskId, $title);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates date of the Task entity
     * @param   $taskId int The entity  taskId field 
     * @param   $date string The entity  date field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateTaskDate($taskId, $date) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateTaskDate($taskId, $date);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates descriptionFileName of the Task entity
     * @param   $taskId int The entity  taskId field 
     * @param   $descriptionFileName string The entity  descriptionFileName field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateTaskDescriptionFileName($taskId, $descriptionFileName) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateTaskDescriptionFileName($taskId, $descriptionFileName);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates summary of the Task entity
     * @param   $taskId int The entity  taskId field 
     * @param   $summary string The entity  summary field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateTaskSummary($taskId, $summary) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateTaskSummary($taskId, $summary);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates specific field of the Task item
     * @param    $fieldName string The field name
     * @param    $keyFieldValue int The primary key field value
     * @param    $newFieldValue string The new field value
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateTaskEntityField($fieldName, $keyFieldValue, $newFieldValue) {
        try {
            switch ($fieldName) {

                case "projectId":
                    return $this->updateTaskProjectId($keyFieldValue, $newFieldValue);

                case "title":
                    return $this->updateTaskTitle($keyFieldValue, $newFieldValue);

                case "date":
                    return $this->updateTaskDate($keyFieldValue, $newFieldValue);

                case "descriptionFileName":
                    return $this->updateTaskDescriptionFileName($keyFieldValue, $newFieldValue);

                case "summary":
                    return $this->updateTaskSummary($keyFieldValue, $newFieldValue);
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes Task item
     * @param  $taskId int  The table primary key
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteTask($taskId) {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteTask($taskId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Deletes selected Task items
     * @param  $selectedItemsId array The List of primary keys item to be deleted
     * @return boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteSelectedTasks($selectedItemsId) {

        try {
            $daoDelete = new DaoDelete();
            if (!isset($selectedItemsId) || !is_array($selectedItemsId)) {
                return "Error: Invalid Parameters type for this method.";
            }
            foreach (array_values($selectedItemsId) as $itemId) {
                if ($daoDelete->deleteTask($itemId)) {
                    continue;
                } else {
                    return "error: Can not delete Task !";
                }
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes all Task items
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteAllTasks() {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteAllTasks();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

}
