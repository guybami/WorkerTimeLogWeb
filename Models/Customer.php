
<?php

/**
 * This module was auto generated by the G-Watcho module generator
 * The Customer model entity class.
 * @author
 *    Guy Bami
 */
include_once '../Utils/ExceptionLogger.php';

class Customer {

    private $customerId;
    private $name;
    private $lastName;
    private $email;
    private $phoneNumber;
    private $zipCode;
    private $city;
    private $street;

    /** Constructor of an Customer object
     *  @param $customerId int The entity  primary key field 
     * @param  $name string The entity  name field 
     * @param  $lastName string The entity  lastName field 
     * @param  $email string The entity  email field 
     * @param  $phoneNumber string The entity  phoneNumber field 
     * @param  $zipCode string The entity  zipCode field 
     * @param  $city string The entity  city field 
     * @param  $street string The entity  street field 
     */
    function __construct($customerId = "", $name = "", $lastName = "", $email = "", $phoneNumber = "", $zipCode = "", $city = "", $street = "") {
        $this->customerId = $customerId;
        $this->name = $name;
        $this->lastName = $lastName;
        $this->email = $email;
        $this->phoneNumber = $phoneNumber;
        $this->zipCode = $zipCode;
        $this->city = $city;
        $this->street = $street;
    }

    /**
     * Gets  $name value
     * @param $name
     * @return mixed
     */
    public function getName() {
        return $this->name;
    }

    /**
     * Gets  $lastName value
     * @param $lastName
     * @return mixed
     */
    public function getLastName() {
        return $this->lastName;
    }

    /**
     * Gets  $email value
     * @param $email
     * @return mixed
     */
    public function getEmail() {
        return $this->email;
    }

    /**
     * Gets  $phoneNumber value
     * @param $phoneNumber
     * @return mixed
     */
    public function getPhoneNumber() {
        return $this->phoneNumber;
    }

    /**
     * Gets  $zipCode value
     * @param $zipCode
     * @return mixed
     */
    public function getZipCode() {
        return $this->zipCode;
    }

    /**
     * Gets  $city value
     * @param $city
     * @return mixed
     */
    public function getCity() {
        return $this->city;
    }

    /**
     * Gets  $street value
     * @param $street
     * @return mixed
     */
    public function getStreet() {
        return $this->street;
    }

    /**
     * Sets  $name value
     * @param $name
     * @return void
     */
    public function setName($name) {
        $this->name = $name;
    }

    /**
     * Sets  $lastName value
     * @param $lastName
     * @return void
     */
    public function setLastName($lastName) {
        $this->lastName = $lastName;
    }

    /**
     * Sets  $email value
     * @param $email
     * @return void
     */
    public function setEmail($email) {
        $this->email = $email;
    }

    /**
     * Sets  $phoneNumber value
     * @param $phoneNumber
     * @return void
     */
    public function setPhoneNumber($phoneNumber) {
        $this->phoneNumber = $phoneNumber;
    }

    /**
     * Sets  $zipCode value
     * @param $zipCode
     * @return void
     */
    public function setZipCode($zipCode) {
        $this->zipCode = $zipCode;
    }

    /**
     * Sets  $city value
     * @param $city
     * @return void
     */
    public function setCity($city) {
        $this->city = $city;
    }

    /**
     * Sets  $street value
     * @param $street
     * @return void
     */
    public function setStreet($street) {
        $this->street = $street;
    }

    /**
     * Selects all Customer items
     * @return
     *   array The object having all Customer items
     *    or string with the Exception details if error occured
     */
    public function selectAllCustomers() {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectAllCustomers();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Gets Customer item
     * @param $customerId int  The table primary key
     * @return
     *   array The object with the given $customerId value
     */
    public function getCustomerDetails($customerId) {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectCustomerDetails($customerId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Inserts new Customer entity
     * @param  $name string The entity  name field 
     * @param   $lastName string The entity  lastName field
     * @param   $email string The entity  email field
     * @param   $phoneNumber string The entity  phoneNumber field
     * @param   $zipCode string The entity  zipCode field
     * @param   $city string The entity  city field
     * @param   $street string The entity  street field
     * @return
     *   boolean TRUE if insert successful, otherwise FALSE
     */
    public function insertNewCustomer($name, $lastName, $email, $phoneNumber, $zipCode, $city, $street) {
        try {
            $daoInsert = new DaoInsert();
            return $daoInsert->insertNewCustomer($name, $lastName, $email, $phoneNumber, $zipCode, $city, $street);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates Customer item
     * @param  $customerId int The entity  customerId field 
     * @param  $name string The entity  name field 
     * @param  $lastName string The entity  lastName field 
     * @param  $email string The entity  email field 
     * @param  $phoneNumber string The entity  phoneNumber field 
     * @param  $zipCode string The entity  zipCode field 
     * @param  $city string The entity  city field 
     * @param  $street string The entity  street field 
     * @return
     *   boolean  TRUE if update successful, otherwise FALSE
     */
    public function updateCustomer($customerId, $name, $lastName, $email, $phoneNumber, $zipCode, $city, $street) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateCustomer($customerId, $name, $lastName, $email, $phoneNumber, $zipCode, $city, $street);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates Customer item  details

     * @param  $customerId int The entity  customerId field 
     * @param  $name string The entity  name field 
     * @param  $lastName string The entity  lastName field 
     * @param  $email string The entity  email field 
     * @param  $phoneNumber string The entity  phoneNumber field 
     * @param  $zipCode string The entity  zipCode field 
     * @param  $city string The entity  city field 
     * @param  $street string The entity  street field 
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateCustomerDetails($customerId, $name, $lastName, $email, $phoneNumber, $zipCode, $city, $street) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateCustomerDetails($customerId, $name, $lastName, $email, $phoneNumber, $zipCode, $city, $street);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates name of the Customer entity
     * @param   $customerId int The entity  customerId field 
     * @param   $name string The entity  name field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateCustomerName($customerId, $name) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateCustomerName($customerId, $name);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates lastName of the Customer entity
     * @param   $customerId int The entity  customerId field 
     * @param   $lastName string The entity  lastName field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateCustomerLastName($customerId, $lastName) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateCustomerLastName($customerId, $lastName);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates email of the Customer entity
     * @param   $customerId int The entity  customerId field 
     * @param   $email string The entity  email field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateCustomerEmail($customerId, $email) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateCustomerEmail($customerId, $email);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates phoneNumber of the Customer entity
     * @param   $customerId int The entity  customerId field 
     * @param   $phoneNumber string The entity  phoneNumber field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateCustomerPhoneNumber($customerId, $phoneNumber) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateCustomerPhoneNumber($customerId, $phoneNumber);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates zipCode of the Customer entity
     * @param   $customerId int The entity  customerId field 
     * @param   $zipCode string The entity  zipCode field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateCustomerZipCode($customerId, $zipCode) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateCustomerZipCode($customerId, $zipCode);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates city of the Customer entity
     * @param   $customerId int The entity  customerId field 
     * @param   $city string The entity  city field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateCustomerCity($customerId, $city) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateCustomerCity($customerId, $city);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates street of the Customer entity
     * @param   $customerId int The entity  customerId field 
     * @param   $street string The entity  street field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateCustomerStreet($customerId, $street) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateCustomerStreet($customerId, $street);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates specific field of the Customer item
     * @param    $fieldName string The field name
     * @param    $keyFieldValue int The primary key field value
     * @param    $newFieldValue string The new field value
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateCustomerEntityField($fieldName, $keyFieldValue, $newFieldValue) {
        try {
            switch ($fieldName) {

                case "name":
                    return $this->updateCustomerName($keyFieldValue, $newFieldValue);

                case "lastName":
                    return $this->updateCustomerLastName($keyFieldValue, $newFieldValue);

                case "email":
                    return $this->updateCustomerEmail($keyFieldValue, $newFieldValue);

                case "phoneNumber":
                    return $this->updateCustomerPhoneNumber($keyFieldValue, $newFieldValue);

                case "zipCode":
                    return $this->updateCustomerZipCode($keyFieldValue, $newFieldValue);

                case "city":
                    return $this->updateCustomerCity($keyFieldValue, $newFieldValue);

                case "street":
                    return $this->updateCustomerStreet($keyFieldValue, $newFieldValue);
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes Customer item
     * @param  $customerId int  The table primary key
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteCustomer($customerId) {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteCustomer($customerId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Deletes selected Customer items
     * @param  $selectedItemsId array The List of primary keys item to be deleted
     * @return boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteSelectedCustomers($selectedItemsId) {

        try {
            $daoDelete = new DaoDelete();
            if (!isset($selectedItemsId) || !is_array($selectedItemsId)) {
                return "Error: Invalid Parameters type for this method.";
            }
            foreach (array_values($selectedItemsId) as $itemId) {
                if ($daoDelete->deleteCustomer($itemId)) {
                    continue;
                } else {
                    return "error: Can not delete Customer !";
                }
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes all Customer items
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteAllCustomers() {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteAllCustomers();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

}
