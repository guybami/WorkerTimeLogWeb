
            <?php 


               /**
                * This module was auto generated by the G-Watcho module generator
                * The NachtraegeSkizze model entity class.
                * @author
                *    Guy Bami
                */

include_once '../Utils/ExceptionLogger.php';


 class NachtraegeSkizze{ 
	  private $skizzeId; 
	  private $nachtragId; 
	  private $dateiName; 

                 /** Constructor of an NachtraegeSkizze object
                      *  @param $skizzeId int The entity  primary key field 
* @param  $nachtragId int The entity  nachtragId field 
* @param  $dateiName string The entity  dateiName field 
                  */
                
function __construct($skizzeId = "", $nachtragId = "", $dateiName = ""){ 
	 $this->skizzeId = $skizzeId; 
	 $this->nachtragId = $nachtragId; 
	 $this->dateiName = $dateiName; 
}



                /**
                * Gets  $nachtragId value
                * @param $nachtragId
                * @return mixed
                */
                public function getNachtragId() {
                    return $this->nachtragId;
                }
                


                /**
                * Gets  $dateiName value
                * @param $dateiName
                * @return mixed
                */
                public function getDateiName() {
                    return $this->dateiName;
                }
                


                /**
                * Sets  $nachtragId value
                * @param $nachtragId
                * @return void
                */
                public function setNachtragId($nachtragId) {
                    $this->nachtragId = $nachtragId;
                }
                


                /**
                * Sets  $dateiName value
                * @param $dateiName
                * @return void
                */
                public function setDateiName($dateiName) {
                    $this->dateiName = $dateiName;
                }
                

            /**
            * Selects all NachtraegeSkizze items
            * @return
            *   array The object having all NachtraegeSkizze items
            *    or string with the Exception details if error occured
            */
            public function selectAllNachtraegeSkizzes(){
                try {
                    $daoSelect = new DaoSelect();
                    return $daoSelect->selectAllNachtraegeSkizzes();
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }


           /**
            * Gets NachtraegeSkizze item
            * @param $skizzeId int  The table primary key
            * @return
            *   array The object with the given $skizzeId value
            */
            public function getNachtraegeSkizzeDetails($skizzeId){
                try {
                    $daoSelect = new DaoSelect();
                    return $daoSelect->selectNachtraegeSkizzeDetails($skizzeId);
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }


           /**
            * Inserts new NachtraegeSkizze entity
            * @param  $nachtragId int The entity  nachtragId field 
 * @param   $dateiName string The entity  dateiName field
            * @return
            *   boolean TRUE if insert successful, otherwise FALSE
            */
            public function insertNewNachtraegeSkizze($nachtragId, $dateiName){
                try {
                    $daoInsert = new DaoInsert();
                    return $daoInsert->insertNewNachtraegeSkizze($nachtragId, $dateiName);
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }


           /**
            * Updates NachtraegeSkizze item
             * @param  $skizzeId int The entity  skizzeId field 
* @param  $nachtragId int The entity  nachtragId field 
* @param  $dateiName string The entity  dateiName field 
            * @return
            *   boolean  TRUE if update successful, otherwise FALSE
            */
            public function updateNachtraegeSkizze($skizzeId, $nachtragId, $dateiName){
                try {
                    $daoUpdate = new DaoUpdate();
                    return $daoUpdate->updateNachtraegeSkizze($skizzeId, $nachtragId, $dateiName);
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }


           /**
            * Updates NachtraegeSkizze item  details
            
* @param  $skizzeId int The entity  skizzeId field 
* @param  $nachtragId int The entity  nachtragId field 
* @param  $dateiName string The entity  dateiName field 
            * @return
            *   boolean TRUE if update successful, otherwise FALSE
            */
            public function updateNachtraegeSkizzeDetails($skizzeId, $nachtragId, $dateiName){
                try {
                    $daoUpdate = new DaoUpdate();
                    return $daoUpdate->updateNachtraegeSkizzeDetails($skizzeId, $nachtragId, $dateiName);
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }


           /**
            * Updates nachtragId of the NachtraegeSkizze entity
             * @param   $skizzeId int The entity  skizzeId field 
 * @param   $nachtragId int The entity  nachtragId field
            * @return
            *   boolean TRUE if update successful, otherwise FALSE
            */
            public function updateNachtraegeSkizzeNachtragId($skizzeId, $nachtragId){
                try {
                    $daoUpdate = new DaoUpdate();
                    return $daoUpdate->updateNachtraegeSkizzeNachtragId($skizzeId, $nachtragId);
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }


           /**
            * Updates dateiName of the NachtraegeSkizze entity
             * @param   $skizzeId int The entity  skizzeId field 
 * @param   $dateiName string The entity  dateiName field
            * @return
            *   boolean TRUE if update successful, otherwise FALSE
            */
            public function updateNachtraegeSkizzeDateiName($skizzeId, $dateiName){
                try {
                    $daoUpdate = new DaoUpdate();
                    return $daoUpdate->updateNachtraegeSkizzeDateiName($skizzeId, $dateiName);
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }


           /**
            * Updates specific field of the NachtraegeSkizze item
            * @param    $fieldName string The field name
            * @param    $keyFieldValue int The primary key field value
            * @param    $newFieldValue string The new field value
            * @return
            *   boolean TRUE if update successful, otherwise FALSE
            */
            public function updateNachtraegeSkizzeEntityField($fieldName, $keyFieldValue, $newFieldValue){
                try {
                    switch($fieldName){
                        
                case "nachtragId":
			return $this->updateNachtraegeSkizzeNachtragId($keyFieldValue, $newFieldValue);
            
                case "dateiName":
			return $this->updateNachtraegeSkizzeDateiName($keyFieldValue, $newFieldValue);
            
                    }
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
                return true;
            }


           /**
            * Deletes NachtraegeSkizze item
            * @param  $skizzeId int  The table primary key
            * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
            */
            public function deleteNachtraegeSkizze($skizzeId){
                try {
                    $daoDelete = new DaoDelete();
                    return $daoDelete->deleteNachtraegeSkizze($skizzeId);
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }


           /**
            * Deletes selected NachtraegeSkizze items
            * @param  $selectedItemsId array The List of primary keys item to be deleted
            * @return boolean|mixed TRUE if delete successful, otherwise string with error message
            */
            public function deleteSelectedNachtraegeSkizzes($selectedItemsId){

                try {
                    $daoDelete = new DaoDelete();
                    if (!isset($selectedItemsId) || !is_array($selectedItemsId)){
                        return "Error: Invalid Parameters type for this method.";
                    }
                    foreach (array_values($selectedItemsId) as $itemId) {
                        if ($daoDelete->deleteNachtraegeSkizze($itemId)) {
                             continue;
                        }
                        else {
                            return "error: Can not delete NachtraegeSkizze !";
                        }
                    }
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
                return true;
            }


           /**
            * Deletes all NachtraegeSkizze items
            * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
            */
            public function deleteAllNachtraegeSkizzes(){
                try {
                    $daoDelete = new DaoDelete();
                    return $daoDelete->deleteAllNachtraegeSkizzes();
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }

 
}

