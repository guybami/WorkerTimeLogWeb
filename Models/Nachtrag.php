
<?php

/**
 * This module was auto generated by the G-Watcho module generator
 * The Nachtrag model entity class.
 * @author
 *    Guy Bami
 */
include_once '../Utils/ExceptionLogger.php';

class Nachtrag {

    private $nachtragId;
    private $rapportId;
    private $aufsprache;
    private $freierText;
    private $datum;

    /** Constructor of an Nachtrag object
     *  @param $nachtragId int The entity  primary key field 
     * @param  $rapportId int The entity  rapportId field 
     * @param  $aufsprache string The entity  aufsprache field 
     * @param  $freierText string The entity  freierText field 
     * @param  $datum string The entity  datum field 
     */
    function __construct($nachtragId = "", $rapportId = "", $aufsprache = "", $freierText = "", $datum = "") {
        $this->nachtragId = $nachtragId;
        $this->rapportId = $rapportId;
        $this->aufsprache = $aufsprache;
        $this->freierText = $freierText;
        $this->datum = $datum;
    }

    /**
     * Gets  $rapportId value
     * @param $rapportId
     * @return mixed
     */
    public function getRapportId() {
        return $this->rapportId;
    }

    /**
     * Gets  $aufsprache value
     * @param $aufsprache
     * @return mixed
     */
    public function getAufsprache() {
        return $this->aufsprache;
    }

    /**
     * Gets  $freierText value
     * @param $freierText
     * @return mixed
     */
    public function getFreierText() {
        return $this->freierText;
    }

    /**
     * Gets  $datum value
     * @param $datum
     * @return mixed
     */
    public function getDatum() {
        return $this->datum;
    }

    /**
     * Sets  $rapportId value
     * @param $rapportId
     * @return void
     */
    public function setRapportId($rapportId) {
        $this->rapportId = $rapportId;
    }

    /**
     * Sets  $aufsprache value
     * @param $aufsprache
     * @return void
     */
    public function setAufsprache($aufsprache) {
        $this->aufsprache = $aufsprache;
    }

    /**
     * Sets  $freierText value
     * @param $freierText
     * @return void
     */
    public function setFreierText($freierText) {
        $this->freierText = $freierText;
    }

    /**
     * Sets  $datum value
     * @param $datum
     * @return void
     */
    public function setDatum($datum) {
        $this->datum = $datum;
    }

    /**
     * Selects all Nachtrag items
     * @return
     *   array The object having all Nachtrag items
     *    or string with the Exception details if error occured
     */
    public function selectAllNachtrags() {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectAllNachtrags();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Gets Nachtrag item
     * @param $nachtragId int  The table primary key
     * @return
     *   array The object with the given $nachtragId value
     */
    public function getNachtragDetails($nachtragId) {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectNachtragDetails($nachtragId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Inserts new Nachtrag entity
     * @param  $rapportId int The entity  rapportId field 
     * @param   $aufsprache string The entity  aufsprache field
     * @param   $freierText string The entity  freierText field
     * @param   $datum string The entity  datum field
     * @return
     *   boolean TRUE if insert successful, otherwise FALSE
     */
    public function insertNewNachtrag($rapportId, $aufsprache, $freierText, $datum) {
        try {
            $daoInsert = new DaoInsert();
            return $daoInsert->insertNewNachtrag($rapportId, $aufsprache, $freierText, $datum);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates Nachtrag item
     * @param  $nachtragId int The entity  nachtragId field 
     * @param  $rapportId int The entity  rapportId field 
     * @param  $aufsprache string The entity  aufsprache field 
     * @param  $freierText string The entity  freierText field 
     * @param  $datum string The entity  datum field 
     * @return
     *   boolean  TRUE if update successful, otherwise FALSE
     */
    public function updateNachtrag($nachtragId, $rapportId, $aufsprache, $freierText, $datum) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateNachtrag($nachtragId, $rapportId, $aufsprache, $freierText, $datum);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates Nachtrag item  details

     * @param  $nachtragId int The entity  nachtragId field 
     * @param  $rapportId int The entity  rapportId field 
     * @param  $aufsprache string The entity  aufsprache field 
     * @param  $freierText string The entity  freierText field 
     * @param  $datum string The entity  datum field 
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateNachtragDetails($nachtragId, $rapportId, $aufsprache, $freierText, $datum) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateNachtragDetails($nachtragId, $rapportId, $aufsprache, $freierText, $datum);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates rapportId of the Nachtrag entity
     * @param   $nachtragId int The entity  nachtragId field 
     * @param   $rapportId int The entity  rapportId field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateNachtragRapportId($nachtragId, $rapportId) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateNachtragRapportId($nachtragId, $rapportId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates aufsprache of the Nachtrag entity
     * @param   $nachtragId int The entity  nachtragId field 
     * @param   $aufsprache string The entity  aufsprache field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateNachtragAufsprache($nachtragId, $aufsprache) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateNachtragAufsprache($nachtragId, $aufsprache);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates freierText of the Nachtrag entity
     * @param   $nachtragId int The entity  nachtragId field 
     * @param   $freierText string The entity  freierText field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateNachtragFreierText($nachtragId, $freierText) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateNachtragFreierText($nachtragId, $freierText);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates datum of the Nachtrag entity
     * @param   $nachtragId int The entity  nachtragId field 
     * @param   $datum string The entity  datum field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateNachtragDatum($nachtragId, $datum) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateNachtragDatum($nachtragId, $datum);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates specific field of the Nachtrag item
     * @param    $fieldName string The field name
     * @param    $keyFieldValue int The primary key field value
     * @param    $newFieldValue string The new field value
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateNachtragEntityField($fieldName, $keyFieldValue, $newFieldValue) {
        try {
            switch ($fieldName) {

                case "rapportId":
                    return $this->updateNachtragRapportId($keyFieldValue, $newFieldValue);

                case "aufsprache":
                    return $this->updateNachtragAufsprache($keyFieldValue, $newFieldValue);

                case "freierText":
                    return $this->updateNachtragFreierText($keyFieldValue, $newFieldValue);

                case "datum":
                    return $this->updateNachtragDatum($keyFieldValue, $newFieldValue);
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes Nachtrag item
     * @param  $nachtragId int  The table primary key
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteNachtrag($nachtragId) {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteNachtrag($nachtragId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Deletes selected Nachtrag items
     * @param  $selectedItemsId array The List of primary keys item to be deleted
     * @return boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteSelectedNachtrags($selectedItemsId) {

        try {
            $daoDelete = new DaoDelete();
            if (!isset($selectedItemsId) || !is_array($selectedItemsId)) {
                return "Error: Invalid Parameters type for this method.";
            }
            foreach (array_values($selectedItemsId) as $itemId) {
                if ($daoDelete->deleteNachtrag($itemId)) {
                    continue;
                } else {
                    return "error: Can not delete Nachtrag !";
                }
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes all Nachtrag items
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteAllNachtrags() {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteAllNachtrags();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

}
