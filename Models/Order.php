
<?php

/**
 * This module was auto generated by the G-Watcho module generator
 * The Order model entity class.
 * @author
 *    Guy Bami
 */
include_once '../Utils/ExceptionLogger.php';

class Order {

    private $orderId;
    private $title;
    private $projectId;
    private $date;

    /** Constructor of an Order object
     *  @param $orderId int The entity  primary key field 
     * @param  $title string The entity  title field 
     * @param  $projectId int The entity  projectId field 
     * @param  $date string The entity  date field 
     */
    function __construct($orderId = "", $title = "", $projectId = "", $date = "") {
        $this->orderId = $orderId;
        $this->title = $title;
        $this->projectId = $projectId;
        $this->date = $date;
    }

    /**
     * Gets  $title value
     * @param $title
     * @return mixed
     */
    public function getTitle() {
        return $this->title;
    }

    /**
     * Gets  $projectId value
     * @param $projectId
     * @return mixed
     */
    public function getProjectId() {
        return $this->projectId;
    }

    /**
     * Gets  $date value
     * @param $date
     * @return mixed
     */
    public function getDate() {
        return $this->date;
    }

    /**
     * Sets  $title value
     * @param $title
     * @return void
     */
    public function setTitle($title) {
        $this->title = $title;
    }

    /**
     * Sets  $projectId value
     * @param $projectId
     * @return void
     */
    public function setProjectId($projectId) {
        $this->projectId = $projectId;
    }

    /**
     * Sets  $date value
     * @param $date
     * @return void
     */
    public function setDate($date) {
        $this->date = $date;
    }

    /**
     * Selects all Order items
     * @return
     *   array The object having all Order items
     *    or string with the Exception details if error occured
     */
    public function selectAllOrders() {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectAllOrders();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Gets Order item
     * @param $orderId int  The table primary key
     * @return
     *   array The object with the given $orderId value
     */
    public function getOrderDetails($orderId) {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectOrderDetails($orderId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Inserts new Order entity
     * @param  $title string The entity  title field 
     * @param   $projectId int The entity  projectId field
     * @param   $date string The entity  date field
     * @return
     *   boolean TRUE if insert successful, otherwise FALSE
     */
    public function insertNewOrder($title, $projectId, $date) {
        try {
            $daoInsert = new DaoInsert();
            return $daoInsert->insertNewOrder($title, $projectId, $date);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates Order item
     * @param  $orderId int The entity  orderId field 
     * @param  $title string The entity  title field 
     * @param  $projectId int The entity  projectId field 
     * @param  $date string The entity  date field 
     * @return
     *   boolean  TRUE if update successful, otherwise FALSE
     */
    public function updateOrder($orderId, $title, $projectId, $date) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateOrder($orderId, $title, $projectId, $date);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates Order item  details

     * @param  $orderId int The entity  orderId field 
     * @param  $title string The entity  title field 
     * @param  $projectId int The entity  projectId field 
     * @param  $date string The entity  date field 
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateOrderDetails($orderId, $title, $projectId, $date) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateOrderDetails($orderId, $title, $projectId, $date);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates title of the Order entity
     * @param   $orderId int The entity  orderId field 
     * @param   $title string The entity  title field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateOrderTitle($orderId, $title) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateOrderTitle($orderId, $title);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates projectId of the Order entity
     * @param   $orderId int The entity  orderId field 
     * @param   $projectId int The entity  projectId field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateOrderProjectId($orderId, $projectId) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateOrderProjectId($orderId, $projectId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates date of the Order entity
     * @param   $orderId int The entity  orderId field 
     * @param   $date string The entity  date field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateOrderDate($orderId, $date) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateOrderDate($orderId, $date);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates specific field of the Order item
     * @param    $fieldName string The field name
     * @param    $keyFieldValue int The primary key field value
     * @param    $newFieldValue string The new field value
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateOrderEntityField($fieldName, $keyFieldValue, $newFieldValue) {
        try {
            switch ($fieldName) {

                case "title":
                    return $this->updateOrderTitle($keyFieldValue, $newFieldValue);

                case "projectId":
                    return $this->updateOrderProjectId($keyFieldValue, $newFieldValue);

                case "date":
                    return $this->updateOrderDate($keyFieldValue, $newFieldValue);
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes Order item
     * @param  $orderId int  The table primary key
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteOrder($orderId) {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteOrder($orderId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Deletes selected Order items
     * @param  $selectedItemsId array The List of primary keys item to be deleted
     * @return boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteSelectedOrders($selectedItemsId) {

        try {
            $daoDelete = new DaoDelete();
            if (!isset($selectedItemsId) || !is_array($selectedItemsId)) {
                return "Error: Invalid Parameters type for this method.";
            }
            foreach (array_values($selectedItemsId) as $itemId) {
                if ($daoDelete->deleteOrder($itemId)) {
                    continue;
                } else {
                    return "error: Can not delete Order !";
                }
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes all Order items
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteAllOrders() {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteAllOrders();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

}
