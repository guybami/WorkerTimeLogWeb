
<?php

/**
 * This module was auto generated by the G-Watcho module generator
 * The ErfassungOhneAuftrag model entity class.
 * @author
 *    Guy Bami
 */
include_once '../Utils/ExceptionLogger.php';

class ErfassungOhneAuftrag {

    private $erfassungId;
    private $kundenNummer;
    private $bericht;
    private $material;
    private $maschineAufwand;
    private $kilometer;
    private $unterschriftMitarbeiterDatei;
    private $unterschriftKundeDatei;
    private $auftragAbgeschlossen;
    private $datum;

    /** Constructor of an ErfassungOhneAuftrag object
     *  @param $erfassungId int The entity  primary key field 
     * @param  $kundenNummer string The entity  kundenNummer field 
     * @param  $bericht string The entity  bericht field 
     * @param  $material string The entity  material field 
     * @param  $maschineAufwand string The entity  maschineAufwand field 
     * @param  $kilometer string The entity  kilometer field 
     * @param  $unterschriftMitarbeiterDatei string The entity  unterschriftMitarbeiterDatei field 
     * @param  $unterschriftKundeDatei string The entity  unterschriftKundeDatei field 
     * @param  $auftragAbgeschlossen string The entity  auftragAbgeschlossen field 
     * @param  $datum string The entity  datum field 
     */
    function __construct($erfassungId = "", $kundenNummer = "", $bericht = "", $material = "", $maschineAufwand = "", $kilometer = "", $unterschriftMitarbeiterDatei = "", $unterschriftKundeDatei = "", $auftragAbgeschlossen = "", $datum = "") {
        $this->erfassungId = $erfassungId;
        $this->kundenNummer = $kundenNummer;
        $this->bericht = $bericht;
        $this->material = $material;
        $this->maschineAufwand = $maschineAufwand;
        $this->kilometer = $kilometer;
        $this->unterschriftMitarbeiterDatei = $unterschriftMitarbeiterDatei;
        $this->unterschriftKundeDatei = $unterschriftKundeDatei;
        $this->auftragAbgeschlossen = $auftragAbgeschlossen;
        $this->datum = $datum;
    }

    /**
     * Gets  $kundenNummer value
     * @param $kundenNummer
     * @return mixed
     */
    public function getKundenNummer() {
        return $this->kundenNummer;
    }

    /**
     * Gets  $bericht value
     * @param $bericht
     * @return mixed
     */
    public function getBericht() {
        return $this->bericht;
    }

    /**
     * Gets  $material value
     * @param $material
     * @return mixed
     */
    public function getMaterial() {
        return $this->material;
    }

    /**
     * Gets  $maschineAufwand value
     * @param $maschineAufwand
     * @return mixed
     */
    public function getMaschineAufwand() {
        return $this->maschineAufwand;
    }

    /**
     * Gets  $kilometer value
     * @param $kilometer
     * @return mixed
     */
    public function getKilometer() {
        return $this->kilometer;
    }

    /**
     * Gets  $unterschriftMitarbeiterDatei value
     * @param $unterschriftMitarbeiterDatei
     * @return mixed
     */
    public function getUnterschriftMitarbeiterDatei() {
        return $this->unterschriftMitarbeiterDatei;
    }

    /**
     * Gets  $unterschriftKundeDatei value
     * @param $unterschriftKundeDatei
     * @return mixed
     */
    public function getUnterschriftKundeDatei() {
        return $this->unterschriftKundeDatei;
    }

    /**
     * Gets  $auftragAbgeschlossen value
     * @param $auftragAbgeschlossen
     * @return mixed
     */
    public function getAuftragAbgeschlossen() {
        return $this->auftragAbgeschlossen;
    }

    /**
     * Gets  $datum value
     * @param $datum
     * @return mixed
     */
    public function getDatum() {
        return $this->datum;
    }

    /**
     * Sets  $kundenNummer value
     * @param $kundenNummer
     * @return void
     */
    public function setKundenNummer($kundenNummer) {
        $this->kundenNummer = $kundenNummer;
    }

    /**
     * Sets  $bericht value
     * @param $bericht
     * @return void
     */
    public function setBericht($bericht) {
        $this->bericht = $bericht;
    }

    /**
     * Sets  $material value
     * @param $material
     * @return void
     */
    public function setMaterial($material) {
        $this->material = $material;
    }

    /**
     * Sets  $maschineAufwand value
     * @param $maschineAufwand
     * @return void
     */
    public function setMaschineAufwand($maschineAufwand) {
        $this->maschineAufwand = $maschineAufwand;
    }

    /**
     * Sets  $kilometer value
     * @param $kilometer
     * @return void
     */
    public function setKilometer($kilometer) {
        $this->kilometer = $kilometer;
    }

    /**
     * Sets  $unterschriftMitarbeiterDatei value
     * @param $unterschriftMitarbeiterDatei
     * @return void
     */
    public function setUnterschriftMitarbeiterDatei($unterschriftMitarbeiterDatei) {
        $this->unterschriftMitarbeiterDatei = $unterschriftMitarbeiterDatei;
    }

    /**
     * Sets  $unterschriftKundeDatei value
     * @param $unterschriftKundeDatei
     * @return void
     */
    public function setUnterschriftKundeDatei($unterschriftKundeDatei) {
        $this->unterschriftKundeDatei = $unterschriftKundeDatei;
    }

    /**
     * Sets  $auftragAbgeschlossen value
     * @param $auftragAbgeschlossen
     * @return void
     */
    public function setAuftragAbgeschlossen($auftragAbgeschlossen) {
        $this->auftragAbgeschlossen = $auftragAbgeschlossen;
    }

    /**
     * Sets  $datum value
     * @param $datum
     * @return void
     */
    public function setDatum($datum) {
        $this->datum = $datum;
    }

    /**
     * Selects all ErfassungOhneAuftrag items
     * @return
     *   array The object having all ErfassungOhneAuftrag items
     *    or string with the Exception details if error occured
     */
    public function selectAllErfassungOhneAuftrags() {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectAllErfassungOhneAuftrags();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Gets ErfassungOhneAuftrag item
     * @param $erfassungId int  The table primary key
     * @return
     *   array The object with the given $erfassungId value
     */
    public function getErfassungOhneAuftragDetails($erfassungId) {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectErfassungOhneAuftragDetails($erfassungId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Inserts new ErfassungOhneAuftrag entity
     * @param  $kundenNummer string The entity  kundenNummer field 
     * @param   $bericht string The entity  bericht field
     * @param   $material string The entity  material field
     * @param   $maschineAufwand string The entity  maschineAufwand field
     * @param   $kilometer string The entity  kilometer field
     * @param   $unterschriftMitarbeiterDatei string The entity  unterschriftMitarbeiterDatei field
     * @param   $unterschriftKundeDatei string The entity  unterschriftKundeDatei field
     * @param   $auftragAbgeschlossen string The entity  auftragAbgeschlossen field
     * @param   $datum string The entity  datum field
     * @return
     *   boolean TRUE if insert successful, otherwise FALSE
     */
    public function insertNewErfassungOhneAuftrag($kundenNummer, $bericht, $material, $maschineAufwand, $kilometer, $unterschriftMitarbeiterDatei, $unterschriftKundeDatei, $auftragAbgeschlossen, $datum) {
        try {
            $daoInsert = new DaoInsert();
            return $daoInsert->insertNewErfassungOhneAuftrag($kundenNummer, $bericht, $material, $maschineAufwand, $kilometer, $unterschriftMitarbeiterDatei, $unterschriftKundeDatei, $auftragAbgeschlossen, $datum);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates ErfassungOhneAuftrag item
     * @param  $erfassungId int The entity  erfassungId field 
     * @param  $kundenNummer string The entity  kundenNummer field 
     * @param  $bericht string The entity  bericht field 
     * @param  $material string The entity  material field 
     * @param  $maschineAufwand string The entity  maschineAufwand field 
     * @param  $kilometer string The entity  kilometer field 
     * @param  $unterschriftMitarbeiterDatei string The entity  unterschriftMitarbeiterDatei field 
     * @param  $unterschriftKundeDatei string The entity  unterschriftKundeDatei field 
     * @param  $auftragAbgeschlossen string The entity  auftragAbgeschlossen field 
     * @param  $datum string The entity  datum field 
     * @return
     *   boolean  TRUE if update successful, otherwise FALSE
     */
    public function updateErfassungOhneAuftrag($erfassungId, $kundenNummer, $bericht, $material, $maschineAufwand, $kilometer, $unterschriftMitarbeiterDatei, $unterschriftKundeDatei, $auftragAbgeschlossen, $datum) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateErfassungOhneAuftrag($erfassungId, $kundenNummer, $bericht, $material, $maschineAufwand, $kilometer, $unterschriftMitarbeiterDatei, $unterschriftKundeDatei, $auftragAbgeschlossen, $datum);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates ErfassungOhneAuftrag item  details

     * @param  $erfassungId int The entity  erfassungId field 
     * @param  $kundenNummer string The entity  kundenNummer field 
     * @param  $bericht string The entity  bericht field 
     * @param  $material string The entity  material field 
     * @param  $maschineAufwand string The entity  maschineAufwand field 
     * @param  $kilometer string The entity  kilometer field 
     * @param  $unterschriftMitarbeiterDatei string The entity  unterschriftMitarbeiterDatei field 
     * @param  $unterschriftKundeDatei string The entity  unterschriftKundeDatei field 
     * @param  $auftragAbgeschlossen string The entity  auftragAbgeschlossen field 
     * @param  $datum string The entity  datum field 
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateErfassungOhneAuftragDetails($erfassungId, $kundenNummer, $bericht, $material, $maschineAufwand, $kilometer, $unterschriftMitarbeiterDatei, $unterschriftKundeDatei, $auftragAbgeschlossen, $datum) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateErfassungOhneAuftragDetails($erfassungId, $kundenNummer, $bericht, $material, $maschineAufwand, $kilometer, $unterschriftMitarbeiterDatei, $unterschriftKundeDatei, $auftragAbgeschlossen, $datum);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates kundenNummer of the ErfassungOhneAuftrag entity
     * @param   $erfassungId int The entity  erfassungId field 
     * @param   $kundenNummer string The entity  kundenNummer field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateErfassungOhneAuftragKundenNummer($erfassungId, $kundenNummer) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateErfassungOhneAuftragKundenNummer($erfassungId, $kundenNummer);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates bericht of the ErfassungOhneAuftrag entity
     * @param   $erfassungId int The entity  erfassungId field 
     * @param   $bericht string The entity  bericht field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateErfassungOhneAuftragBericht($erfassungId, $bericht) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateErfassungOhneAuftragBericht($erfassungId, $bericht);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates material of the ErfassungOhneAuftrag entity
     * @param   $erfassungId int The entity  erfassungId field 
     * @param   $material string The entity  material field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateErfassungOhneAuftragMaterial($erfassungId, $material) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateErfassungOhneAuftragMaterial($erfassungId, $material);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates maschineAufwand of the ErfassungOhneAuftrag entity
     * @param   $erfassungId int The entity  erfassungId field 
     * @param   $maschineAufwand string The entity  maschineAufwand field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateErfassungOhneAuftragMaschineAufwand($erfassungId, $maschineAufwand) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateErfassungOhneAuftragMaschineAufwand($erfassungId, $maschineAufwand);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates kilometer of the ErfassungOhneAuftrag entity
     * @param   $erfassungId int The entity  erfassungId field 
     * @param   $kilometer string The entity  kilometer field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateErfassungOhneAuftragKilometer($erfassungId, $kilometer) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateErfassungOhneAuftragKilometer($erfassungId, $kilometer);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates unterschriftMitarbeiterDatei of the ErfassungOhneAuftrag entity
     * @param   $erfassungId int The entity  erfassungId field 
     * @param   $unterschriftMitarbeiterDatei string The entity  unterschriftMitarbeiterDatei field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateErfassungOhneAuftragUnterschriftMitarbeiterDatei($erfassungId, $unterschriftMitarbeiterDatei) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateErfassungOhneAuftragUnterschriftMitarbeiterDatei($erfassungId, $unterschriftMitarbeiterDatei);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates unterschriftKundeDatei of the ErfassungOhneAuftrag entity
     * @param   $erfassungId int The entity  erfassungId field 
     * @param   $unterschriftKundeDatei string The entity  unterschriftKundeDatei field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateErfassungOhneAuftragUnterschriftKundeDatei($erfassungId, $unterschriftKundeDatei) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateErfassungOhneAuftragUnterschriftKundeDatei($erfassungId, $unterschriftKundeDatei);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates auftragAbgeschlossen of the ErfassungOhneAuftrag entity
     * @param   $erfassungId int The entity  erfassungId field 
     * @param   $auftragAbgeschlossen string The entity  auftragAbgeschlossen field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateErfassungOhneAuftragAuftragAbgeschlossen($erfassungId, $auftragAbgeschlossen) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateErfassungOhneAuftragAuftragAbgeschlossen($erfassungId, $auftragAbgeschlossen);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates datum of the ErfassungOhneAuftrag entity
     * @param   $erfassungId int The entity  erfassungId field 
     * @param   $datum string The entity  datum field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateErfassungOhneAuftragDatum($erfassungId, $datum) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateErfassungOhneAuftragDatum($erfassungId, $datum);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates specific field of the ErfassungOhneAuftrag item
     * @param    $fieldName string The field name
     * @param    $keyFieldValue int The primary key field value
     * @param    $newFieldValue string The new field value
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateErfassungOhneAuftragEntityField($fieldName, $keyFieldValue, $newFieldValue) {
        try {
            switch ($fieldName) {

                case "kundenNummer":
                    return $this->updateErfassungOhneAuftragKundenNummer($keyFieldValue, $newFieldValue);

                case "bericht":
                    return $this->updateErfassungOhneAuftragBericht($keyFieldValue, $newFieldValue);

                case "material":
                    return $this->updateErfassungOhneAuftragMaterial($keyFieldValue, $newFieldValue);

                case "maschineAufwand":
                    return $this->updateErfassungOhneAuftragMaschineAufwand($keyFieldValue, $newFieldValue);

                case "kilometer":
                    return $this->updateErfassungOhneAuftragKilometer($keyFieldValue, $newFieldValue);

                case "unterschriftMitarbeiterDatei":
                    return $this->updateErfassungOhneAuftragUnterschriftMitarbeiterDatei($keyFieldValue, $newFieldValue);

                case "unterschriftKundeDatei":
                    return $this->updateErfassungOhneAuftragUnterschriftKundeDatei($keyFieldValue, $newFieldValue);

                case "auftragAbgeschlossen":
                    return $this->updateErfassungOhneAuftragAuftragAbgeschlossen($keyFieldValue, $newFieldValue);

                case "datum":
                    return $this->updateErfassungOhneAuftragDatum($keyFieldValue, $newFieldValue);
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes ErfassungOhneAuftrag item
     * @param  $erfassungId int  The table primary key
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteErfassungOhneAuftrag($erfassungId) {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteErfassungOhneAuftrag($erfassungId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Deletes selected ErfassungOhneAuftrag items
     * @param  $selectedItemsId array The List of primary keys item to be deleted
     * @return boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteSelectedErfassungOhneAuftrags($selectedItemsId) {

        try {
            $daoDelete = new DaoDelete();
            if (!isset($selectedItemsId) || !is_array($selectedItemsId)) {
                return "Error: Invalid Parameters type for this method.";
            }
            foreach (array_values($selectedItemsId) as $itemId) {
                if ($daoDelete->deleteErfassungOhneAuftrag($itemId)) {
                    continue;
                } else {
                    return "error: Can not delete ErfassungOhneAuftrag !";
                }
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes all ErfassungOhneAuftrag items
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteAllErfassungOhneAuftrags() {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteAllErfassungOhneAuftrags();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

}
