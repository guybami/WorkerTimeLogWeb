
<?php

/**
 * This module was auto generated by the G-Watcho module generator
 * The Arbeitszeit model entity class.
 * @author
 *    Guy Bami
 */
include_once '../Utils/ExceptionLogger.php';

class Arbeitszeit {

    private $arbeitszeitId;
    private $rapportId;
    private $bereich;
    private $mitarbeiterName;
    private $gruppe;
    private $zeit;
    private $datum;

    /** Constructor of an Arbeitszeit object
     *  @param $arbeitszeitId int The entity  primary key field 
     * @param  $rapportId int The entity  rapportId field 
     * @param  $bereich string The entity  bereich field 
     * @param  $mitarbeiterName string The entity  mitarbeiterName field 
     * @param  $gruppe string The entity  gruppe field 
     * @param  $zeit string The entity  zeit field 
     * @param  $datum string The entity  datum field 
     */
    function __construct($arbeitszeitId = "", $rapportId = "", $bereich = "", $mitarbeiterName = "", $gruppe = "", $zeit = "", $datum = "") {
        $this->arbeitszeitId = $arbeitszeitId;
        $this->rapportId = $rapportId;
        $this->bereich = $bereich;
        $this->mitarbeiterName = $mitarbeiterName;
        $this->gruppe = $gruppe;
        $this->zeit = $zeit;
        $this->datum = $datum;
    }

    /**
     * Gets  $rapportId value
     * @param $rapportId
     * @return mixed
     */
    public function getRapportId() {
        return $this->rapportId;
    }

    /**
     * Gets  $bereich value
     * @param $bereich
     * @return mixed
     */
    public function getBereich() {
        return $this->bereich;
    }

    /**
     * Gets  $mitarbeiterName value
     * @param $mitarbeiterName
     * @return mixed
     */
    public function getMitarbeiterName() {
        return $this->mitarbeiterName;
    }

    /**
     * Gets  $gruppe value
     * @param $gruppe
     * @return mixed
     */
    public function getGruppe() {
        return $this->gruppe;
    }

    /**
     * Gets  $zeit value
     * @param $zeit
     * @return mixed
     */
    public function getZeit() {
        return $this->zeit;
    }

    /**
     * Gets  $datum value
     * @param $datum
     * @return mixed
     */
    public function getDatum() {
        return $this->datum;
    }

    /**
     * Sets  $rapportId value
     * @param $rapportId
     * @return void
     */
    public function setRapportId($rapportId) {
        $this->rapportId = $rapportId;
    }

    /**
     * Sets  $bereich value
     * @param $bereich
     * @return void
     */
    public function setBereich($bereich) {
        $this->bereich = $bereich;
    }

    /**
     * Sets  $mitarbeiterName value
     * @param $mitarbeiterName
     * @return void
     */
    public function setMitarbeiterName($mitarbeiterName) {
        $this->mitarbeiterName = $mitarbeiterName;
    }

    /**
     * Sets  $gruppe value
     * @param $gruppe
     * @return void
     */
    public function setGruppe($gruppe) {
        $this->gruppe = $gruppe;
    }

    /**
     * Sets  $zeit value
     * @param $zeit
     * @return void
     */
    public function setZeit($zeit) {
        $this->zeit = $zeit;
    }

    /**
     * Sets  $datum value
     * @param $datum
     * @return void
     */
    public function setDatum($datum) {
        $this->datum = $datum;
    }

    /**
     * Selects all Arbeitszeit items
     * @return
     *   array The object having all Arbeitszeit items
     *    or string with the Exception details if error occured
     */
    public function selectAllArbeitszeits() {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectAllArbeitszeits();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Gets Arbeitszeit item
     * @param $arbeitszeitId int  The table primary key
     * @return
     *   array The object with the given $arbeitszeitId value
     */
    public function getArbeitszeitDetails($arbeitszeitId) {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectArbeitszeitDetails($arbeitszeitId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Inserts new Arbeitszeit entity
     * @param  $rapportId int The entity  rapportId field 
     * @param   $bereich string The entity  bereich field
     * @param   $mitarbeiterName string The entity  mitarbeiterName field
     * @param   $gruppe string The entity  gruppe field
     * @param   $zeit string The entity  zeit field
     * @param   $datum string The entity  datum field
     * @return
     *   boolean TRUE if insert successful, otherwise FALSE
     */
    public function insertNewArbeitszeit($rapportId, $bereich, $mitarbeiterName, $gruppe, $zeit, $datum) {
        try {
            $daoInsert = new DaoInsert();
            return $daoInsert->insertNewArbeitszeit($rapportId, $bereich, $mitarbeiterName, $gruppe, $zeit, $datum);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates Arbeitszeit item
     * @param  $arbeitszeitId int The entity  arbeitszeitId field 
     * @param  $rapportId int The entity  rapportId field 
     * @param  $bereich string The entity  bereich field 
     * @param  $mitarbeiterName string The entity  mitarbeiterName field 
     * @param  $gruppe string The entity  gruppe field 
     * @param  $zeit string The entity  zeit field 
     * @param  $datum string The entity  datum field 
     * @return
     *   boolean  TRUE if update successful, otherwise FALSE
     */
    public function updateArbeitszeit($arbeitszeitId, $rapportId, $bereich, $mitarbeiterName, $gruppe, $zeit, $datum) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateArbeitszeit($arbeitszeitId, $rapportId, $bereich, $mitarbeiterName, $gruppe, $zeit, $datum);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates Arbeitszeit item  details

     * @param  $arbeitszeitId int The entity  arbeitszeitId field 
     * @param  $rapportId int The entity  rapportId field 
     * @param  $bereich string The entity  bereich field 
     * @param  $mitarbeiterName string The entity  mitarbeiterName field 
     * @param  $gruppe string The entity  gruppe field 
     * @param  $zeit string The entity  zeit field 
     * @param  $datum string The entity  datum field 
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateArbeitszeitDetails($arbeitszeitId, $rapportId, $bereich, $mitarbeiterName, $gruppe, $zeit, $datum) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateArbeitszeitDetails($arbeitszeitId, $rapportId, $bereich, $mitarbeiterName, $gruppe, $zeit, $datum);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates rapportId of the Arbeitszeit entity
     * @param   $arbeitszeitId int The entity  arbeitszeitId field 
     * @param   $rapportId int The entity  rapportId field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateArbeitszeitRapportId($arbeitszeitId, $rapportId) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateArbeitszeitRapportId($arbeitszeitId, $rapportId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates bereich of the Arbeitszeit entity
     * @param   $arbeitszeitId int The entity  arbeitszeitId field 
     * @param   $bereich string The entity  bereich field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateArbeitszeitBereich($arbeitszeitId, $bereich) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateArbeitszeitBereich($arbeitszeitId, $bereich);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates mitarbeiterName of the Arbeitszeit entity
     * @param   $arbeitszeitId int The entity  arbeitszeitId field 
     * @param   $mitarbeiterName string The entity  mitarbeiterName field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateArbeitszeitMitarbeiterName($arbeitszeitId, $mitarbeiterName) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateArbeitszeitMitarbeiterName($arbeitszeitId, $mitarbeiterName);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates gruppe of the Arbeitszeit entity
     * @param   $arbeitszeitId int The entity  arbeitszeitId field 
     * @param   $gruppe string The entity  gruppe field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateArbeitszeitGruppe($arbeitszeitId, $gruppe) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateArbeitszeitGruppe($arbeitszeitId, $gruppe);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates zeit of the Arbeitszeit entity
     * @param   $arbeitszeitId int The entity  arbeitszeitId field 
     * @param   $zeit string The entity  zeit field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateArbeitszeitZeit($arbeitszeitId, $zeit) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateArbeitszeitZeit($arbeitszeitId, $zeit);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates datum of the Arbeitszeit entity
     * @param   $arbeitszeitId int The entity  arbeitszeitId field 
     * @param   $datum string The entity  datum field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateArbeitszeitDatum($arbeitszeitId, $datum) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateArbeitszeitDatum($arbeitszeitId, $datum);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates specific field of the Arbeitszeit item
     * @param    $fieldName string The field name
     * @param    $keyFieldValue int The primary key field value
     * @param    $newFieldValue string The new field value
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateArbeitszeitEntityField($fieldName, $keyFieldValue, $newFieldValue) {
        try {
            switch ($fieldName) {

                case "rapportId":
                    return $this->updateArbeitszeitRapportId($keyFieldValue, $newFieldValue);

                case "bereich":
                    return $this->updateArbeitszeitBereich($keyFieldValue, $newFieldValue);

                case "mitarbeiterName":
                    return $this->updateArbeitszeitMitarbeiterName($keyFieldValue, $newFieldValue);

                case "gruppe":
                    return $this->updateArbeitszeitGruppe($keyFieldValue, $newFieldValue);

                case "zeit":
                    return $this->updateArbeitszeitZeit($keyFieldValue, $newFieldValue);

                case "datum":
                    return $this->updateArbeitszeitDatum($keyFieldValue, $newFieldValue);
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes Arbeitszeit item
     * @param  $arbeitszeitId int  The table primary key
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteArbeitszeit($arbeitszeitId) {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteArbeitszeit($arbeitszeitId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Deletes selected Arbeitszeit items
     * @param  $selectedItemsId array The List of primary keys item to be deleted
     * @return boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteSelectedArbeitszeits($selectedItemsId) {

        try {
            $daoDelete = new DaoDelete();
            if (!isset($selectedItemsId) || !is_array($selectedItemsId)) {
                return "Error: Invalid Parameters type for this method.";
            }
            foreach (array_values($selectedItemsId) as $itemId) {
                if ($daoDelete->deleteArbeitszeit($itemId)) {
                    continue;
                } else {
                    return "error: Can not delete Arbeitszeit !";
                }
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes all Arbeitszeit items
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteAllArbeitszeits() {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteAllArbeitszeits();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

}
