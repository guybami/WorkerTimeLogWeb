
<?php

/**
 * This module was auto generated by the G-Watcho module generator
 * The TaskPicture model entity class.
 * @author
 *    Guy Bami
 */
include_once '../Utils/ExceptionLogger.php';

class TaskPicture {

    private $taskPictureId;
    private $taskId;
    private $fileName;

    /** Constructor of an TaskPicture object
     *  @param $taskPictureId int The entity  primary key field 
     * @param  $taskId int The entity  taskId field 
     * @param  $fileName string The entity  fileName field 
     */
    function __construct($taskPictureId = "", $taskId = "", $fileName = "") {
        $this->taskPictureId = $taskPictureId;
        $this->taskId = $taskId;
        $this->fileName = $fileName;
    }

    /**
     * Gets  $taskId value
     * @param $taskId
     * @return mixed
     */
    public function getTaskId() {
        return $this->taskId;
    }

    /**
     * Gets  $fileName value
     * @param $fileName
     * @return mixed
     */
    public function getFileName() {
        return $this->fileName;
    }

    /**
     * Sets  $taskId value
     * @param $taskId
     * @return void
     */
    public function setTaskId($taskId) {
        $this->taskId = $taskId;
    }

    /**
     * Sets  $fileName value
     * @param $fileName
     * @return void
     */
    public function setFileName($fileName) {
        $this->fileName = $fileName;
    }

    /**
     * Selects all TaskPicture items
     * @return
     *   array The object having all TaskPicture items
     *    or string with the Exception details if error occured
     */
    public function selectAllTaskPictures() {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectAllTaskPictures();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Gets TaskPicture item
     * @param $taskPictureId int  The table primary key
     * @return
     *   array The object with the given $taskPictureId value
     */
    public function getTaskPictureDetails($taskPictureId) {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectTaskPictureDetails($taskPictureId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Inserts new TaskPicture entity
     * @param  $taskId int The entity  taskId field 
     * @param   $fileName string The entity  fileName field
     * @return
     *   boolean TRUE if insert successful, otherwise FALSE
     */
    public function insertNewTaskPicture($taskId, $fileName) {
        try {
            $daoInsert = new DaoInsert();
            return $daoInsert->insertNewTaskPicture($taskId, $fileName);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates TaskPicture item
     * @param  $taskPictureId int The entity  taskPictureId field 
     * @param  $taskId int The entity  taskId field 
     * @param  $fileName string The entity  fileName field 
     * @return
     *   boolean  TRUE if update successful, otherwise FALSE
     */
    public function updateTaskPicture($taskPictureId, $taskId, $fileName) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateTaskPicture($taskPictureId, $taskId, $fileName);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates TaskPicture item  details

     * @param  $taskPictureId int The entity  taskPictureId field 
     * @param  $taskId int The entity  taskId field 
     * @param  $fileName string The entity  fileName field 
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateTaskPictureDetails($taskPictureId, $taskId, $fileName) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateTaskPictureDetails($taskPictureId, $taskId, $fileName);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates taskId of the TaskPicture entity
     * @param   $taskPictureId int The entity  taskPictureId field 
     * @param   $taskId int The entity  taskId field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateTaskPictureTaskId($taskPictureId, $taskId) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateTaskPictureTaskId($taskPictureId, $taskId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates fileName of the TaskPicture entity
     * @param   $taskPictureId int The entity  taskPictureId field 
     * @param   $fileName string The entity  fileName field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateTaskPictureFileName($taskPictureId, $fileName) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateTaskPictureFileName($taskPictureId, $fileName);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates specific field of the TaskPicture item
     * @param    $fieldName string The field name
     * @param    $keyFieldValue int The primary key field value
     * @param    $newFieldValue string The new field value
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateTaskPictureEntityField($fieldName, $keyFieldValue, $newFieldValue) {
        try {
            switch ($fieldName) {

                case "taskId":
                    return $this->updateTaskPictureTaskId($keyFieldValue, $newFieldValue);

                case "fileName":
                    return $this->updateTaskPictureFileName($keyFieldValue, $newFieldValue);
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes TaskPicture item
     * @param  $taskPictureId int  The table primary key
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteTaskPicture($taskPictureId) {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteTaskPicture($taskPictureId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Deletes selected TaskPicture items
     * @param  $selectedItemsId array The List of primary keys item to be deleted
     * @return boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteSelectedTaskPictures($selectedItemsId) {

        try {
            $daoDelete = new DaoDelete();
            if (!isset($selectedItemsId) || !is_array($selectedItemsId)) {
                return "Error: Invalid Parameters type for this method.";
            }
            foreach (array_values($selectedItemsId) as $itemId) {
                if ($daoDelete->deleteTaskPicture($itemId)) {
                    continue;
                } else {
                    return "error: Can not delete TaskPicture !";
                }
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes all TaskPicture items
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteAllTaskPictures() {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteAllTaskPictures();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

}
