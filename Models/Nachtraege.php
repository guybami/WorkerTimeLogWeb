
            <?php 


               /**
                * This module was auto generated by the G-Watcho module generator
                * The Nachtraege model entity class.
                * @author
                *    Guy Bami
                */

include_once '../Utils/ExceptionLogger.php';


 class Nachtraege{ 
	  private $nachtragId; 
	  private $rapportId; 
	  private $aufsprache; 
	  private $freierText; 
	  private $arbeitszeiten; 
	  private $datum; 

                 /** Constructor of an Nachtraege object
                      *  @param $nachtragId int The entity  primary key field 
* @param  $rapportId int The entity  rapportId field 
* @param  $aufsprache string The entity  aufsprache field 
* @param  $freierText string The entity  freierText field 
* @param  $arbeitszeiten string The entity  arbeitszeiten field 
* @param  $datum string The entity  datum field 
                  */
                
function __construct($nachtragId = "", $rapportId = "", $aufsprache = "", $freierText = "", $arbeitszeiten = "", $datum = ""){ 
	 $this->nachtragId = $nachtragId; 
	 $this->rapportId = $rapportId; 
	 $this->aufsprache = $aufsprache; 
	 $this->freierText = $freierText; 
	 $this->arbeitszeiten = $arbeitszeiten; 
	 $this->datum = $datum; 
}



                /**
                * Gets  $rapportId value
                * @param $rapportId
                * @return mixed
                */
                public function getRapportId() {
                    return $this->rapportId;
                }
                


                /**
                * Gets  $aufsprache value
                * @param $aufsprache
                * @return mixed
                */
                public function getAufsprache() {
                    return $this->aufsprache;
                }
                


                /**
                * Gets  $freierText value
                * @param $freierText
                * @return mixed
                */
                public function getFreierText() {
                    return $this->freierText;
                }
                


                /**
                * Gets  $arbeitszeiten value
                * @param $arbeitszeiten
                * @return mixed
                */
                public function getArbeitszeiten() {
                    return $this->arbeitszeiten;
                }
                


                /**
                * Gets  $datum value
                * @param $datum
                * @return mixed
                */
                public function getDatum() {
                    return $this->datum;
                }
                


                /**
                * Sets  $rapportId value
                * @param $rapportId
                * @return void
                */
                public function setRapportId($rapportId) {
                    $this->rapportId = $rapportId;
                }
                


                /**
                * Sets  $aufsprache value
                * @param $aufsprache
                * @return void
                */
                public function setAufsprache($aufsprache) {
                    $this->aufsprache = $aufsprache;
                }
                


                /**
                * Sets  $freierText value
                * @param $freierText
                * @return void
                */
                public function setFreierText($freierText) {
                    $this->freierText = $freierText;
                }
                


                /**
                * Sets  $arbeitszeiten value
                * @param $arbeitszeiten
                * @return void
                */
                public function setArbeitszeiten($arbeitszeiten) {
                    $this->arbeitszeiten = $arbeitszeiten;
                }
                


                /**
                * Sets  $datum value
                * @param $datum
                * @return void
                */
                public function setDatum($datum) {
                    $this->datum = $datum;
                }
                

            /**
            * Selects all Nachtraege items
            * @return
            *   array The object having all Nachtraege items
            *    or string with the Exception details if error occured
            */
            public function selectAllNachtraeges(){
                try {
                    $daoSelect = new DaoSelect();
                    return $daoSelect->selectAllNachtraeges();
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }


           /**
            * Gets Nachtraege item
            * @param $nachtragId int  The table primary key
            * @return
            *   array The object with the given $nachtragId value
            */
            public function getNachtraegeDetails($nachtragId){
                try {
                    $daoSelect = new DaoSelect();
                    return $daoSelect->selectNachtraegeDetails($nachtragId);
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }


           /**
            * Inserts new Nachtraege entity
            * @param  $rapportId int The entity  rapportId field 
 * @param   $aufsprache string The entity  aufsprache field
 * @param   $freierText string The entity  freierText field
 * @param   $arbeitszeiten string The entity  arbeitszeiten field
 * @param   $datum string The entity  datum field
            * @return
            *   boolean TRUE if insert successful, otherwise FALSE
            */
            public function insertNewNachtraege($rapportId, $aufsprache, $freierText, $arbeitszeiten, $datum){
                try {
                    $daoInsert = new DaoInsert();
                    return $daoInsert->insertNewNachtraege($rapportId, $aufsprache, $freierText, $arbeitszeiten, $datum);
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }


           /**
            * Updates Nachtraege item
             * @param  $nachtragId int The entity  nachtragId field 
* @param  $rapportId int The entity  rapportId field 
* @param  $aufsprache string The entity  aufsprache field 
* @param  $freierText string The entity  freierText field 
* @param  $arbeitszeiten string The entity  arbeitszeiten field 
* @param  $datum string The entity  datum field 
            * @return
            *   boolean  TRUE if update successful, otherwise FALSE
            */
            public function updateNachtraege($nachtragId, $rapportId, $aufsprache, $freierText, $arbeitszeiten, $datum){
                try {
                    $daoUpdate = new DaoUpdate();
                    return $daoUpdate->updateNachtraege($nachtragId, $rapportId, $aufsprache, $freierText, $arbeitszeiten, $datum);
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }


           /**
            * Updates Nachtraege item  details
            
* @param  $nachtragId int The entity  nachtragId field 
* @param  $rapportId int The entity  rapportId field 
* @param  $aufsprache string The entity  aufsprache field 
* @param  $freierText string The entity  freierText field 
* @param  $arbeitszeiten string The entity  arbeitszeiten field 
* @param  $datum string The entity  datum field 
            * @return
            *   boolean TRUE if update successful, otherwise FALSE
            */
            public function updateNachtraegeDetails($nachtragId, $rapportId, $aufsprache, $freierText, $arbeitszeiten, $datum){
                try {
                    $daoUpdate = new DaoUpdate();
                    return $daoUpdate->updateNachtraegeDetails($nachtragId, $rapportId, $aufsprache, $freierText, $arbeitszeiten, $datum);
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }


           /**
            * Updates rapportId of the Nachtraege entity
             * @param   $nachtragId int The entity  nachtragId field 
 * @param   $rapportId int The entity  rapportId field
            * @return
            *   boolean TRUE if update successful, otherwise FALSE
            */
            public function updateNachtraegeRapportId($nachtragId, $rapportId){
                try {
                    $daoUpdate = new DaoUpdate();
                    return $daoUpdate->updateNachtraegeRapportId($nachtragId, $rapportId);
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }


           /**
            * Updates aufsprache of the Nachtraege entity
             * @param   $nachtragId int The entity  nachtragId field 
 * @param   $aufsprache string The entity  aufsprache field
            * @return
            *   boolean TRUE if update successful, otherwise FALSE
            */
            public function updateNachtraegeAufsprache($nachtragId, $aufsprache){
                try {
                    $daoUpdate = new DaoUpdate();
                    return $daoUpdate->updateNachtraegeAufsprache($nachtragId, $aufsprache);
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }


           /**
            * Updates freierText of the Nachtraege entity
             * @param   $nachtragId int The entity  nachtragId field 
 * @param   $freierText string The entity  freierText field
            * @return
            *   boolean TRUE if update successful, otherwise FALSE
            */
            public function updateNachtraegeFreierText($nachtragId, $freierText){
                try {
                    $daoUpdate = new DaoUpdate();
                    return $daoUpdate->updateNachtraegeFreierText($nachtragId, $freierText);
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }


           /**
            * Updates arbeitszeiten of the Nachtraege entity
             * @param   $nachtragId int The entity  nachtragId field 
 * @param   $arbeitszeiten string The entity  arbeitszeiten field
            * @return
            *   boolean TRUE if update successful, otherwise FALSE
            */
            public function updateNachtraegeArbeitszeiten($nachtragId, $arbeitszeiten){
                try {
                    $daoUpdate = new DaoUpdate();
                    return $daoUpdate->updateNachtraegeArbeitszeiten($nachtragId, $arbeitszeiten);
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }


           /**
            * Updates datum of the Nachtraege entity
             * @param   $nachtragId int The entity  nachtragId field 
 * @param   $datum string The entity  datum field
            * @return
            *   boolean TRUE if update successful, otherwise FALSE
            */
            public function updateNachtraegeDatum($nachtragId, $datum){
                try {
                    $daoUpdate = new DaoUpdate();
                    return $daoUpdate->updateNachtraegeDatum($nachtragId, $datum);
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }


           /**
            * Updates specific field of the Nachtraege item
            * @param    $fieldName string The field name
            * @param    $keyFieldValue int The primary key field value
            * @param    $newFieldValue string The new field value
            * @return
            *   boolean TRUE if update successful, otherwise FALSE
            */
            public function updateNachtraegeEntityField($fieldName, $keyFieldValue, $newFieldValue){
                try {
                    switch($fieldName){
                        
                case "rapportId":
			return $this->updateNachtraegeRapportId($keyFieldValue, $newFieldValue);
            
                case "aufsprache":
			return $this->updateNachtraegeAufsprache($keyFieldValue, $newFieldValue);
            
                case "freierText":
			return $this->updateNachtraegeFreierText($keyFieldValue, $newFieldValue);
            
                case "arbeitszeiten":
			return $this->updateNachtraegeArbeitszeiten($keyFieldValue, $newFieldValue);
            
                case "datum":
			return $this->updateNachtraegeDatum($keyFieldValue, $newFieldValue);
            
                    }
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
                return true;
            }


           /**
            * Deletes Nachtraege item
            * @param  $nachtragId int  The table primary key
            * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
            */
            public function deleteNachtraege($nachtragId){
                try {
                    $daoDelete = new DaoDelete();
                    return $daoDelete->deleteNachtraege($nachtragId);
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }


           /**
            * Deletes selected Nachtraege items
            * @param  $selectedItemsId array The List of primary keys item to be deleted
            * @return boolean|mixed TRUE if delete successful, otherwise string with error message
            */
            public function deleteSelectedNachtraeges($selectedItemsId){

                try {
                    $daoDelete = new DaoDelete();
                    if (!isset($selectedItemsId) || !is_array($selectedItemsId)){
                        return "Error: Invalid Parameters type for this method.";
                    }
                    foreach (array_values($selectedItemsId) as $itemId) {
                        if ($daoDelete->deleteNachtraege($itemId)) {
                             continue;
                        }
                        else {
                            return "error: Can not delete Nachtraege !";
                        }
                    }
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
                return true;
            }


           /**
            * Deletes all Nachtraege items
            * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
            */
            public function deleteAllNachtraeges(){
                try {
                    $daoDelete = new DaoDelete();
                    return $daoDelete->deleteAllNachtraeges();
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }

 
}

