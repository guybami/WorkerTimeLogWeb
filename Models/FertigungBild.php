
<?php

/**
 * This module was auto generated by the G-Watcho module generator
 * The FertigungBild model entity class.
 * @author
 *    Guy Bami
 */
include_once '../Utils/ExceptionLogger.php';

class FertigungBild {

    private $bildId;
    private $fertigungId;
    private $dateiName;

    /** Constructor of an FertigungBild object
     *  @param $bildId int The entity  primary key field 
     * @param  $fertigungId int The entity  fertigungId field 
     * @param  $dateiName string The entity  dateiName field 
     */
    function __construct($bildId = "", $fertigungId = "", $dateiName = "") {
        $this->bildId = $bildId;
        $this->fertigungId = $fertigungId;
        $this->dateiName = $dateiName;
    }

    /**
     * Gets  $fertigungId value
     * @param $fertigungId
     * @return mixed
     */
    public function getFertigungId() {
        return $this->fertigungId;
    }

    /**
     * Gets  $dateiName value
     * @param $dateiName
     * @return mixed
     */
    public function getDateiName() {
        return $this->dateiName;
    }

    /**
     * Sets  $fertigungId value
     * @param $fertigungId
     * @return void
     */
    public function setFertigungId($fertigungId) {
        $this->fertigungId = $fertigungId;
    }

    /**
     * Sets  $dateiName value
     * @param $dateiName
     * @return void
     */
    public function setDateiName($dateiName) {
        $this->dateiName = $dateiName;
    }

    /**
     * Selects all FertigungBild items
     * @return
     *   array The object having all FertigungBild items
     *    or string with the Exception details if error occured
     */
    public function selectAllFertigungBilds() {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectAllFertigungBilds();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Gets FertigungBild item
     * @param $bildId int  The table primary key
     * @return
     *   array The object with the given $bildId value
     */
    public function getFertigungBildDetails($bildId) {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectFertigungBildDetails($bildId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Inserts new FertigungBild entity
     * @param  $fertigungId int The entity  fertigungId field 
     * @param   $dateiName string The entity  dateiName field
     * @return
     *   boolean TRUE if insert successful, otherwise FALSE
     */
    public function insertNewFertigungBild($fertigungId, $dateiName) {
        try {
            $daoInsert = new DaoInsert();
            return $daoInsert->insertNewFertigungBild($fertigungId, $dateiName);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates FertigungBild item
     * @param  $bildId int The entity  bildId field 
     * @param  $fertigungId int The entity  fertigungId field 
     * @param  $dateiName string The entity  dateiName field 
     * @return
     *   boolean  TRUE if update successful, otherwise FALSE
     */
    public function updateFertigungBild($bildId, $fertigungId, $dateiName) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateFertigungBild($bildId, $fertigungId, $dateiName);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates FertigungBild item  details

     * @param  $bildId int The entity  bildId field 
     * @param  $fertigungId int The entity  fertigungId field 
     * @param  $dateiName string The entity  dateiName field 
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateFertigungBildDetails($bildId, $fertigungId, $dateiName) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateFertigungBildDetails($bildId, $fertigungId, $dateiName);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates fertigungId of the FertigungBild entity
     * @param   $bildId int The entity  bildId field 
     * @param   $fertigungId int The entity  fertigungId field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateFertigungBildFertigungId($bildId, $fertigungId) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateFertigungBildFertigungId($bildId, $fertigungId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates dateiName of the FertigungBild entity
     * @param   $bildId int The entity  bildId field 
     * @param   $dateiName string The entity  dateiName field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateFertigungBildDateiName($bildId, $dateiName) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateFertigungBildDateiName($bildId, $dateiName);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates specific field of the FertigungBild item
     * @param    $fieldName string The field name
     * @param    $keyFieldValue int The primary key field value
     * @param    $newFieldValue string The new field value
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateFertigungBildEntityField($fieldName, $keyFieldValue, $newFieldValue) {
        try {
            switch ($fieldName) {

                case "fertigungId":
                    return $this->updateFertigungBildFertigungId($keyFieldValue, $newFieldValue);

                case "dateiName":
                    return $this->updateFertigungBildDateiName($keyFieldValue, $newFieldValue);
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes FertigungBild item
     * @param  $bildId int  The table primary key
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteFertigungBild($bildId) {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteFertigungBild($bildId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Deletes selected FertigungBild items
     * @param  $selectedItemsId array The List of primary keys item to be deleted
     * @return boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteSelectedFertigungBilds($selectedItemsId) {

        try {
            $daoDelete = new DaoDelete();
            if (!isset($selectedItemsId) || !is_array($selectedItemsId)) {
                return "Error: Invalid Parameters type for this method.";
            }
            foreach (array_values($selectedItemsId) as $itemId) {
                if ($daoDelete->deleteFertigungBild($itemId)) {
                    continue;
                } else {
                    return "error: Can not delete FertigungBild !";
                }
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes all FertigungBild items
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteAllFertigungBilds() {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteAllFertigungBilds();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

}
