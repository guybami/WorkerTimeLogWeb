
<?php

/**
 * This module was auto generated by the G-Watcho module generator
 * The TaskLogTime model entity class.
 * @author
 *    Guy Bami
 */
include_once '../Utils/ExceptionLogger.php';

class TaskLogTime {

    private $taskLogTimeId;
    private $userId;
    private $taskId;
    private $title;
    private $startTime;
    private $endTime;
    private $summary;
    private $date;

    /** Constructor of an TaskLogTime object
     *  @param $taskLogTimeId int The entity  primary key field 
     * @param  $userId int The entity  userId field 
     * @param  $taskId int The entity  taskId field 
     * @param  $title string The entity  title field 
     * @param  $startTime string The entity  startTime field 
     * @param  $endTime string The entity  endTime field 
     * @param  $summary string The entity  summary field 
     * @param  $date string The entity  date field 
     */
    function __construct($taskLogTimeId = "", $userId = "", $taskId = "", $title = "", $startTime = "", $endTime = "", $summary = "", $date = "") {
        $this->taskLogTimeId = $taskLogTimeId;
        $this->userId = $userId;
        $this->taskId = $taskId;
        $this->title = $title;
        $this->startTime = $startTime;
        $this->endTime = $endTime;
        $this->summary = $summary;
        $this->date = $date;
    }

    /**
     * Gets  $userId value
     * @param $userId
     * @return mixed
     */
    public function getUserId() {
        return $this->userId;
    }

    /**
     * Gets  $taskId value
     * @param $taskId
     * @return mixed
     */
    public function getTaskId() {
        return $this->taskId;
    }

    /**
     * Gets  $title value
     * @param $title
     * @return mixed
     */
    public function getTitle() {
        return $this->title;
    }

    /**
     * Gets  $startTime value
     * @param $startTime
     * @return mixed
     */
    public function getStartTime() {
        return $this->startTime;
    }

    /**
     * Gets  $endTime value
     * @param $endTime
     * @return mixed
     */
    public function getEndTime() {
        return $this->endTime;
    }

    /**
     * Gets  $summary value
     * @param $summary
     * @return mixed
     */
    public function getSummary() {
        return $this->summary;
    }

    /**
     * Gets  $date value
     * @param $date
     * @return mixed
     */
    public function getDate() {
        return $this->date;
    }

    /**
     * Sets  $userId value
     * @param $userId
     * @return void
     */
    public function setUserId($userId) {
        $this->userId = $userId;
    }

    /**
     * Sets  $taskId value
     * @param $taskId
     * @return void
     */
    public function setTaskId($taskId) {
        $this->taskId = $taskId;
    }

    /**
     * Sets  $title value
     * @param $title
     * @return void
     */
    public function setTitle($title) {
        $this->title = $title;
    }

    /**
     * Sets  $startTime value
     * @param $startTime
     * @return void
     */
    public function setStartTime($startTime) {
        $this->startTime = $startTime;
    }

    /**
     * Sets  $endTime value
     * @param $endTime
     * @return void
     */
    public function setEndTime($endTime) {
        $this->endTime = $endTime;
    }

    /**
     * Sets  $summary value
     * @param $summary
     * @return void
     */
    public function setSummary($summary) {
        $this->summary = $summary;
    }

    /**
     * Sets  $date value
     * @param $date
     * @return void
     */
    public function setDate($date) {
        $this->date = $date;
    }

    /**
     * Selects all TaskLogTime items
     * @return
     *   array The object having all TaskLogTime items
     *    or string with the Exception details if error occured
     */
    public function selectAllTaskLogTimes() {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectAllTaskLogTimes();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Gets TaskLogTime item
     * @param $taskLogTimeId int  The table primary key
     * @return
     *   array The object with the given $taskLogTimeId value
     */
    public function getTaskLogTimeDetails($taskLogTimeId) {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectTaskLogTimeDetails($taskLogTimeId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Inserts new TaskLogTime entity
     * @param  $userId int The entity  userId field 
     * @param   $taskId int The entity  taskId field
     * @param   $title string The entity  title field
     * @param   $startTime string The entity  startTime field
     * @param   $endTime string The entity  endTime field
     * @param   $summary string The entity  summary field
     * @param   $date string The entity  date field
     * @return
     *   boolean TRUE if insert successful, otherwise FALSE
     */
    public function insertNewTaskLogTime($userId, $taskId, $title, $startTime, $endTime, $summary, $date) {
        try {
            $daoInsert = new DaoInsert();
            return $daoInsert->insertNewTaskLogTime($userId, $taskId, $title, $startTime, $endTime, $summary, $date);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates TaskLogTime item
     * @param  $taskLogTimeId int The entity  taskLogTimeId field 
     * @param  $userId int The entity  userId field 
     * @param  $taskId int The entity  taskId field 
     * @param  $title string The entity  title field 
     * @param  $startTime string The entity  startTime field 
     * @param  $endTime string The entity  endTime field 
     * @param  $summary string The entity  summary field 
     * @param  $date string The entity  date field 
     * @return
     *   boolean  TRUE if update successful, otherwise FALSE
     */
    public function updateTaskLogTime($taskLogTimeId, $userId, $taskId, $title, $startTime, $endTime, $summary, $date) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateTaskLogTime($taskLogTimeId, $userId, $taskId, $title, $startTime, $endTime, $summary, $date);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates TaskLogTime item  details

     * @param  $taskLogTimeId int The entity  taskLogTimeId field 
     * @param  $userId int The entity  userId field 
     * @param  $taskId int The entity  taskId field 
     * @param  $title string The entity  title field 
     * @param  $startTime string The entity  startTime field 
     * @param  $endTime string The entity  endTime field 
     * @param  $summary string The entity  summary field 
     * @param  $date string The entity  date field 
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateTaskLogTimeDetails($taskLogTimeId, $userId, $taskId, $title, $startTime, $endTime, $summary, $date) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateTaskLogTimeDetails($taskLogTimeId, $userId, $taskId, $title, $startTime, $endTime, $summary, $date);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates userId of the TaskLogTime entity
     * @param   $taskLogTimeId int The entity  taskLogTimeId field 
     * @param   $userId int The entity  userId field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateTaskLogTimeUserId($taskLogTimeId, $userId) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateTaskLogTimeUserId($taskLogTimeId, $userId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates taskId of the TaskLogTime entity
     * @param   $taskLogTimeId int The entity  taskLogTimeId field 
     * @param   $taskId int The entity  taskId field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateTaskLogTimeTaskId($taskLogTimeId, $taskId) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateTaskLogTimeTaskId($taskLogTimeId, $taskId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates title of the TaskLogTime entity
     * @param   $taskLogTimeId int The entity  taskLogTimeId field 
     * @param   $title string The entity  title field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateTaskLogTimeTitle($taskLogTimeId, $title) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateTaskLogTimeTitle($taskLogTimeId, $title);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates startTime of the TaskLogTime entity
     * @param   $taskLogTimeId int The entity  taskLogTimeId field 
     * @param   $startTime string The entity  startTime field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateTaskLogTimeStartTime($taskLogTimeId, $startTime) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateTaskLogTimeStartTime($taskLogTimeId, $startTime);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates endTime of the TaskLogTime entity
     * @param   $taskLogTimeId int The entity  taskLogTimeId field 
     * @param   $endTime string The entity  endTime field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateTaskLogTimeEndTime($taskLogTimeId, $endTime) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateTaskLogTimeEndTime($taskLogTimeId, $endTime);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates summary of the TaskLogTime entity
     * @param   $taskLogTimeId int The entity  taskLogTimeId field 
     * @param   $summary string The entity  summary field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateTaskLogTimeSummary($taskLogTimeId, $summary) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateTaskLogTimeSummary($taskLogTimeId, $summary);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates date of the TaskLogTime entity
     * @param   $taskLogTimeId int The entity  taskLogTimeId field 
     * @param   $date string The entity  date field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateTaskLogTimeDate($taskLogTimeId, $date) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateTaskLogTimeDate($taskLogTimeId, $date);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates specific field of the TaskLogTime item
     * @param    $fieldName string The field name
     * @param    $keyFieldValue int The primary key field value
     * @param    $newFieldValue string The new field value
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateTaskLogTimeEntityField($fieldName, $keyFieldValue, $newFieldValue) {
        try {
            switch ($fieldName) {

                case "userId":
                    return $this->updateTaskLogTimeUserId($keyFieldValue, $newFieldValue);

                case "taskId":
                    return $this->updateTaskLogTimeTaskId($keyFieldValue, $newFieldValue);

                case "title":
                    return $this->updateTaskLogTimeTitle($keyFieldValue, $newFieldValue);

                case "startTime":
                    return $this->updateTaskLogTimeStartTime($keyFieldValue, $newFieldValue);

                case "endTime":
                    return $this->updateTaskLogTimeEndTime($keyFieldValue, $newFieldValue);

                case "summary":
                    return $this->updateTaskLogTimeSummary($keyFieldValue, $newFieldValue);

                case "date":
                    return $this->updateTaskLogTimeDate($keyFieldValue, $newFieldValue);
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes TaskLogTime item
     * @param  $taskLogTimeId int  The table primary key
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteTaskLogTime($taskLogTimeId) {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteTaskLogTime($taskLogTimeId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Deletes selected TaskLogTime items
     * @param  $selectedItemsId array The List of primary keys item to be deleted
     * @return boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteSelectedTaskLogTimes($selectedItemsId) {

        try {
            $daoDelete = new DaoDelete();
            if (!isset($selectedItemsId) || !is_array($selectedItemsId)) {
                return "Error: Invalid Parameters type for this method.";
            }
            foreach (array_values($selectedItemsId) as $itemId) {
                if ($daoDelete->deleteTaskLogTime($itemId)) {
                    continue;
                } else {
                    return "error: Can not delete TaskLogTime !";
                }
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes all TaskLogTime items
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteAllTaskLogTimes() {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteAllTaskLogTimes();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

}
