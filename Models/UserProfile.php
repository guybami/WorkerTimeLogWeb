
<?php

/**
 * This module was auto generated by the G-Watcho module generator
 * The UserProfile model entity class.
 * @author
 *    Guy Bami
 */
include_once '../Utils/ExceptionLogger.php';

class UserProfile {

    private $profileId;
    private $userId;
    private $gender;
    private $photoFileName;
    private $street;
    private $zipCode;
    private $city;
    private $address;
    private $defalutLanguage;

    /** Constructor of an UserProfile object
     *  @param $profileId int The entity  primary key field 
     * @param  $userId int The entity  userId field 
     * @param  $gender string The entity  gender field 
     * @param  $photoFileName string The entity  photoFileName field 
     * @param  $street string The entity  street field 
     * @param  $zipCode string The entity  zipCode field 
     * @param  $city string The entity  city field 
     * @param  $address string The entity  address field 
     * @param  $defalutLanguage string The entity  defalutLanguage field 
     */
    function __construct($profileId = "", $userId = "", $gender = "", $photoFileName = "", $street = "", $zipCode = "", $city = "", $address = "", $defalutLanguage = "") {
        $this->profileId = $profileId;
        $this->userId = $userId;
        $this->gender = $gender;
        $this->photoFileName = $photoFileName;
        $this->street = $street;
        $this->zipCode = $zipCode;
        $this->city = $city;
        $this->address = $address;
        $this->defalutLanguage = $defalutLanguage;
    }

    /**
     * Gets  $userId value
     * @param $userId
     * @return mixed
     */
    public function getUserId() {
        return $this->userId;
    }

    /**
     * Gets  $gender value
     * @param $gender
     * @return mixed
     */
    public function getGender() {
        return $this->gender;
    }

    /**
     * Gets  $photoFileName value
     * @param $photoFileName
     * @return mixed
     */
    public function getPhotoFileName() {
        return $this->photoFileName;
    }

    /**
     * Gets  $street value
     * @param $street
     * @return mixed
     */
    public function getStreet() {
        return $this->street;
    }

    /**
     * Gets  $zipCode value
     * @param $zipCode
     * @return mixed
     */
    public function getZipCode() {
        return $this->zipCode;
    }

    /**
     * Gets  $city value
     * @param $city
     * @return mixed
     */
    public function getCity() {
        return $this->city;
    }

    /**
     * Gets  $address value
     * @param $address
     * @return mixed
     */
    public function getAddress() {
        return $this->address;
    }

    /**
     * Gets  $defalutLanguage value
     * @param $defalutLanguage
     * @return mixed
     */
    public function getDefalutLanguage() {
        return $this->defalutLanguage;
    }

    /**
     * Sets  $userId value
     * @param $userId
     * @return void
     */
    public function setUserId($userId) {
        $this->userId = $userId;
    }

    /**
     * Sets  $gender value
     * @param $gender
     * @return void
     */
    public function setGender($gender) {
        $this->gender = $gender;
    }

    /**
     * Sets  $photoFileName value
     * @param $photoFileName
     * @return void
     */
    public function setPhotoFileName($photoFileName) {
        $this->photoFileName = $photoFileName;
    }

    /**
     * Sets  $street value
     * @param $street
     * @return void
     */
    public function setStreet($street) {
        $this->street = $street;
    }

    /**
     * Sets  $zipCode value
     * @param $zipCode
     * @return void
     */
    public function setZipCode($zipCode) {
        $this->zipCode = $zipCode;
    }

    /**
     * Sets  $city value
     * @param $city
     * @return void
     */
    public function setCity($city) {
        $this->city = $city;
    }

    /**
     * Sets  $address value
     * @param $address
     * @return void
     */
    public function setAddress($address) {
        $this->address = $address;
    }

    /**
     * Sets  $defalutLanguage value
     * @param $defalutLanguage
     * @return void
     */
    public function setDefalutLanguage($defalutLanguage) {
        $this->defalutLanguage = $defalutLanguage;
    }

    /**
     * Selects all UserProfile items
     * @return
     *   array The object having all UserProfile items
     *    or string with the Exception details if error occured
     */
    public function selectAllUserProfiles() {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectAllUserProfiles();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Gets UserProfile item
     * @param $profileId int  The table primary key
     * @return
     *   array The object with the given $profileId value
     */
    public function getUserProfileDetails($profileId) {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectUserProfileDetails($profileId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Inserts new UserProfile entity
     * @param  $userId int The entity  userId field 
     * @param   $gender string The entity  gender field
     * @param   $photoFileName string The entity  photoFileName field
     * @param   $street string The entity  street field
     * @param   $zipCode string The entity  zipCode field
     * @param   $city string The entity  city field
     * @param   $address string The entity  address field
     * @param   $defalutLanguage string The entity  defalutLanguage field
     * @return
     *   boolean TRUE if insert successful, otherwise FALSE
     */
    public function insertNewUserProfile($userId, $gender, $photoFileName, $street, $zipCode, $city, $address, $defalutLanguage) {
        try {
            $daoInsert = new DaoInsert();
            return $daoInsert->insertNewUserProfile($userId, $gender, $photoFileName, $street, $zipCode, $city, $address, $defalutLanguage);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates UserProfile item
     * @param  $profileId int The entity  profileId field 
     * @param  $userId int The entity  userId field 
     * @param  $gender string The entity  gender field 
     * @param  $photoFileName string The entity  photoFileName field 
     * @param  $street string The entity  street field 
     * @param  $zipCode string The entity  zipCode field 
     * @param  $city string The entity  city field 
     * @param  $address string The entity  address field 
     * @param  $defalutLanguage string The entity  defalutLanguage field 
     * @return
     *   boolean  TRUE if update successful, otherwise FALSE
     */
    public function updateUserProfile($profileId, $userId, $gender, $photoFileName, $street, $zipCode, $city, $address, $defalutLanguage) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateUserProfile($profileId, $userId, $gender, $photoFileName, $street, $zipCode, $city, $address, $defalutLanguage);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates UserProfile item  details

     * @param  $profileId int The entity  profileId field 
     * @param  $userId int The entity  userId field 
     * @param  $gender string The entity  gender field 
     * @param  $photoFileName string The entity  photoFileName field 
     * @param  $street string The entity  street field 
     * @param  $zipCode string The entity  zipCode field 
     * @param  $city string The entity  city field 
     * @param  $address string The entity  address field 
     * @param  $defalutLanguage string The entity  defalutLanguage field 
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateUserProfileDetails($profileId, $userId, $gender, $photoFileName, $street, $zipCode, $city, $address, $defalutLanguage) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateUserProfileDetails($profileId, $userId, $gender, $photoFileName, $street, $zipCode, $city, $address, $defalutLanguage);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates userId of the UserProfile entity
     * @param   $profileId int The entity  profileId field 
     * @param   $userId int The entity  userId field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateUserProfileUserId($profileId, $userId) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateUserProfileUserId($profileId, $userId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates gender of the UserProfile entity
     * @param   $profileId int The entity  profileId field 
     * @param   $gender string The entity  gender field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateUserProfileGender($profileId, $gender) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateUserProfileGender($profileId, $gender);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates photoFileName of the UserProfile entity
     * @param   $profileId int The entity  profileId field 
     * @param   $photoFileName string The entity  photoFileName field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateUserProfilePhotoFileName($profileId, $photoFileName) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateUserProfilePhotoFileName($profileId, $photoFileName);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates street of the UserProfile entity
     * @param   $profileId int The entity  profileId field 
     * @param   $street string The entity  street field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateUserProfileStreet($profileId, $street) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateUserProfileStreet($profileId, $street);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates zipCode of the UserProfile entity
     * @param   $profileId int The entity  profileId field 
     * @param   $zipCode string The entity  zipCode field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateUserProfileZipCode($profileId, $zipCode) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateUserProfileZipCode($profileId, $zipCode);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates city of the UserProfile entity
     * @param   $profileId int The entity  profileId field 
     * @param   $city string The entity  city field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateUserProfileCity($profileId, $city) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateUserProfileCity($profileId, $city);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates address of the UserProfile entity
     * @param   $profileId int The entity  profileId field 
     * @param   $address string The entity  address field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateUserProfileAddress($profileId, $address) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateUserProfileAddress($profileId, $address);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates defalutLanguage of the UserProfile entity
     * @param   $profileId int The entity  profileId field 
     * @param   $defalutLanguage string The entity  defalutLanguage field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateUserProfileDefalutLanguage($profileId, $defalutLanguage) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateUserProfileDefalutLanguage($profileId, $defalutLanguage);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates specific field of the UserProfile item
     * @param    $fieldName string The field name
     * @param    $keyFieldValue int The primary key field value
     * @param    $newFieldValue string The new field value
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateUserProfileEntityField($fieldName, $keyFieldValue, $newFieldValue) {
        try {
            switch ($fieldName) {

                case "userId":
                    return $this->updateUserProfileUserId($keyFieldValue, $newFieldValue);

                case "gender":
                    return $this->updateUserProfileGender($keyFieldValue, $newFieldValue);

                case "photoFileName":
                    return $this->updateUserProfilePhotoFileName($keyFieldValue, $newFieldValue);

                case "street":
                    return $this->updateUserProfileStreet($keyFieldValue, $newFieldValue);

                case "zipCode":
                    return $this->updateUserProfileZipCode($keyFieldValue, $newFieldValue);

                case "city":
                    return $this->updateUserProfileCity($keyFieldValue, $newFieldValue);

                case "address":
                    return $this->updateUserProfileAddress($keyFieldValue, $newFieldValue);

                case "defalutLanguage":
                    return $this->updateUserProfileDefalutLanguage($keyFieldValue, $newFieldValue);
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes UserProfile item
     * @param  $profileId int  The table primary key
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteUserProfile($profileId) {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteUserProfile($profileId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Deletes selected UserProfile items
     * @param  $selectedItemsId array The List of primary keys item to be deleted
     * @return boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteSelectedUserProfiles($selectedItemsId) {

        try {
            $daoDelete = new DaoDelete();
            if (!isset($selectedItemsId) || !is_array($selectedItemsId)) {
                return "Error: Invalid Parameters type for this method.";
            }
            foreach (array_values($selectedItemsId) as $itemId) {
                if ($daoDelete->deleteUserProfile($itemId)) {
                    continue;
                } else {
                    return "error: Can not delete UserProfile !";
                }
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes all UserProfile items
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteAllUserProfiles() {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteAllUserProfiles();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

}
