
<?php

/**
 * This module was auto generated by the G-Watcho module generator
 * The ErfassungOhneAuftragBild model entity class.
 * @author
 *    Guy Bami
 */
include_once '../Utils/ExceptionLogger.php';

class ErfassungOhneAuftragBild {

    private $bildId;
    private $erfassungId;
    private $bildTyp;
    private $dateiName;

    /** Constructor of an ErfassungOhneAuftragBild object
     *  @param $bildId int The entity  primary key field 
     * @param  $erfassungId int The entity  erfassungId field 
     * @param  $bildTyp string The entity  bildTyp field 
     * @param  $dateiName string The entity  dateiName field 
     */
    function __construct($bildId = "", $erfassungId = "", $bildTyp = "", $dateiName = "") {
        $this->bildId = $bildId;
        $this->erfassungId = $erfassungId;
        $this->bildTyp = $bildTyp;
        $this->dateiName = $dateiName;
    }

    /**
     * Gets  $erfassungId value
     * @param $erfassungId
     * @return mixed
     */
    public function getErfassungId() {
        return $this->erfassungId;
    }

    /**
     * Gets  $bildTyp value
     * @param $bildTyp
     * @return mixed
     */
    public function getBildTyp() {
        return $this->bildTyp;
    }

    /**
     * Gets  $dateiName value
     * @param $dateiName
     * @return mixed
     */
    public function getDateiName() {
        return $this->dateiName;
    }

    /**
     * Sets  $erfassungId value
     * @param $erfassungId
     * @return void
     */
    public function setErfassungId($erfassungId) {
        $this->erfassungId = $erfassungId;
    }

    /**
     * Sets  $bildTyp value
     * @param $bildTyp
     * @return void
     */
    public function setBildTyp($bildTyp) {
        $this->bildTyp = $bildTyp;
    }

    /**
     * Sets  $dateiName value
     * @param $dateiName
     * @return void
     */
    public function setDateiName($dateiName) {
        $this->dateiName = $dateiName;
    }

    /**
     * Selects all ErfassungOhneAuftragBild items
     * @return
     *   array The object having all ErfassungOhneAuftragBild items
     *    or string with the Exception details if error occured
     */
    public function selectAllErfassungOhneAuftragBilds() {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectAllErfassungOhneAuftragBilds();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Gets ErfassungOhneAuftragBild item
     * @param $bildId int  The table primary key
     * @return
     *   array The object with the given $bildId value
     */
    public function getErfassungOhneAuftragBildDetails($bildId) {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectErfassungOhneAuftragBildDetails($bildId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Inserts new ErfassungOhneAuftragBild entity
     * @param  $erfassungId int The entity  erfassungId field 
     * @param   $bildTyp string The entity  bildTyp field
     * @param   $dateiName string The entity  dateiName field
     * @return
     *   boolean TRUE if insert successful, otherwise FALSE
     */
    public function insertNewErfassungOhneAuftragBild($erfassungId, $bildTyp, $dateiName) {
        try {
            $daoInsert = new DaoInsert();
            return $daoInsert->insertNewErfassungOhneAuftragBild($erfassungId, $bildTyp, $dateiName);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates ErfassungOhneAuftragBild item
     * @param  $bildId int The entity  bildId field 
     * @param  $erfassungId int The entity  erfassungId field 
     * @param  $bildTyp string The entity  bildTyp field 
     * @param  $dateiName string The entity  dateiName field 
     * @return
     *   boolean  TRUE if update successful, otherwise FALSE
     */
    public function updateErfassungOhneAuftragBild($bildId, $erfassungId, $bildTyp, $dateiName) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateErfassungOhneAuftragBild($bildId, $erfassungId, $bildTyp, $dateiName);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates ErfassungOhneAuftragBild item  details

     * @param  $bildId int The entity  bildId field 
     * @param  $erfassungId int The entity  erfassungId field 
     * @param  $bildTyp string The entity  bildTyp field 
     * @param  $dateiName string The entity  dateiName field 
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateErfassungOhneAuftragBildDetails($bildId, $erfassungId, $bildTyp, $dateiName) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateErfassungOhneAuftragBildDetails($bildId, $erfassungId, $bildTyp, $dateiName);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates erfassungId of the ErfassungOhneAuftragBild entity
     * @param   $bildId int The entity  bildId field 
     * @param   $erfassungId int The entity  erfassungId field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateErfassungOhneAuftragBildErfassungId($bildId, $erfassungId) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateErfassungOhneAuftragBildErfassungId($bildId, $erfassungId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates bildTyp of the ErfassungOhneAuftragBild entity
     * @param   $bildId int The entity  bildId field 
     * @param   $bildTyp string The entity  bildTyp field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateErfassungOhneAuftragBildBildTyp($bildId, $bildTyp) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateErfassungOhneAuftragBildBildTyp($bildId, $bildTyp);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates dateiName of the ErfassungOhneAuftragBild entity
     * @param   $bildId int The entity  bildId field 
     * @param   $dateiName string The entity  dateiName field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateErfassungOhneAuftragBildDateiName($bildId, $dateiName) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateErfassungOhneAuftragBildDateiName($bildId, $dateiName);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates specific field of the ErfassungOhneAuftragBild item
     * @param    $fieldName string The field name
     * @param    $keyFieldValue int The primary key field value
     * @param    $newFieldValue string The new field value
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateErfassungOhneAuftragBildEntityField($fieldName, $keyFieldValue, $newFieldValue) {
        try {
            switch ($fieldName) {

                case "erfassungId":
                    return $this->updateErfassungOhneAuftragBildErfassungId($keyFieldValue, $newFieldValue);

                case "bildTyp":
                    return $this->updateErfassungOhneAuftragBildBildTyp($keyFieldValue, $newFieldValue);

                case "dateiName":
                    return $this->updateErfassungOhneAuftragBildDateiName($keyFieldValue, $newFieldValue);
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes ErfassungOhneAuftragBild item
     * @param  $bildId int  The table primary key
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteErfassungOhneAuftragBild($bildId) {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteErfassungOhneAuftragBild($bildId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Deletes selected ErfassungOhneAuftragBild items
     * @param  $selectedItemsId array The List of primary keys item to be deleted
     * @return boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteSelectedErfassungOhneAuftragBilds($selectedItemsId) {

        try {
            $daoDelete = new DaoDelete();
            if (!isset($selectedItemsId) || !is_array($selectedItemsId)) {
                return "Error: Invalid Parameters type for this method.";
            }
            foreach (array_values($selectedItemsId) as $itemId) {
                if ($daoDelete->deleteErfassungOhneAuftragBild($itemId)) {
                    continue;
                } else {
                    return "error: Can not delete ErfassungOhneAuftragBild !";
                }
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes all ErfassungOhneAuftragBild items
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteAllErfassungOhneAuftragBilds() {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteAllErfassungOhneAuftragBilds();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

}
