
<?php

/**
 * This module was auto generated by the G-Watcho module generator
 * The NachtragSkizze model entity class.
 * @author
 *    Guy Bami
 */
include_once '../Utils/ExceptionLogger.php';

class NachtragSkizze {

    private $skizzeId;
    private $nachtragId;
    private $dateiName;

    /** Constructor of an NachtragSkizze object
     *  @param $skizzeId int The entity  primary key field 
     * @param  $nachtragId int The entity  nachtragId field 
     * @param  $dateiName string The entity  dateiName field 
     */
    function __construct($skizzeId = "", $nachtragId = "", $dateiName = "") {
        $this->skizzeId = $skizzeId;
        $this->nachtragId = $nachtragId;
        $this->dateiName = $dateiName;
    }

    /**
     * Gets  $nachtragId value
     * @param $nachtragId
     * @return mixed
     */
    public function getNachtragId() {
        return $this->nachtragId;
    }

    /**
     * Gets  $dateiName value
     * @param $dateiName
     * @return mixed
     */
    public function getDateiName() {
        return $this->dateiName;
    }

    /**
     * Sets  $nachtragId value
     * @param $nachtragId
     * @return void
     */
    public function setNachtragId($nachtragId) {
        $this->nachtragId = $nachtragId;
    }

    /**
     * Sets  $dateiName value
     * @param $dateiName
     * @return void
     */
    public function setDateiName($dateiName) {
        $this->dateiName = $dateiName;
    }

    /**
     * Selects all NachtragSkizze items
     * @return
     *   array The object having all NachtragSkizze items
     *    or string with the Exception details if error occured
     */
    public function selectAllNachtragSkizzes() {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectAllNachtragSkizzes();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Gets NachtragSkizze item
     * @param $skizzeId int  The table primary key
     * @return
     *   array The object with the given $skizzeId value
     */
    public function getNachtragSkizzeDetails($skizzeId) {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectNachtragSkizzeDetails($skizzeId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Inserts new NachtragSkizze entity
     * @param  $nachtragId int The entity  nachtragId field 
     * @param   $dateiName string The entity  dateiName field
     * @return
     *   boolean TRUE if insert successful, otherwise FALSE
     */
    public function insertNewNachtragSkizze($nachtragId, $dateiName) {
        try {
            $daoInsert = new DaoInsert();
            return $daoInsert->insertNewNachtragSkizze($nachtragId, $dateiName);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates NachtragSkizze item
     * @param  $skizzeId int The entity  skizzeId field 
     * @param  $nachtragId int The entity  nachtragId field 
     * @param  $dateiName string The entity  dateiName field 
     * @return
     *   boolean  TRUE if update successful, otherwise FALSE
     */
    public function updateNachtragSkizze($skizzeId, $nachtragId, $dateiName) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateNachtragSkizze($skizzeId, $nachtragId, $dateiName);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates NachtragSkizze item  details

     * @param  $skizzeId int The entity  skizzeId field 
     * @param  $nachtragId int The entity  nachtragId field 
     * @param  $dateiName string The entity  dateiName field 
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateNachtragSkizzeDetails($skizzeId, $nachtragId, $dateiName) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateNachtragSkizzeDetails($skizzeId, $nachtragId, $dateiName);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates nachtragId of the NachtragSkizze entity
     * @param   $skizzeId int The entity  skizzeId field 
     * @param   $nachtragId int The entity  nachtragId field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateNachtragSkizzeNachtragId($skizzeId, $nachtragId) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateNachtragSkizzeNachtragId($skizzeId, $nachtragId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates dateiName of the NachtragSkizze entity
     * @param   $skizzeId int The entity  skizzeId field 
     * @param   $dateiName string The entity  dateiName field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateNachtragSkizzeDateiName($skizzeId, $dateiName) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateNachtragSkizzeDateiName($skizzeId, $dateiName);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates specific field of the NachtragSkizze item
     * @param    $fieldName string The field name
     * @param    $keyFieldValue int The primary key field value
     * @param    $newFieldValue string The new field value
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateNachtragSkizzeEntityField($fieldName, $keyFieldValue, $newFieldValue) {
        try {
            switch ($fieldName) {

                case "nachtragId":
                    return $this->updateNachtragSkizzeNachtragId($keyFieldValue, $newFieldValue);

                case "dateiName":
                    return $this->updateNachtragSkizzeDateiName($keyFieldValue, $newFieldValue);
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes NachtragSkizze item
     * @param  $skizzeId int  The table primary key
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteNachtragSkizze($skizzeId) {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteNachtragSkizze($skizzeId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Deletes selected NachtragSkizze items
     * @param  $selectedItemsId array The List of primary keys item to be deleted
     * @return boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteSelectedNachtragSkizzes($selectedItemsId) {

        try {
            $daoDelete = new DaoDelete();
            if (!isset($selectedItemsId) || !is_array($selectedItemsId)) {
                return "Error: Invalid Parameters type for this method.";
            }
            foreach (array_values($selectedItemsId) as $itemId) {
                if ($daoDelete->deleteNachtragSkizze($itemId)) {
                    continue;
                } else {
                    return "error: Can not delete NachtragSkizze !";
                }
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes all NachtragSkizze items
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteAllNachtragSkizzes() {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteAllNachtragSkizzes();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

}
