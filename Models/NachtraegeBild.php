
            <?php 


               /**
                * This module was auto generated by the G-Watcho module generator
                * The NachtraegeBild model entity class.
                * @author
                *    Guy Bami
                */

include_once '../Utils/ExceptionLogger.php';


 class NachtraegeBild{ 
	  private $bildId; 
	  private $nachtragId; 
	  private $dateiName; 

                 /** Constructor of an NachtraegeBild object
                      *  @param $bildId int The entity  primary key field 
* @param  $nachtragId int The entity  nachtragId field 
* @param  $dateiName string The entity  dateiName field 
                  */
                
function __construct($bildId = "", $nachtragId = "", $dateiName = ""){ 
	 $this->bildId = $bildId; 
	 $this->nachtragId = $nachtragId; 
	 $this->dateiName = $dateiName; 
}



                /**
                * Gets  $nachtragId value
                * @param $nachtragId
                * @return mixed
                */
                public function getNachtragId() {
                    return $this->nachtragId;
                }
                


                /**
                * Gets  $dateiName value
                * @param $dateiName
                * @return mixed
                */
                public function getDateiName() {
                    return $this->dateiName;
                }
                


                /**
                * Sets  $nachtragId value
                * @param $nachtragId
                * @return void
                */
                public function setNachtragId($nachtragId) {
                    $this->nachtragId = $nachtragId;
                }
                


                /**
                * Sets  $dateiName value
                * @param $dateiName
                * @return void
                */
                public function setDateiName($dateiName) {
                    $this->dateiName = $dateiName;
                }
                

            /**
            * Selects all NachtraegeBild items
            * @return
            *   array The object having all NachtraegeBild items
            *    or string with the Exception details if error occured
            */
            public function selectAllNachtraegeBilds(){
                try {
                    $daoSelect = new DaoSelect();
                    return $daoSelect->selectAllNachtraegeBilds();
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }


           /**
            * Gets NachtraegeBild item
            * @param $bildId int  The table primary key
            * @return
            *   array The object with the given $bildId value
            */
            public function getNachtraegeBildDetails($bildId){
                try {
                    $daoSelect = new DaoSelect();
                    return $daoSelect->selectNachtraegeBildDetails($bildId);
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }


           /**
            * Inserts new NachtraegeBild entity
            * @param  $nachtragId int The entity  nachtragId field 
 * @param   $dateiName string The entity  dateiName field
            * @return
            *   boolean TRUE if insert successful, otherwise FALSE
            */
            public function insertNewNachtraegeBild($nachtragId, $dateiName){
                try {
                    $daoInsert = new DaoInsert();
                    return $daoInsert->insertNewNachtraegeBild($nachtragId, $dateiName);
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }


           /**
            * Updates NachtraegeBild item
             * @param  $bildId int The entity  bildId field 
* @param  $nachtragId int The entity  nachtragId field 
* @param  $dateiName string The entity  dateiName field 
            * @return
            *   boolean  TRUE if update successful, otherwise FALSE
            */
            public function updateNachtraegeBild($bildId, $nachtragId, $dateiName){
                try {
                    $daoUpdate = new DaoUpdate();
                    return $daoUpdate->updateNachtraegeBild($bildId, $nachtragId, $dateiName);
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }


           /**
            * Updates NachtraegeBild item  details
            
* @param  $bildId int The entity  bildId field 
* @param  $nachtragId int The entity  nachtragId field 
* @param  $dateiName string The entity  dateiName field 
            * @return
            *   boolean TRUE if update successful, otherwise FALSE
            */
            public function updateNachtraegeBildDetails($bildId, $nachtragId, $dateiName){
                try {
                    $daoUpdate = new DaoUpdate();
                    return $daoUpdate->updateNachtraegeBildDetails($bildId, $nachtragId, $dateiName);
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }


           /**
            * Updates nachtragId of the NachtraegeBild entity
             * @param   $bildId int The entity  bildId field 
 * @param   $nachtragId int The entity  nachtragId field
            * @return
            *   boolean TRUE if update successful, otherwise FALSE
            */
            public function updateNachtraegeBildNachtragId($bildId, $nachtragId){
                try {
                    $daoUpdate = new DaoUpdate();
                    return $daoUpdate->updateNachtraegeBildNachtragId($bildId, $nachtragId);
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }


           /**
            * Updates dateiName of the NachtraegeBild entity
             * @param   $bildId int The entity  bildId field 
 * @param   $dateiName string The entity  dateiName field
            * @return
            *   boolean TRUE if update successful, otherwise FALSE
            */
            public function updateNachtraegeBildDateiName($bildId, $dateiName){
                try {
                    $daoUpdate = new DaoUpdate();
                    return $daoUpdate->updateNachtraegeBildDateiName($bildId, $dateiName);
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }


           /**
            * Updates specific field of the NachtraegeBild item
            * @param    $fieldName string The field name
            * @param    $keyFieldValue int The primary key field value
            * @param    $newFieldValue string The new field value
            * @return
            *   boolean TRUE if update successful, otherwise FALSE
            */
            public function updateNachtraegeBildEntityField($fieldName, $keyFieldValue, $newFieldValue){
                try {
                    switch($fieldName){
                        
                case "nachtragId":
			return $this->updateNachtraegeBildNachtragId($keyFieldValue, $newFieldValue);
            
                case "dateiName":
			return $this->updateNachtraegeBildDateiName($keyFieldValue, $newFieldValue);
            
                    }
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
                return true;
            }


           /**
            * Deletes NachtraegeBild item
            * @param  $bildId int  The table primary key
            * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
            */
            public function deleteNachtraegeBild($bildId){
                try {
                    $daoDelete = new DaoDelete();
                    return $daoDelete->deleteNachtraegeBild($bildId);
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }


           /**
            * Deletes selected NachtraegeBild items
            * @param  $selectedItemsId array The List of primary keys item to be deleted
            * @return boolean|mixed TRUE if delete successful, otherwise string with error message
            */
            public function deleteSelectedNachtraegeBilds($selectedItemsId){

                try {
                    $daoDelete = new DaoDelete();
                    if (!isset($selectedItemsId) || !is_array($selectedItemsId)){
                        return "Error: Invalid Parameters type for this method.";
                    }
                    foreach (array_values($selectedItemsId) as $itemId) {
                        if ($daoDelete->deleteNachtraegeBild($itemId)) {
                             continue;
                        }
                        else {
                            return "error: Can not delete NachtraegeBild !";
                        }
                    }
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
                return true;
            }


           /**
            * Deletes all NachtraegeBild items
            * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
            */
            public function deleteAllNachtraegeBilds(){
                try {
                    $daoDelete = new DaoDelete();
                    return $daoDelete->deleteAllNachtraegeBilds();
                }
                catch (ExceptionLogger $e) {
                    return $e->getErrorMessage();
                }
            }

 
}

