
<?php

/**
 * This module was auto generated by the G-Watcho module generator
 * The Project model entity class.
 * @author
 *    Guy Bami
 */
include_once '../Utils/ExceptionLogger.php';

class Project {

    private $projectId;
    private $customerId;
    private $title;
    private $creationDate;
    private $status;
    private $hasOrder;

    /** Constructor of an Project object
     *  @param $projectId int The entity  primary key field 
     * @param  $customerId int The entity  customerId field 
     * @param  $title string The entity  title field 
     * @param  $creationDate string The entity  creationDate field 
     * @param  $status string The entity  status field 
     * @param  $hasOrder boolean The entity  hasOrder field 
     */
    function __construct($projectId = "", $customerId = "", $title = "", $creationDate = "", $status = "", $hasOrder = "") {
        $this->projectId = $projectId;
        $this->customerId = $customerId;
        $this->title = $title;
        $this->creationDate = $creationDate;
        $this->status = $status;
        $this->hasOrder = $hasOrder;
    }

    /**
     * Gets  $customerId value
     * @param $customerId
     * @return mixed
     */
    public function getCustomerId() {
        return $this->customerId;
    }

    /**
     * Gets  $title value
     * @param $title
     * @return mixed
     */
    public function getTitle() {
        return $this->title;
    }

    /**
     * Gets  $creationDate value
     * @param $creationDate
     * @return mixed
     */
    public function getCreationDate() {
        return $this->creationDate;
    }

    /**
     * Gets  $status value
     * @param $status
     * @return mixed
     */
    public function getStatus() {
        return $this->status;
    }

    /**
     * Gets  $hasOrder value
     * @param $hasOrder
     * @return mixed
     */
    public function getHasOrder() {
        return $this->hasOrder;
    }

    /**
     * Sets  $customerId value
     * @param $customerId
     * @return void
     */
    public function setCustomerId($customerId) {
        $this->customerId = $customerId;
    }

    /**
     * Sets  $title value
     * @param $title
     * @return void
     */
    public function setTitle($title) {
        $this->title = $title;
    }

    /**
     * Sets  $creationDate value
     * @param $creationDate
     * @return void
     */
    public function setCreationDate($creationDate) {
        $this->creationDate = $creationDate;
    }

    /**
     * Sets  $status value
     * @param $status
     * @return void
     */
    public function setStatus($status) {
        $this->status = $status;
    }

    /**
     * Sets  $hasOrder value
     * @param $hasOrder
     * @return void
     */
    public function setHasOrder($hasOrder) {
        $this->hasOrder = $hasOrder;
    }

    /**
     * Selects all Project items
     * @return
     *   array The object having all Project items
     *    or string with the Exception details if error occured
     */
    public function selectAllProjects() {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectAllProjects();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Gets Project item
     * @param $projectId int  The table primary key
     * @return
     *   array The object with the given $projectId value
     */
    public function getProjectDetails($projectId) {
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectProjectDetails($projectId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Inserts new Project entity
     * @param  $customerId int The entity  customerId field 
     * @param   $title string The entity  title field
     * @param   $creationDate string The entity  creationDate field
     * @param   $status string The entity  status field
     * @param   $hasOrder boolean The entity  hasOrder field
     * @return
     *   boolean TRUE if insert successful, otherwise FALSE
     */
    public function insertNewProject($customerId, $title, $creationDate, $status, $hasOrder) {
        try {
            $daoInsert = new DaoInsert();
            return $daoInsert->insertNewProject($customerId, $title, $creationDate, $status, $hasOrder);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates Project item
     * @param  $projectId int The entity  projectId field 
     * @param  $customerId int The entity  customerId field 
     * @param  $title string The entity  title field 
     * @param  $creationDate string The entity  creationDate field 
     * @param  $status string The entity  status field 
     * @param  $hasOrder boolean The entity  hasOrder field 
     * @return
     *   boolean  TRUE if update successful, otherwise FALSE
     */
    public function updateProject($projectId, $customerId, $title, $creationDate, $status, $hasOrder) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateProject($projectId, $customerId, $title, $creationDate, $status, $hasOrder);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates Project item  details

     * @param  $projectId int The entity  projectId field 
     * @param  $customerId int The entity  customerId field 
     * @param  $title string The entity  title field 
     * @param  $creationDate string The entity  creationDate field 
     * @param  $status string The entity  status field 
     * @param  $hasOrder boolean The entity  hasOrder field 
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateProjectDetails($projectId, $customerId, $title, $creationDate, $status, $hasOrder) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateProjectDetails($projectId, $customerId, $title, $creationDate, $status, $hasOrder);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates customerId of the Project entity
     * @param   $projectId int The entity  projectId field 
     * @param   $customerId int The entity  customerId field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateProjectCustomerId($projectId, $customerId) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateProjectCustomerId($projectId, $customerId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates title of the Project entity
     * @param   $projectId int The entity  projectId field 
     * @param   $title string The entity  title field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateProjectTitle($projectId, $title) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateProjectTitle($projectId, $title);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates creationDate of the Project entity
     * @param   $projectId int The entity  projectId field 
     * @param   $creationDate string The entity  creationDate field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateProjectCreationDate($projectId, $creationDate) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateProjectCreationDate($projectId, $creationDate);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates status of the Project entity
     * @param   $projectId int The entity  projectId field 
     * @param   $status string The entity  status field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateProjectStatus($projectId, $status) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateProjectStatus($projectId, $status);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates hasOrder of the Project entity
     * @param   $projectId int The entity  projectId field 
     * @param   $hasOrder boolean The entity  hasOrder field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateProjectHasOrder($projectId, $hasOrder) {
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateProjectHasOrder($projectId, $hasOrder);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Updates specific field of the Project item
     * @param    $fieldName string The field name
     * @param    $keyFieldValue int The primary key field value
     * @param    $newFieldValue string The new field value
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateProjectEntityField($fieldName, $keyFieldValue, $newFieldValue) {
        try {
            switch ($fieldName) {

                case "customerId":
                    return $this->updateProjectCustomerId($keyFieldValue, $newFieldValue);

                case "title":
                    return $this->updateProjectTitle($keyFieldValue, $newFieldValue);

                case "creationDate":
                    return $this->updateProjectCreationDate($keyFieldValue, $newFieldValue);

                case "status":
                    return $this->updateProjectStatus($keyFieldValue, $newFieldValue);

                case "hasOrder":
                    return $this->updateProjectHasOrder($keyFieldValue, $newFieldValue);
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes Project item
     * @param  $projectId int  The table primary key
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteProject($projectId) {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteProject($projectId);
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

    /**
     * Deletes selected Project items
     * @param  $selectedItemsId array The List of primary keys item to be deleted
     * @return boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteSelectedProjects($selectedItemsId) {

        try {
            $daoDelete = new DaoDelete();
            if (!isset($selectedItemsId) || !is_array($selectedItemsId)) {
                return "Error: Invalid Parameters type for this method.";
            }
            foreach (array_values($selectedItemsId) as $itemId) {
                if ($daoDelete->deleteProject($itemId)) {
                    continue;
                } else {
                    return "error: Can not delete Project !";
                }
            }
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }

    /**
     * Deletes all Project items
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteAllProjects() {
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteAllProjects();
        } catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }

}
