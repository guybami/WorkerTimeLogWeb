
<?php


/**
 * This module was auto generated by the G-Watcho module generator
 * The Zeichnung model entity class.
 * @author
 *    Guy Bami
 */

include_once '../Utils/ExceptionLogger.php';


class Zeichnung{
    private $zeichnungId;
    private $auftragId;
    private $dateiName;

    /** Constructor of an Zeichnung object
     *  @param $zeichnungId int The entity  primary key field
     * @param  $auftragId int The entity  auftragId field
     * @param  $dateiName string The entity  dateiName field
     */

    function __construct($zeichnungId = "", $auftragId = "", $dateiName = ""){
        $this->zeichnungId = $zeichnungId;
        $this->auftragId = $auftragId;
        $this->dateiName = $dateiName;
    }



    /**
     * Gets  $auftragId value
     * @param $auftragId
     * @return mixed
     */
    public function getAuftragId() {
        return $this->auftragId;
    }



    /**
     * Gets  $dateiName value
     * @param $dateiName
     * @return mixed
     */
    public function getDateiName() {
        return $this->dateiName;
    }



    /**
     * Sets  $auftragId value
     * @param $auftragId
     * @return void
     */
    public function setAuftragId($auftragId) {
        $this->auftragId = $auftragId;
    }



    /**
     * Sets  $dateiName value
     * @param $dateiName
     * @return void
     */
    public function setDateiName($dateiName) {
        $this->dateiName = $dateiName;
    }


    /**
     * Selects all Zeichnung items
     * @return
     *   array The object having all Zeichnung items
     *    or string with the Exception details if error occured
     */
    public function selectAllZeichnungs(){
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectAllZeichnungs();
        }
        catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }


    /**
     * Gets Zeichnung item
     * @param $zeichnungId int  The table primary key
     * @return
     *   array The object with the given $zeichnungId value
     */
    public function getZeichnungDetails($zeichnungId){
        try {
            $daoSelect = new DaoSelect();
            return $daoSelect->selectZeichnungDetails($zeichnungId);
        }
        catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }


    /**
     * Inserts new Zeichnung entity
     * @param  $auftragId int The entity  auftragId field
     * @param   $dateiName string The entity  dateiName field
     * @return
     *   boolean TRUE if insert successful, otherwise FALSE
     */
    public function insertNewZeichnung($auftragId, $dateiName){
        try {
            $daoInsert = new DaoInsert();
            return $daoInsert->insertNewZeichnung($auftragId, $dateiName);
        }
        catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }


    /**
     * Updates Zeichnung item
     * @param  $zeichnungId int The entity  zeichnungId field
     * @param  $auftragId int The entity  auftragId field
     * @param  $dateiName string The entity  dateiName field
     * @return
     *   boolean  TRUE if update successful, otherwise FALSE
     */
    public function updateZeichnung($zeichnungId, $auftragId, $dateiName){
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateZeichnung($zeichnungId, $auftragId, $dateiName);
        }
        catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }


    /**
     * Updates Zeichnung item  details

     * @param  $zeichnungId int The entity  zeichnungId field
     * @param  $auftragId int The entity  auftragId field
     * @param  $dateiName string The entity  dateiName field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateZeichnungDetails($zeichnungId, $auftragId, $dateiName){
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateZeichnungDetails($zeichnungId, $auftragId, $dateiName);
        }
        catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }


    /**
     * Updates auftragId of the Zeichnung entity
     * @param   $zeichnungId int The entity  zeichnungId field
     * @param   $auftragId int The entity  auftragId field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateZeichnungAuftragId($zeichnungId, $auftragId){
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateZeichnungAuftragId($zeichnungId, $auftragId);
        }
        catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }


    /**
     * Updates dateiName of the Zeichnung entity
     * @param   $zeichnungId int The entity  zeichnungId field
     * @param   $dateiName string The entity  dateiName field
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateZeichnungDateiName($zeichnungId, $dateiName){
        try {
            $daoUpdate = new DaoUpdate();
            return $daoUpdate->updateZeichnungDateiName($zeichnungId, $dateiName);
        }
        catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }


    /**
     * Updates specific field of the Zeichnung item
     * @param    $fieldName string The field name
     * @param    $keyFieldValue int The primary key field value
     * @param    $newFieldValue string The new field value
     * @return
     *   boolean TRUE if update successful, otherwise FALSE
     */
    public function updateZeichnungEntityField($fieldName, $keyFieldValue, $newFieldValue){
        try {
            switch($fieldName){

                case "auftragId":
                    return $this->updateZeichnungAuftragId($keyFieldValue, $newFieldValue);

                case "dateiName":
                    return $this->updateZeichnungDateiName($keyFieldValue, $newFieldValue);

            }
        }
        catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }


    /**
     * Deletes Zeichnung item
     * @param  $zeichnungId int  The table primary key
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteZeichnung($zeichnungId){
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteZeichnung($zeichnungId);
        }
        catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }


    /**
     * Deletes selected Zeichnung items
     * @param  $selectedItemsId array The List of primary keys item to be deleted
     * @return boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteSelectedZeichnungs($selectedItemsId){

        try {
            $daoDelete = new DaoDelete();
            if (!isset($selectedItemsId) || !is_array($selectedItemsId)){
                return "Error: Invalid Parameters type for this method.";
            }
            foreach (array_values($selectedItemsId) as $itemId) {
                if ($daoDelete->deleteZeichnung($itemId)) {
                    continue;
                }
                else {
                    return "error: Can not delete Zeichnung !";
                }
            }
        }
        catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
        return true;
    }


    /**
     * Deletes all Zeichnung items
     * @return    boolean|mixed TRUE if delete successful, otherwise string with error message
     */
    public function deleteAllZeichnungs(){
        try {
            $daoDelete = new DaoDelete();
            return $daoDelete->deleteAllZeichnungs();
        }
        catch (ExceptionLogger $e) {
            return $e->getErrorMessage();
        }
    }


}

